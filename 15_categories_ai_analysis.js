// ========================================
// AI –ê–ù–ê–õ–ò–ó –ò –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ö–õ–Æ–ß–ï–í–ò–ö–û–í
// ========================================

/**
 * AI-–∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
function analyzeCurrentCategoryState(categoryData, products) {
  const context = `AI –∞–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryData.title}`;
  
  try {
    logInfo('ü§ñ –ù–∞—á–∏–Ω–∞–µ–º AI-–∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', null, context);
    
    // –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const currentState = {
      title: categoryData.title,
      description: categoryData.description || '',
      seoTitle: categoryData.seo_title || '',
      seoDescription: categoryData.seo_description || '',
      h1: categoryData.h1_title || categoryData.title,
      productsCount: products.length,
      inStockCount: products.filter(p => p.variants && p.variants.some(v => v.quantity > 0)).length,
      
      // –ê–Ω–∞–ª–∏–∑ –ª–∏—Å—Ç–∏–Ω–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤
      productTitles: products.slice(0, 20).map(p => p.title),
      
      // –ê–Ω–∞–ª–∏–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Ç–æ–≤–∞—Ä–æ–≤
      commonCharacteristics: extractCommonCharacteristics(products),
      
      // –ê–Ω–∞–ª–∏–∑ –±—Ä–µ–Ω–¥–æ–≤
      brands: [...new Set(products.map(p => p.brand_title).filter(Boolean))],
      
      // –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω–æ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
      priceRange: calculatePriceRange(products)
    };
    
    logInfo('üìä –°–æ–±—Ä–∞–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∞–Ω–∞–ª–∏–∑ –≤ OpenAI
    const analysis = performAIAnalysis(currentState);
    
    logInfo('‚úÖ AI-–∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω', null, context);
    
    return analysis;
    
  } catch (error) {
    logError('‚ùå –û—à–∏–±–∫–∞ AI-–∞–Ω–∞–ª–∏–∑–∞', error, context);
    throw error;
  }
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–±—â–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–∑ —Ç–æ–≤–∞—Ä–æ–≤
 */
function extractCommonCharacteristics(products) {
  const charCounts = {};
  
  products.forEach(product => {
    if (product.characteristics && Array.isArray(product.characteristics)) {
      product.characteristics.forEach(char => {
        const propName = char.property_title || char.property_name || '';
        if (propName) {
          charCounts[propName] = (charCounts[propName] || 0) + 1;
        }
      });
    }
  });
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —É >50% —Ç–æ–≤–∞—Ä–æ–≤
  const threshold = products.length * 0.5;
  const common = Object.entries(charCounts)
    .filter(([prop, count]) => count >= threshold)
    .map(([prop, count]) => ({ name: prop, frequency: count }))
    .sort((a, b) => b.frequency - a.frequency);
  
  return common;
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç —Ü–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
 */
function calculatePriceRange(products) {
  const prices = products
    .map(p => {
      const variant = p.variants && p.variants[0];
      return variant ? variant.price : p.price;
    })
    .filter(price => price > 0);
  
  if (prices.length === 0) {
    return { min: 0, max: 0, avg: 0 };
  }
  
  const min = Math.min(...prices);
  const max = Math.max(...prices);
  const avg = prices.reduce((a, b) => a + b, 0) / prices.length;
  
  return { min, max, avg: Math.round(avg) };
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞ –∞–Ω–∞–ª–∏–∑ –≤ OpenAI
 */
function performAIAnalysis(currentState) {
  const context = "OpenAI –∞–Ω–∞–ª–∏–∑";
  
  try {
    const apiKey = getSetting('openaiApiKey');
    
    if (!apiKey) {
      throw new Error('OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ –∏ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.

–¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï:
- –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${currentState.title}
- –¢–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${currentState.productsCount}
- –í –Ω–∞–ª–∏—á–∏–∏: ${currentState.inStockCount}
- –¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: ${currentState.priceRange.min} - ${currentState.priceRange.max} —Ä—É–±.

SEO:
- SEO Title: ${currentState.seoTitle || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}
- SEO Description: ${currentState.seoDescription || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}
- H1: ${currentState.h1}

–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${currentState.description || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}

–ü—Ä–∏–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤:
${currentState.productTitles.slice(0, 10).join('\n')}

–û–±—â–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:
${currentState.commonCharacteristics.map(c => `- ${c.name} (${c.frequency} —Ç–æ–≤–∞—Ä–æ–≤)`).join('\n')}

–ë—Ä–µ–Ω–¥—ã: ${currentState.brands.join(', ')}

–ó–ê–î–ê–ß–ê:
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –≤—ã–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{
  "analysis": {
    "strengths": ["—Å–ø–∏—Å–æ–∫ —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω"],
    "weaknesses": ["—Å–ø–∏—Å–æ–∫ —Å–ª–∞–±—ã—Ö –º–µ—Å—Ç"],
    "opportunities": ["–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è"]
  },
  "recommendations": {
    "seo_title": "—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π SEO title",
    "seo_description": "—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ SEO description",
    "h1": "—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π H1",
    "description_structure": ["–∫–∞–∫–∏–µ —Ä–∞–∑–¥–µ–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –æ–ø–∏—Å–∞–Ω–∏–∏"],
    "keywords_focus": ["–Ω–∞ –∫–∞–∫–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Å—Ç–æ–∏—Ç —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è"]
  }
}`;
    
    // –ó–∞–ø—Ä–æ—Å –∫ OpenAI API
    const response = UrlFetchApp.fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': 'Bearer ' + apiKey,
        'Content-Type': 'application/json'
      },
      payload: JSON.stringify({
        model: 'gpt-4',
        messages: [
          {
            role: 'system',
            content: '–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ SEO –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–æ–≤. –î–∞–µ—à—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ, –ø—Ä–∏–º–µ–Ω–∏–º—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.7,
        response_format: { type: 'json_object' }
      }),
      muteHttpExceptions: true
    });
    
    if (response.getResponseCode() !== 200) {
      throw new Error(`OpenAI API –æ—à–∏–±–∫–∞: ${response.getResponseCode()}`);
    }
    
    const data = JSON.parse(response.getContentText());
    const analysisText = data.choices[0].message.content;
    const analysis = JSON.parse(analysisText);
    
    logInfo('‚úÖ AI-–∞–Ω–∞–ª–∏–∑ –ø–æ–ª—É—á–µ–Ω', null, context);
    
    return analysis;
    
  } catch (error) {
    logError('‚ùå –û—à–∏–±–∫–∞ OpenAI –∞–Ω–∞–ª–∏–∑–∞', error, context);
    throw error;
  }
}

/**
 * –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –ø–æ–º–æ—â—å—é AI
 */
function distributeKeywordsWithAI(categoryId, categoryTitle, keywords) {
  const context = `AI —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤–∏–∫–æ–≤ –¥–ª—è ${categoryTitle}`;
  
  try {
    logInfo('ü§ñ –ù–∞—á–∏–Ω–∞–µ–º AI-—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤', null, context);
    
    SpreadsheetApp.getActiveSpreadsheet().toast(
      'AI –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞...',
      '‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞',
      -1
    );
    
    const apiKey = getSetting('openaiApiKey');
    
    if (!apiKey) {
      throw new Error('OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    const keywordsText = keywords.slice(0, 50).map(kw => 
      `${kw.keyword} (—á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å: ${kw.frequency})`
    ).join('\n');
    
    const prompt = `–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞.

–ö–ê–¢–ï–ì–û–†–ò–Ø: ${categoryTitle}

–ö–õ–Æ–ß–ï–í–´–ï –°–õ–û–í–ê:
${keywordsText}

–≠–õ–ï–ú–ï–ù–¢–´ –°–¢–†–ê–ù–ò–¶–´:
1. SEO Title (–¥–æ 60 —Å–∏–º–≤–æ–ª–æ–≤) - —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ –∫–ª—é—á–µ–≤–∏–∫–∏
2. Meta Description (–¥–æ 160 —Å–∏–º–≤–æ–ª–æ–≤) - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–µ–º–∞–Ω—Ç–∏–∫–∞
3. H1 –∑–∞–≥–æ–ª–æ–≤–æ–∫ - –≥–ª–∞–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å
4. –û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - LSI –∫–ª—é—á–µ–≤–∏–∫–∏ –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è
5. –ü–ª–∏—Ç–∫–∞ —Ç–µ–≥–æ–≤ (—Ñ–∏–ª—å—Ç—Ä—ã) - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
6. –§–∏–ª—å—Ç—Ä–∞—Ç–æ—Ä (—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏) - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

–ó–ê–î–ê–ß–ê:
–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –ª–æ–≥–∏—á–Ω–æ –ø–æ —ç—Ç–∏–º —ç–ª–µ–º–µ–Ω—Ç–∞–º. –í—ã–¥–∞–π –æ—Ç–≤–µ—Ç –≤ JSON:
{
  "distribution": {
    "seo_title": ["–∫–ª—é—á–µ–≤–∏–∫ 1", "–∫–ª—é—á–µ–≤–∏–∫ 2"],
    "meta_description": ["–∫–ª—é—á–µ–≤–∏–∫ 1", "–∫–ª—é—á–µ–≤–∏–∫ 2", "–∫–ª—é—á–µ–≤–∏–∫ 3"],
    "h1": "–≥–ª–∞–≤–Ω—ã–π –∫–ª—é—á–µ–≤–∏–∫",
    "description": ["–∫–ª—é—á–µ–≤–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ 1", "–∫–ª—é—á–µ–≤–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ 2"],
    "tag_tiles": ["—Ç–µ–≥ 1", "—Ç–µ–≥ 2", "—Ç–µ–≥ 3"],
    "filters": ["–ø–∞—Ä–∞–º–µ—Ç—Ä 1", "–ø–∞—Ä–∞–º–µ—Ç—Ä 2"]
  },
  "reasoning": "–∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è"
}`;
    
    const response = UrlFetchApp.fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': 'Bearer ' + apiKey,
        'Content-Type': 'application/json'
      },
      payload: JSON.stringify({
        model: 'gpt-4',
        messages: [
          {
            role: 'system',
            content: '–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ SEO –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ —è–¥—Ä–∞. –ü–æ–Ω–∏–º–∞–µ—à—å —Å–ø–µ—Ü–∏—Ñ–∏–∫—É e-commerce.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.5,
        response_format: { type: 'json_object' }
      }),
      muteHttpExceptions: true
    });
    
    if (response.getResponseCode() !== 200) {
      throw new Error(`OpenAI API –æ—à–∏–±–∫–∞: ${response.getResponseCode()}`);
    }
    
    const data = JSON.parse(response.getContentText());
    const distributionText = data.choices[0].message.content;
    const distribution = JSON.parse(distributionText);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤ –ª–∏—Å—Ç–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    updateKeywordsWithDistribution(categoryId, distribution.distribution);
    
    SpreadsheetApp.getActiveSpreadsheet().toast(
      '–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º!',
      '‚úÖ –ì–æ—Ç–æ–≤–æ',
      5
    );
    
    logInfo('‚úÖ AI-—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ', null, context);
    
    return distribution;
    
  } catch (error) {
    logError('‚ùå –û—à–∏–±–∫–∞ AI-—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è', error, context);
    SpreadsheetApp.getActiveSpreadsheet().toast(
      '–û—à–∏–±–∫–∞: ' + error.message,
      '‚ùå –û—à–∏–±–∫–∞',
      10
    );
    throw error;
  }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –ª–∏—Å—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏
 */
function updateKeywordsWithDistribution(categoryId, distribution) {
  const context = "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤–∏–∫–æ–≤";
  
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(CATEGORY_SHEETS.KEYWORDS);
    
    if (!sheet) {
      throw new Error('–õ–∏—Å—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    const data = sheet.getDataRange().getValues();
    
    // –°–æ–∑–¥–∞–µ–º map –∫–ª—é—á–µ–≤–∏–∫ -> –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
    const assignmentMap = {};
    
    Object.entries(distribution).forEach(([element, keywords]) => {
      if (Array.isArray(keywords)) {
        keywords.forEach(kw => {
          assignmentMap[kw.toLowerCase()] = element;
        });
      } else if (typeof keywords === 'string') {
        assignmentMap[keywords.toLowerCase()] = element;
      }
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ª–∏—Å—Ç–µ
    for (let i = 1; i < data.length; i++) {
      const row = data[i];
      const rowCategoryId = row[0];
      const keyword = row[2];
      
      if (rowCategoryId == categoryId && keyword) {
        const assignment = assignmentMap[keyword.toLowerCase()];
        
        if (assignment) {
          // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É "–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ" (–∏–Ω–¥–µ–∫—Å 6)
          sheet.getRange(i + 1, 7).setValue(assignment);
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å (–∏–Ω–¥–µ–∫—Å 7)
          sheet.getRange(i + 1, 8).setValue('–ù–∞–∑–Ω–∞—á–µ–Ω–æ');
        }
      }
    }
    
    logInfo(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤`, null, context);
    
  } catch (error) {
    logError('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π', error, context);
    throw error;
  }
}

// ========================================
// –î–û–ë–ê–í–õ–ï–ù–ò–ï –§–£–ù–ö–¶–ò–ô –í –ú–ï–ù–Æ
// ========================================

/**
 * –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å AI —Ñ—É–Ω–∫—Ü–∏—è–º–∏
 */
function addExtendedCategoryMenu(mainMenu) {
  const categoryMenu = SpreadsheetApp.getUi().createMenu('üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏');
  
  categoryMenu
    .addItem('üèóÔ∏è –°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ª–∏—Å—Ç–æ–≤', 'createCategoryManagementStructure')
    .addSeparator()
    .addItem('üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –∏–µ—Ä–∞—Ä—Ö–∏–µ–π', 'loadCategoriesWithHierarchy')
    .addItem('üîç –ù–∞–π—Ç–∏ –∏ –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é', 'showCategorySearchDialog')
    .addSeparator()
    .addSubMenu(SpreadsheetApp.getUi().createMenu('üîë –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ —è–¥—Ä–æ')
      .addItem('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å API —Å–µ–º–∞–Ω—Ç–∏–∫–∏', 'configureSemanticsAPI')
      .addItem('üìä –°–æ–±—Ä–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞', 'collectKeywordsForActiveCategory')
      .addItem('ü§ñ –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–ª—é—á–µ–≤–∏–∫–∏ (AI)', 'distributeKeywordsForActiveCategory')
      .addItem('üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–ª—é—á–µ–≤–∏–∫–∏', 'showKeywordsSheet'))
    .addSeparator()
    .addSubMenu(SpreadsheetApp.getUi().createMenu('ü§ñ AI –ì–µ–Ω–µ—Ä–∞—Ü–∏—è')
      .addItem('üìù –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è', 'analyzeActiveCategory')
      .addItem('üéØ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å SEO —Ç–µ–≥–∏', 'generateSEOForActiveCategory')
      .addItem('üìÑ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', 'generateDescriptionForActiveCategory')
      .addItem('üè∑Ô∏è –°–æ–∑–¥–∞—Ç—å –ø–ª–∏—Ç–∫—É —Ç–µ–≥–æ–≤', 'generateTagTilesForActiveCategory'))
    .addSeparator()
    .addItem('üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π', 'updateCategoriesData')
    .addItem('üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É', 'showCategoriesStatistics');
  
  mainMenu.addSubMenu(categoryMenu);
  
  logInfo('‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–æ');
}

// ========================================
// –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –î–ê–ù–ù–´–ú–ò
// ========================================

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–∏—Å—Ç–∞
 */
function getActiveCategoryData() {
  try {
    const sheet = SpreadsheetApp.getActiveSheet();
    const sheetName = sheet.getName();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ—Ç–∞–ª—å–Ω—ã–π –ª–∏—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (!sheetName.startsWith(CATEGORY_SHEETS.DETAIL_PREFIX)) {
      return null;
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–∏—Å—Ç–∞
    const categoryId = sheet.getRange(DETAIL_SHEET_SECTIONS.CATEGORY_ID_CELL).getValue();
    const title = sheet.getRange(DETAIL_SHEET_SECTIONS.TITLE_CELL).getValue();
    const url = sheet.getRange(DETAIL_SHEET_SECTIONS.URL_CELL).getValue();
    const path = sheet.getRange(DETAIL_SHEET_SECTIONS.PARENT_PATH_CELL).getValue();
    
    return {
      id: categoryId,
      title: title,
      url: url,
      path: path
    };
    
  } catch (error) {
    logError('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', error);
    return null;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –∏–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–∏—Å—Ç–∞
 */
function getProductsFromDetailSheet() {
  try {
    const sheet = SpreadsheetApp.getActiveSheet();
    const data = sheet.getDataRange().getValues();
    
    const products = [];
    const startRow = DETAIL_SHEET_SECTIONS.CURRENT_PRODUCTS_START;
    
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Å–æ–±–∏—Ä–∞–µ–º —Ç–æ–≤–∞—Ä—ã
    for (let i = startRow; i < data.length; i++) {
      const row = data[i];
      
      // –ü—Ä–µ—Ä—ã–≤–∞–µ–º, –µ—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–ª–æ–∫–∞
      if (!row[1]) break; // –ü—Ä–æ–≤–µ—Ä—è–µ–º ID —Ç–æ–≤–∞—Ä–∞
      
      products.push({
        id: row[1],
        sku: row[2],
        title: row[3],
        in_stock: row[4] === '–î–∞',
        price: row[5],
        brand_title: row[6],
        characteristics_text: row[7]
      });
    }
    
    return products;
    
  } catch (error) {
    logError('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ª–∏—Å—Ç–∞', error);
    return [];
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
function getKeywordsForCategory(categoryId) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(CATEGORY_SHEETS.KEYWORDS);
    
    if (!sheet) {
      return [];
    }
    
    const data = sheet.getDataRange().getValues();
    const keywords = [];
    
    for (let i = 1; i < data.length; i++) {
      const row = data[i];
      
      if (row[0] == categoryId) {
        keywords.push({
          keyword: row[2],
          frequency: row[3],
          competition: row[4],
          type: row[5],
          assignment: row[6],
          status: row[7]
        });
      }
    }
    
    return keywords;
    
  } catch (error) {
    logError('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤', error);
    return [];
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –ª–∏—Å—Ç–∞
 */
function getAllCategoriesFromMainList() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(CATEGORY_SHEETS.MAIN_LIST);
    
    if (!sheet) {
      return [];
    }
    
    const data = sheet.getDataRange().getValues();
    const categories = [];
    
    for (let i = 1; i < data.length; i++) {
      const row = data[i];
      
      categories.push({
        id: row[MAIN_LIST_COLUMNS.CATEGORY_ID - 1],
        title: row[MAIN_LIST_COLUMNS.TITLE - 1].replace(/[\s‚îî‚îÄ]/g, '').trim(),
        url: row[MAIN_LIST_COLUMNS.URL - 1],
        path: row[MAIN_LIST_COLUMNS.HIERARCHY_PATH - 1],
        level: row[MAIN_LIST_COLUMNS.LEVEL - 1]
      });
    }
    
    return categories;
    
  } catch (error) {
    logError('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π', error);
    return [];
  }
}  

/**
 * AI-–∞–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
function analyzeActiveCategory() {
  const context = "AI –∞–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏";
  
  try {
    logInfo('üîç –ù–∞—á–∏–Ω–∞–µ–º AI-–∞–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', null, context);
    
    SpreadsheetApp.getActiveSpreadsheet().toast(
      '–°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...',
      'üîç –ê–Ω–∞–ª–∏–∑',
      3
    );
    
    // 1. –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ª–∏—Å—Ç
    const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
    const sheetName = sheet.getName();
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ—Ç–∞–ª—å–Ω—ã–π –ª–∏—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (!sheetName.startsWith(CATEGORY_SHEETS.DETAIL_PREFIX)) {
      throw new Error('–û—Ç–∫—Ä–æ–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –ª–∏—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
    }
    
    // 3. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ë–ï–ó–û–ü–ê–°–ù–û)
    const categoryTitle = String(sheet.getRange('B3').getValue() || '–ë–∏–Ω–æ–∫–ª–∏').trim();
    
    console.log('üìä –ö–∞—Ç–µ–≥–æ—Ä–∏—è:', categoryTitle);
    
    SpreadsheetApp.getActiveSpreadsheet().toast(
      '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ AI...',
      'ü§ñ OpenAI',
      -1
    );
    
    // 4. –ü–†–û–°–¢–û–ô –ø—Ä–æ–º–ø—Ç –±–µ–∑ –ª–∏—à–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    const simplePrompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π SEO –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryTitle} –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–µ. –î–∞–π 3 —Å–æ–≤–µ—Ç–∞.`;
    
    console.log('üìù –ü—Ä–æ–º–ø—Ç:', simplePrompt);
    
    // 5. –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
    const config = getOpenAIConfig();
    const url = 'https://api.openai.com/v1/chat/completions';
    
    // 6. –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    const payload = {
      model: 'gpt-4o-mini',
      messages: [
        { role: 'user', content: simplePrompt }
      ],
      max_tokens: 200
    };
    
    console.log('üì¶ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å...');
    
    // 7. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
    const response = UrlFetchApp.fetch(url, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${config.apiKey}`,
        'Content-Type': 'application/json'
      },
      payload: JSON.stringify(payload),
      muteHttpExceptions: true
    });
    
    const responseCode = response.getResponseCode();
    const responseText = response.getContentText();
    
    console.log('üì• HTTP –∫–æ–¥:', responseCode);
    
    if (responseCode !== 200) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', responseText);
      throw new Error(`OpenAI API –æ—à–∏–±–∫–∞ ${responseCode}: ${responseText}`);
    }
    
    const result = JSON.parse(responseText);
    const analysis = result.choices[0].message.content.trim();
    
    console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—É—á–µ–Ω:', analysis.substring(0, 100) + '...');
    
    logInfo('‚úÖ –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—É—á–µ–Ω –æ—Ç OpenAI', null, context);
    
    // 8. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const ui = SpreadsheetApp.getUi();
    
    const htmlContent = `
      <!DOCTYPE html>
      <html>
        <head>
          <base target="_top">
          <style>
            body { 
              font-family: Arial, sans-serif; 
              padding: 20px;
              line-height: 1.6;
            }
            h3 { 
              color: #1976d2; 
              margin-top: 0;
            }
            .info {
              background: #f5f5f5;
              padding: 15px;
              border-radius: 4px;
              margin-bottom: 20px;
            }
            .analysis {
              background: white;
              padding: 15px;
              border-left: 4px solid #4caf50;
              white-space: pre-wrap;
              line-height: 1.8;
            }
            button {
              background: #1976d2;
              color: white;
              border: none;
              padding: 10px 20px;
              border-radius: 4px;
              cursor: pointer;
              margin-top: 20px;
            }
            button:hover {
              background: #1565c0;
            }
          </style>
        </head>
        <body>
          <h3>ü§ñ AI-–∞–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</h3>
          
          <div class="info">
            <strong>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</strong> ${categoryTitle}
          </div>
          
          <div class="analysis">${analysis}</div>
          
          <button onclick="google.script.host.close()">–ó–∞–∫—Ä—ã—Ç—å</button>
        </body>
      </html>
    `;
    
    const htmlOutput = HtmlService.createHtmlOutput(htmlContent)
      .setWidth(600)
      .setHeight(500);
    
    ui.showModalDialog(htmlOutput, 'AI-–∞–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
    
    SpreadsheetApp.getActiveSpreadsheet().toast(
      '‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω',
      '–ì–æ—Ç–æ–≤–æ',
      5
    );
    
    return {
      success: true,
      analysis: analysis
    };
    
  } catch (error) {
    console.error('‚ùå –û–®–ò–ë–ö–ê:', error.message);
    
    logError('‚ùå –û—à–∏–±–∫–∞ AI-–∞–Ω–∞–ª–∏–∑–∞', error, context);
    
    SpreadsheetApp.getActiveSpreadsheet().toast(
      `–û—à–∏–±–∫–∞: ${error.message}`,
      '‚ùå –û—à–∏–±–∫–∞',
      10
    );
    
    throw error;
  }
}

function testAnalysisMinimal() {
  try {
    console.log('üß™ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞');
    
    const config = getOpenAIConfig();
    const url = 'https://api.openai.com/v1/chat/completions';
    
    // –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ü–†–û–°–¢–û–ô –ø—Ä–æ–º–ø—Ç
    const simplePrompt = '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π SEO –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ë–∏–Ω–æ–∫–ª–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–µ. –î–∞–π 3 —Å–æ–≤–µ—Ç–∞.';
    
    const payload = {
      model: 'gpt-4o-mini',
      messages: [
        { role: 'user', content: simplePrompt }
      ],
      max_tokens: 200
    };
    
    console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º:', JSON.stringify(payload, null, 2));
    
    const response = UrlFetchApp.fetch(url, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${config.apiKey}`,
        'Content-Type': 'application/json'
      },
      payload: JSON.stringify(payload),
      muteHttpExceptions: true
    });
    
    const code = response.getResponseCode();
    const text = response.getContentText();
    
    console.log('HTTP –∫–æ–¥:', code);
    console.log('–û—Ç–≤–µ—Ç:', text);
    
    if (code === 200) {
      const result = JSON.parse(text);
      console.log('‚úÖ –†–ê–ë–û–¢–ê–ï–¢! –û—Ç–≤–µ—Ç:', result.choices[0].message.content);
      SpreadsheetApp.getActiveSpreadsheet().toast('‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç!', '–£—Å–ø–µ—Ö', 5);
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞:', text);
      SpreadsheetApp.getActiveSpreadsheet().toast(`–û—à–∏–±–∫–∞ ${code}`, '–û—à–∏–±–∫–∞', 10);
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message, error.stack);
  }
}

/**
 * –£–ü–†–û–©–ï–ù–ù–ê–Ø –¢–ï–°–¢–û–í–ê–Ø –í–ï–†–°–ò–Ø
 * –¢–æ—á–Ω–∞—è –∫–æ–ø–∏—è testAnalysisMinimal, –Ω–æ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
function testSimpleAnalysisForCategory() {
  try {
    console.log('üß™ –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
    
    // 1. –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ª–∏—Å—Ç
    const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
    const sheetName = sheet.getName();
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ—Ç–∞–ª—å–Ω—ã–π –ª–∏—Å—Ç
    if (!sheetName.startsWith('–ö–∞—Ç–µ–≥–æ—Ä–∏—è ‚Äî ')) {
      SpreadsheetApp.getUi().alert('–û—Ç–∫—Ä–æ–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –ª–∏—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
      return;
    }
    
    // 3. –ß–∏—Ç–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    let categoryTitle = '–ö–∞—Ç–µ–≥–æ—Ä–∏—è';
    try {
      const titleValue = sheet.getRange('B3').getValue();
      if (titleValue) {
        categoryTitle = String(titleValue).trim();
      }
    } catch (e) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç');
    }
    
    console.log('üìä –ö–∞—Ç–µ–≥–æ—Ä–∏—è:', categoryTitle);
    
    // 4. –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
    const config = getOpenAIConfig();
    const url = 'https://api.openai.com/v1/chat/completions';
    
    // 5. –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ü–†–û–°–¢–û–ô –ø—Ä–æ–º–ø—Ç (–∫–∞–∫ –≤ —Ç–µ—Å—Ç–µ)
    const simplePrompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π SEO –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${categoryTitle}" –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–µ. –î–∞–π 3 —Å–æ–≤–µ—Ç–∞.`;
    
    // 6. –¢–æ—á–Ω–æ —Ç–∞–∫–æ–π –∂–µ payload –∫–∞–∫ –≤ —Ç–µ—Å—Ç–µ
    const payload = {
      model: 'gpt-4o-mini',
      messages: [
        { role: 'user', content: simplePrompt }
      ],
      max_tokens: 200
    };
    
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º:', JSON.stringify(payload, null, 2));
    
    // 7. –û—Ç–ø—Ä–∞–≤–∫–∞ (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ —Ç–µ—Å—Ç–µ)
    const response = UrlFetchApp.fetch(url, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${config.apiKey}`,
        'Content-Type': 'application/json'
      },
      payload: JSON.stringify(payload),
      muteHttpExceptions: true
    });
    
    const code = response.getResponseCode();
    const text = response.getContentText();
    
    console.log('üì• HTTP –∫–æ–¥:', code);
    console.log('üì• –û—Ç–≤–µ—Ç:', text.substring(0, 200));
    
    if (code === 200) {
      const result = JSON.parse(text);
      const analysis = result.choices[0].message.content;
      
      console.log('‚úÖ –†–ê–ë–û–¢–ê–ï–¢! –ê–Ω–∞–ª–∏–∑:', analysis);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      const ui = SpreadsheetApp.getUi();
      ui.alert('‚úÖ –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—É—á–µ–Ω', analysis, ui.ButtonSet.OK);
      
      SpreadsheetApp.getActiveSpreadsheet().toast('‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç!', '–£—Å–ø–µ—Ö', 5);
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞:', code, text);
      SpreadsheetApp.getActiveSpreadsheet().toast(`–û—à–∏–±–∫–∞ ${code}`, '–û—à–∏–±–∫–∞', 10);
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message, error.stack);
    SpreadsheetApp.getUi().alert('–û—à–∏–±–∫–∞: ' + error.message);
  }
}