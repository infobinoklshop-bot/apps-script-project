// ========================================
// AI –ì–ï–ù–ï–†–ê–¶–ò–Ø –ö–û–ù–¢–ï–ù–¢–ê
// ========================================

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç SEO —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ AI
 */
function generateSEOWithAI(categoryData, keywords) {
  const context = "AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è SEO";
  
  try {
    logInfo('ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SEO —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ AI', null, context);
    
    const apiKey = getSetting('openaiApiKey');
    
    if (!apiKey) {
      throw new Error('OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }
    
    const keywordsText = keywords.map(kw => kw.keyword).join(', ');
    
    const prompt = `–°–æ–∑–¥–∞–π SEO-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞.

–ö–ê–¢–ï–ì–û–†–ò–Ø: ${categoryData.title}
URL: ${categoryData.url}
–ò–ï–†–ê–†–•–ò–Ø: ${categoryData.path || '–ö–æ—Ä–Ω–µ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è'}

–ö–õ–Æ–ß–ï–í–´–ï –°–õ–û–í–ê:
${keywordsText}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
1. SEO Title: –¥–æ 60 —Å–∏–º–≤–æ–ª–æ–≤, –≤–∫–ª—é—á–∏—Ç—å –≥–ª–∞–≤–Ω—ã–π –∫–ª—é—á–µ–≤–∏–∫ –∏ –±—Ä–µ–Ω–¥ "Binokl.shop"
2. Meta Description: –¥–æ 160 —Å–∏–º–≤–æ–ª–æ–≤, –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é, USP
3. H1: –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≥–ª–∞–≤–Ω—ã–º –∫–ª—é—á–µ–≤–∏–∫–æ–º

–í–µ—Ä–Ω–∏ JSON:
{
  "seo_title": "—Ç–µ–∫—Å—Ç",
  "meta_description": "—Ç–µ–∫—Å—Ç",
  "h1": "—Ç–µ–∫—Å—Ç",
  "keywords": "—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é —Ç–æ–ø-10 –∫–ª—é—á–µ–≤–∏–∫–æ–≤"
}`;
    
    const response = UrlFetchApp.fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': 'Bearer ' + apiKey,
        'Content-Type': 'application/json'
      },
      payload: JSON.stringify({
        model: 'gpt-4',
        messages: [
          {
            role: 'system',
            content: '–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ SEO –¥–ª—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–æ–≤. –°–æ–∑–¥–∞–µ—à—å —Ü–µ–ø–ª—è—é—â–∏–µ –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.7,
        response_format: { type: 'json_object' }
      }),
      muteHttpExceptions: true
    });
    
    if (response.getResponseCode() !== 200) {
      throw new Error(`OpenAI API –æ—à–∏–±–∫–∞: ${response.getResponseCode()}`);
    }
    
    const data = JSON.parse(response.getContentText());
    const seoText = data.choices[0].message.content;
    const seoData = JSON.parse(seoText);
    
    logInfo('‚úÖ SEO —Ç–µ–≥–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã', null, context);
    
    return seoData;
    
  } catch (error) {
    logError('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SEO', error, context);
    throw error;
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ AI
 */
function generateCategoryDescriptionWithAI_OLD(categoryData, products, keywords) {
  const context = "AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è";
  
  try {
    logInfo('ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ AI', null, context);
    
    const apiKey = getSetting('openaiApiKey');
    
    if (!apiKey) {
      throw new Error('OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
    const productsInfo = products.slice(0, 10).map(p => p.title).join('\n');
    const keywordsForDescription = keywords
      .filter(kw => kw.assignment === 'description')
      .map(kw => kw.keyword)
      .join(', ');
    
    const prompt = `–ù–∞–ø–∏—à–∏ SEO-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ –æ–ø—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–±–æ—Ä–æ–≤.

–ö–ê–¢–ï–ì–û–†–ò–Ø: ${categoryData.title}
–ü–£–¢–¨: ${categoryData.path || '–ö–æ—Ä–Ω–µ–≤–∞—è'}

–¢–û–í–ê–†–´ –í –ö–ê–¢–ï–ì–û–†–ò–ò (–ø—Ä–∏–º–µ—Ä—ã):
${productsInfo}

–ö–õ–Æ–ß–ï–í–´–ï –°–õ–û–í–ê –î–õ–Ø –¢–ï–ö–°–¢–ê:
${keywordsForDescription}

–°–¢–†–£–ö–¢–£–†–ê –û–ü–ò–°–ê–ù–ò–Ø:
1. –í–≤–æ–¥–Ω—ã–π –∞–±–∑–∞—Ü (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) - —á—Ç–æ —ç—Ç–æ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –¥–ª—è –∫–æ–≥–æ
2. –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø–æ–∫—É–ø–∫–∏ –≤ Binokl.shop (3-4 –ø—É–Ω–∫—Ç–∞)
3. –ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã)
4. –ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
- –ñ–∏–≤–æ–π, –ø—Ä–æ–¥–∞—é—â–∏–π —è–∑—ã–∫
- –ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
- –û–±—ä–µ–º: 300-500 —Å–ª–æ–≤
- HTML —Ä–∞–∑–º–µ—Ç–∫–∞: <h2>, <p>, <ul>, <li>

–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ HTML –∫–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.`;
    
    const response = UrlFetchApp.fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': 'Bearer ' + apiKey,
        'Content-Type': 'application/json'
      },
      payload: JSON.stringify({
        model: 'gpt-4',
        messages: [
          {
            role: 'system',
            content: '–¢—ã - –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä –¥–ª—è e-commerce. –ü–∏—à–µ—à—å –ø—Ä–æ–¥–∞—é—â–∏–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∏ SEO-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.8
      }),
      muteHttpExceptions: true
    });
    
    if (response.getResponseCode() !== 200) {
      throw new Error(`OpenAI API –æ—à–∏–±–∫–∞: ${response.getResponseCode()}`);
    }
    
    const data = JSON.parse(response.getContentText());
    const description = data.choices[0].message.content;
    
    logInfo('‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ', null, context);
    
    return description;
    
  } catch (error) {
    logError('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è', error, context);
    throw error;
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–ª–∏—Ç–∫—É —Ç–µ–≥–æ–≤ —Å AI —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å—é
 */
function generateTagTilesWithAI(categoryData, keywords, allCategories) {
  const context = "AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∏—Ç–∫–∏ —Ç–µ–≥–æ–≤";
  
  try {
    logInfo('ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∏—Ç–∫—É —Ç–µ–≥–æ–≤ —á–µ—Ä–µ–∑ AI', null, context);
    
    const apiKey = getSetting('openaiApiKey');
    
    if (!apiKey) {
      throw new Error('OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è AI
    const categoriesText = allCategories
      .filter(cat => cat.id !== categoryData.id) // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â—É—é
      .slice(0, 50) // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤
      .map(cat => `ID: ${cat.id}, –ù–∞–∑–≤–∞–Ω–∏–µ: ${cat.title}, URL: ${cat.url}`)
      .join('\n');
    
    const keywordsText = keywords.map(kw => kw.keyword).join(', ');
    
    const prompt = `–°–æ–∑–¥–∞–π –ø–ª–∏—Ç–∫—É —Ç–µ–≥–æ–≤ (—Ç–µ–≥–æ–≤—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é) –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞.

–¢–ï–ö–£–©–ê–Ø –ö–ê–¢–ï–ì–û–†–ò–Ø: ${categoryData.title}
–ü–£–¢–¨: ${categoryData.path || '–ö–æ—Ä–Ω–µ–≤–∞—è'}

–ö–õ–Æ–ß–ï–í–´–ï –°–õ–û–í–ê –î–õ–Ø –¢–ï–ì–û–í:
${keywordsText}

–î–û–°–¢–£–ü–ù–´–ï –ö–ê–¢–ï–ì–û–†–ò–ò –î–õ–Ø –°–°–´–õ–û–ö:
${categoriesText}

–ó–ê–î–ê–ß–ê:
1. –°–æ–∑–¥–∞–π 8-12 —Ç–µ–≥–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
2. –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ–≥–∞ –ø–æ–¥–±–µ—Ä–∏ –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Å—Å—ã–ª–∫–∏
3. –û—Ü–µ–Ω–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å —Å–≤—è–∑–∏ –æ—Ç 0 –¥–æ 1

–í–µ—Ä–Ω–∏ JSON –º–∞—Å—Å–∏–≤:
[
  {
    "anchor": "—Ç–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏/—Ç–µ–≥–∞",
    "target_category_id": ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ null,
    "target_url": "URL –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" –∏–ª–∏ null –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤,
    "relevance": 0.95,
    "type": "category_link" –∏–ª–∏ "filter"
  }
]

–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —Å–Ω–∞—á–∞–ª–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ø–æ—Ç–æ–º —Ç–µ–≥–∏-—Ñ–∏–ª—å—Ç—Ä—ã.`;
    
    const response = UrlFetchApp.fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': 'Bearer ' + apiKey,
        'Content-Type': 'application/json'
      },
      payload: JSON.stringify({
        model: 'gpt-4',
        messages: [
          {
            role: 'system',
            content: '–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ø–µ—Ä–µ–ª–∏–Ω–∫–æ–≤–∫–µ —Å–∞–π—Ç–æ–≤. –ü–æ–Ω–∏–º–∞–µ—à—å —Å–µ–º–∞–Ω—Ç–∏–∫—É –∏ —Å–≤—è–∑–∏ –º–µ–∂–¥—É –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.6,
        response_format: { type: 'json_object' }
      }),
      muteHttpExceptions: true
    });
    
    if (response.getResponseCode() !== 200) {
      throw new Error(`OpenAI API –æ—à–∏–±–∫–∞: ${response.getResponseCode()}`);
    }
    
    const data = JSON.parse(response.getContentText());
    const tagsText = data.choices[0].message.content;
    const tagsData = JSON.parse(tagsText);
    
    // AI –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç, –Ω–∞–º –Ω—É–∂–µ–Ω –º–∞—Å—Å–∏–≤
    const tags = tagsData.tags || tagsData.tag_tiles || tagsData;
    
    logInfo(`‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${Array.isArray(tags) ? tags.length : 0} —Ç–µ–≥–æ–≤`, null, context);
    
    return Array.isArray(tags) ? tags : [];
    
  } catch (error) {
    logError('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∏—Ç–∫–∏ —Ç–µ–≥–æ–≤', error, context);
    throw error;
  }
}

// ========================================
// –§–£–ù–ö–¶–ò–ò –ó–ê–ü–ò–°–ò –î–ê–ù–ù–´–• –í –î–ï–¢–ê–õ–¨–ù–´–ô –õ–ò–°–¢
// ========================================

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç SEO –¥–∞–Ω–Ω—ã–µ –≤ –¥–µ—Ç–∞–ª—å–Ω–æ–º –ª–∏—Å—Ç–µ
 */
function updateSEOInDetailSheet(seoData) {
  try {
    const sheet = SpreadsheetApp.getActiveSheet();
    
    sheet.getRange(DETAIL_SHEET_SECTIONS.SEO_TITLE_CELL).setValue(seoData.seo_title);
    sheet.getRange(DETAIL_SHEET_SECTIONS.SEO_DESCRIPTION_CELL).setValue(seoData.meta_description);
    sheet.getRange(DETAIL_SHEET_SECTIONS.SEO_H1_CELL).setValue(seoData.h1);
    sheet.getRange(DETAIL_SHEET_SECTIONS.SEO_KEYWORDS_CELL).setValue(seoData.keywords);
    
    // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —è—á–µ–π–∫–∏
    sheet.getRange('B13:B16').setBackground('#e8f5e9');
    
    logInfo('‚úÖ SEO –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –¥–µ—Ç–∞–ª—å–Ω—ã–π –ª–∏—Å—Ç');
    
  } catch (error) {
    logError('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ SEO –¥–∞–Ω–Ω—ã—Ö', error);
    throw error;
  }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –¥–µ—Ç–∞–ª—å–Ω–æ–º –ª–∏—Å—Ç–µ
 */
function updateDescriptionInDetailSheet(description) {
  try {
    const sheet = SpreadsheetApp.getActiveSheet();
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —è—á–µ–π–∫—É –æ–ø–∏—Å–∞–Ω–∏—è (B17)
    sheet.getRange('B17').setValue(description);
    sheet.getRange('B17').setWrap(true);
    sheet.getRange('B17').setBackground('#fff3e0');
    
    logInfo('‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –¥–µ—Ç–∞–ª—å–Ω—ã–π –ª–∏—Å—Ç');
    
  } catch (error) {
    logError('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –æ–ø–∏—Å–∞–Ω–∏—è', error);
    throw error;
  }
}

/**
 * –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–ª–∏—Ç–∫—É —Ç–µ–≥–æ–≤ –≤ –¥–µ—Ç–∞–ª—å–Ω—ã–π –ª–∏—Å—Ç
 */
function writeTagTilesToDetailSheet(tagTiles) {
  try {
    const sheet = SpreadsheetApp.getActiveSheet();
    const startRow = DETAIL_SHEET_SECTIONS.TAG_TILES_START;
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –±–ª–æ–∫–∞
    sheet.getRange(startRow, 1).setValue('üè∑Ô∏è –ü–õ–ò–¢–ö–ê –¢–ï–ì–û–í').setFontWeight('bold').setFontSize(14).setBackground('#e1bee7').setFontColor('#000000');
    sheet.getRange(startRow, 1, 1, 6).merge();
    
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    const headers = ['–ê–Ω–∫–æ—Ä', 'URL —Å—Å—ã–ª–∫–∏', '–¢–∏–ø', '–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å', 'ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', '–°—Ç–∞—Ç—É—Å'];
    sheet.getRange(startRow + 1, 1, 1, headers.length).setValues([headers]);
    sheet.getRange(startRow + 1, 1, 1, headers.length)
         .setFontWeight('bold')
         .setBackground('#f3e5f5')
         .setHorizontalAlignment('center');
    
    // –î–∞–Ω–Ω—ã–µ —Ç–µ–≥–æ–≤
    if (tagTiles.length > 0) {
      const tagRows = tagTiles.map(tag => [
        tag.anchor,
        tag.target_url || '–§–∏–ª—å—Ç—Ä',
        tag.type === 'category_link' ? '–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é' : '–¢–µ–≥-—Ñ–∏–ª—å—Ç—Ä',
        tag.relevance || 0,
        tag.target_category_id || '',
        '–ù–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ'
      ]);
      
      sheet.getRange(startRow + 2, 1, tagRows.length, tagRows[0].length).setValues(tagRows);
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
      sheet.getRange(startRow + 2, 4, tagRows.length, 1).setNumberFormat('0.00');
      
      // –£—Å–ª–æ–≤–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
      for (let i = 0; i < tagRows.length; i++) {
        const relevance = tagRows[i][3];
        const row = startRow + 2 + i;
        
        let bgColor = '#ffebee'; // –ö—Ä–∞—Å–Ω–æ–≤–∞—Ç—ã–π –¥–ª—è –Ω–∏–∑–∫–æ–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        if (relevance >= 0.8) bgColor = '#e8f5e9'; // –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –≤—ã—Å–æ–∫–æ–π
        else if (relevance >= 0.5) bgColor = '#fff9c4'; // –ñ–µ–ª—Ç—ã–π –¥–ª—è —Å—Ä–µ–¥–Ω–µ–π
        
        sheet.getRange(row, 1, 1, 6).setBackground(bgColor);
      }
    }
    
    logInfo(`‚úÖ –ü–ª–∏—Ç–∫–∞ —Ç–µ–≥–æ–≤ –∑–∞–ø–∏—Å–∞–Ω–∞: ${tagTiles.length} —Ç–µ–≥–æ–≤`);
    
  } catch (error) {
    logError('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ø–ª–∏—Ç–∫–∏ —Ç–µ–≥–æ–≤', error);
    throw error;
  }
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã AI-–∞–Ω–∞–ª–∏–∑–∞
 */
function showAnalysisResults(analysis) {
  try {
    const strengths = analysis.analysis.strengths.map((s, i) => `${i + 1}. ${s}`).join('\n');
    const weaknesses = analysis.analysis.weaknesses.map((w, i) => `${i + 1}. ${w}`).join('\n');
    const opportunities = analysis.analysis.opportunities.map((o, i) => `${i + 1}. ${o}`).join('\n');
    
    const message = `üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ AI-–ê–ù–ê–õ–ò–ó–ê –ö–ê–¢–ï–ì–û–†–ò–ò\n\n` +
                   `‚úÖ –°–ò–õ–¨–ù–´–ï –°–¢–û–†–û–ù–´:\n${strengths}\n\n` +
                   `‚ö†Ô∏è –°–õ–ê–ë–´–ï –ú–ï–°–¢–ê:\n${weaknesses}\n\n` +
                   `üí° –í–û–ó–ú–û–ñ–ù–û–°–¢–ò –î–õ–Ø –£–õ–£–ß–®–ï–ù–ò–Ø:\n${opportunities}\n\n` +
                   `\nüìù –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n` +
                   `‚Ä¢ SEO Title: ${analysis.recommendations.seo_title}\n` +
                   `‚Ä¢ H1: ${analysis.recommendations.h1}\n\n` +
                   `–ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –ª–∏—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.`;
    
    SpreadsheetApp.getUi().alert('AI-–ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', message, SpreadsheetApp.getUi().ButtonSet.OK);
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –ª–∏—Å—Ç
    writeAnalysisToSheet(analysis);
    
  } catch (error) {
    logError('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞', error);
  }
}

/**
 * –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤ –ª–∏—Å—Ç
 */
function writeAnalysisToSheet(analysis) {
  try {
    const sheet = SpreadsheetApp.getActiveSheet();
    const startRow = DETAIL_SHEET_SECTIONS.AI_GENERATION_START;
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –±–ª–æ–∫–∞
    sheet.getRange(startRow, 1).setValue('ü§ñ AI-–ê–ù–ê–õ–ò–ó –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò')
         .setFontWeight('bold')
         .setFontSize(14)
         .setBackground('#4285f4')
         .setFontColor('#ffffff');
    sheet.getRange(startRow, 1, 1, 6).merge();
    
    // –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
    sheet.getRange(startRow + 2, 1).setValue('‚úÖ –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:').setFontWeight('bold');
    sheet.getRange(startRow + 3, 1, 1, 6).merge()
         .setValue(analysis.analysis.strengths.join('\n‚Ä¢ '))
         .setWrap(true)
         .setBackground('#e8f5e9');
    
    // –°–ª–∞–±—ã–µ –º–µ—Å—Ç–∞
    sheet.getRange(startRow + 5, 1).setValue('‚ö†Ô∏è –°–ª–∞–±—ã–µ –º–µ—Å—Ç–∞:').setFontWeight('bold');
    sheet.getRange(startRow + 6, 1, 1, 6).merge()
         .setValue(analysis.analysis.weaknesses.join('\n‚Ä¢ '))
         .setWrap(true)
         .setBackground('#ffebee');
    
    // –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
    sheet.getRange(startRow + 8, 1).setValue('üí° –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:').setFontWeight('bold');
    sheet.getRange(startRow + 9, 1, 1, 6).merge()
         .setValue(analysis.analysis.opportunities.join('\n‚Ä¢ '))
         .setWrap(true)
         .setBackground('#fff9c4');
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    sheet.getRange(startRow + 11, 1).setValue('üìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:').setFontWeight('bold');
    
    const recommendations = [
      ['SEO Title:', analysis.recommendations.seo_title],
      ['SEO Description:', analysis.recommendations.seo_description],
      ['H1:', analysis.recommendations.h1],
      ['–§–æ–∫—É—Å –∫–ª—é—á–µ–≤–∏–∫–æ–≤:', analysis.recommendations.keywords_focus.join(', ')]
    ];
    
    sheet.getRange(startRow + 12, 1, recommendations.length, 2).setValues(recommendations);
    sheet.getRange(startRow + 12, 1, recommendations.length, 1).setFontWeight('bold').setBackground('#f1f3f4');
    sheet.getRange(startRow + 12, 2, recommendations.length, 1).setWrap(true);
    
    logInfo('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –ª–∏—Å—Ç');
    
  } catch (error) {
    logError('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∞–Ω–∞–ª–∏–∑–∞', error);
    throw error;
  }
}