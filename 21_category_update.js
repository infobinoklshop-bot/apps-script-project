/**
 * ========================================
 * –û–¢–ü–†–ê–í–ö–ê –í–°–ï–• –ò–ó–ú–ï–ù–ï–ù–ò–ô –ö–ê–¢–ï–ì–û–†–ò–ò –í INSALES
 * ========================================
 */

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –í–°–ï –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ InSales (–ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø)
 */
function sendCategoryChangesToInSales() {
  try {
    const sheet = SpreadsheetApp.getActiveSheet();
    const sheetName = sheet.getName();
    
    if (!sheetName.startsWith('–ö–∞—Ç–µ–≥–æ—Ä–∏—è ‚Äî ')) {
      SpreadsheetApp.getUi().alert(
        '–û—à–∏–±–∫–∞',
        '–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–º –ª–∏—Å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
        SpreadsheetApp.getUi().ButtonSet.OK
      );
      return;
    }
    
    console.log('[INFO] –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ InSales');
    
    SpreadsheetApp.getActiveSpreadsheet().toast(
      '–ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...',
      '‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞',
      -1
    );
    
    // –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–∏—Å—Ç–∞
    const categoryId = sheet.getRange('B2').getValue();
    
    if (!categoryId) {
      throw new Error('ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —è—á–µ–π–∫–µ B2');
    }
    
    console.log('[INFO] –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', categoryId);

    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –Ω–∞—á–∞–ª–∞ –¥–æ–ø.–ø–æ–ª–µ–π –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
    const productsValue = sheet.getRange('B21').getValue();
    const products = parseInt(productsValue) || 0; // –í–ê–ñ–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —á–∏—Å–ª–æ!
    const productsStartRow = calculateSheetSections(sheet).productsStart;
    const extraFieldsStartRow = productsStartRow + products + 5; // –°—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ —Ç–æ–≤–∞—Ä–æ–≤

    console.log(`[DEBUG] products: ${products} (type: ${typeof products}), productsStartRow: ${productsStartRow} (type: ${typeof productsStartRow})`);
    
    // –ß–∏—Ç–∞–µ–º –í–ï–†–•–ù–ò–ï –∏ –ù–ò–ñ–ù–ò–ï —Ç–µ–≥–∏
    // –ü–†–ò–û–†–ò–¢–ï–¢: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∏–∑ —Ç–∞–±–ª–∏—Ü—ã, –ø–æ—Ç–æ–º –∏–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    let topTags = getTopTagsFromTable(sheet, products);
    if (topTags.length === 0) {
      console.log('‚ö†Ô∏è –í–µ—Ä—Ö–Ω—è—è —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞, —á–∏—Ç–∞–µ–º –∏–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π...');
      topTags = getTopTagsFromSheet(sheet, products);
    }

    let bottomTags = getBottomTagsFromTable(sheet, products);
    if (bottomTags.length === 0) {
      console.log('‚ö†Ô∏è –ù–∏–∂–Ω—è—è —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞, —á–∏—Ç–∞–µ–º –∏–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π...');
      bottomTags = getBottomTagsFromSheet(sheet, products);
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    let description = getDescriptionForInSales(sheet);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–æ–ø–∏—Å–∞–Ω–∏–µ –∏–¥—ë—Ç –ë–ï–ó —Ç–µ–≥–æ–≤, —Ç–µ–≥–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ–ª—è—Ö)
    let finalDescription = description;
    
    // –°–æ–±–∏—Ä–∞–µ–º field_values –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    const fieldValues = [];
    
    // H1 –∑–∞–≥–æ–ª–æ–≤–æ–∫ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å ID —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ field_value
    const h1Value = sheet.getRange('B15').getValue();
    if (h1Value && h1Value.toString().trim() !== '') {
      const h1FieldValueId = findFieldValueId(categoryId, 'H1');
      if (h1FieldValueId) {
        fieldValues.push({ 
          id: h1FieldValueId,
          value: h1Value.toString().trim() 
        });
      }
    }
    
    // –ë–ª–æ–∫ —Å—Å—ã–ª–æ–∫ —Å–≤–µ—Ä—Ö—É (–≤–µ—Ä—Ö–Ω—è—è –ø–ª–∏—Ç–∫–∞)
    if (topTags.length > 0) {
      const topTagsHTML = generateTagsBlockHTML(topTags);
      const topTagsFieldValueId = findFieldValueId(categoryId, '–ë–ª–æ–∫ —Å—Å—ã–ª–æ–∫ —Å–≤–µ—Ä—Ö—É');
      if (topTagsFieldValueId) {
        fieldValues.push({ 
          id: topTagsFieldValueId,
          value: topTagsHTML 
        });
        console.log('[INFO] üè∑Ô∏è –í–µ—Ä—Ö–Ω–∏—Ö —Ç–µ–≥–æ–≤:', topTags.length);
      }
    }

    // –ë–ª–æ–∫ —Å—Å—ã–ª–æ–∫ (–Ω–∏–∂–Ω—è—è –ø–ª–∏—Ç–∫–∞)
    if (bottomTags.length > 0) {
      const bottomTagsHTML = generateTagsBlockHTML(bottomTags);
      const bottomTagsFieldValueId = findFieldValueId(categoryId, '–ë–ª–æ–∫ —Å—Å—ã–ª–æ–∫');
      
      if (bottomTagsFieldValueId) {
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ —á–µ—Ä–µ–∑ id
        fieldValues.push({ 
          id: bottomTagsFieldValueId,
          value: bottomTagsHTML 
        });
        console.log('[INFO] üè∑Ô∏è –ù–∏–∂–Ω–∏—Ö —Ç–µ–≥–æ–≤:', bottomTags.length);
      } else {
        // –ï—Å–ª–∏ –ø–æ–ª–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ
        const bottomTagsFieldId = getFieldIdByName('–ë–ª–æ–∫ —Å—Å—ã–ª–æ–∫');
        if (bottomTagsFieldId) {
          fieldValues.push({ 
            collection_field_id: bottomTagsFieldId,
            value: bottomTagsHTML 
          });
          console.log('[INFO] üè∑Ô∏è –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ –ø–æ–ª–µ "–ë–ª–æ–∫ —Å—Å—ã–ª–æ–∫" —Å —Ç–µ–≥–∞–º–∏:', bottomTags.length);
        }
      }
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - –î–ò–ù–ê–ú–ò–ß–ï–°–ö–û–ï –ß–¢–ï–ù–ò–ï
    console.log('[INFO] –ß–∏—Ç–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ –ª–∏—Å—Ç–∞...');

    const collectionFields = loadCollectionFieldsDictionary();
    const startRow = extraFieldsStartRow + 2;

    // –ß–∏—Ç–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ —Å–µ–∫—Ü–∏–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    for (let i = 0; i < 50; i++) {
      const fieldNameCell = sheet.getRange(startRow + i, 1).getValue();
      const fieldValueCell = sheet.getRange(startRow + i, 2).getValue();
      
      // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø–æ–ª—è –ø—É—Å—Ç–∞—è - –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º —á—Ç–µ–Ω–∏–µ
      if (!fieldNameCell || fieldNameCell.toString().trim() === '') {
        break;
      }
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è (—É–±–∏—Ä–∞–µ–º ":" –≤ –∫–æ–Ω—Ü–µ)
      const fieldName = fieldNameCell.toString().replace(':', '').trim();
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ "(–ø—É—Å—Ç–æ)"
      if (!fieldValueCell || 
          fieldValueCell.toString().trim() === '' || 
          fieldValueCell.toString().trim() === '(–ø—É—Å—Ç–æ)') {
        console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç–æ–µ –ø–æ–ª–µ: ${fieldName}`);
        continue;
      }
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—è –ø–ª–∏—Ç–æ–∫ —Ç–µ–≥–æ–≤ - –æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
      if (fieldName === '–ë–ª–æ–∫ —Å—Å—ã–ª–æ–∫ —Å–≤–µ—Ä—Ö—É' || fieldName === '–ë–ª–æ–∫ —Å—Å—ã–ª–æ–∫') {
        console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª–µ –ø–ª–∏—Ç–∫–∏ —Ç–µ–≥–æ–≤: ${fieldName} (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)`);
        continue;
      }

      // –ù–∞—Ö–æ–¥–∏–º ID –ø–æ–ª—è –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ
      const fieldInfo = collectionFields.find(f => f.title === fieldName);
      
      if (fieldInfo) {
        // –ù–∞—Ö–æ–¥–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π field_value_id –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—è
        const existingFieldValueId = findFieldValueId(categoryId, fieldName);
        
        if (existingFieldValueId) {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ
          fieldValues.push({
            id: existingFieldValueId,
            value: fieldValueCell.toString().trim()
          });
          console.log(`üìù –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ "${fieldName}"`);
        } else {
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
          fieldValues.push({
            collection_field_id: fieldInfo.id,
            value: fieldValueCell.toString().trim()
          });
          console.log(`‚ûï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –ø–æ–ª–µ "${fieldName}"`);
        }
      } else {
        console.warn(`‚ö†Ô∏è –ü–æ–ª–µ "${fieldName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ InSales`);
      }
    }

    console.log(`[INFO] –ü—Ä–æ—á–∏—Ç–∞–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏`);
    
    // –°–æ–±–∏—Ä–∞–µ–º –í–°–ï –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    const changes = {
      collection: {
      // SEO –¥–∞–Ω–Ω—ã–µ - –ü–†–ê–í–ò–õ–¨–ù–´–ï –ü–û–õ–Ø!
      html_title: sheet.getRange('B13').getValue() || null,
      meta_description: sheet.getRange('B14').getValue() || null,
      meta_keywords: sheet.getRange('B16').getValue() !== '–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è):' ? (sheet.getRange('B16').getValue() || null) : null,
        
        // –û–ø–∏—Å–∞–Ω–∏–µ
        description: finalDescription,
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è —á–µ—Ä–µ–∑ field_values_attributes
        field_values_attributes: fieldValues
      }
    };
    
    console.log('[INFO] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ InSales');
    console.log('[INFO] –ü–æ–ª–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', Object.keys(changes.collection).filter(k => changes.collection[k]).length);
    console.log('[INFO] Field values:', fieldValues.length);
    
    SpreadsheetApp.getActiveSpreadsheet().toast(
      '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ InSales...',
      'üì§ –û—Ç–ø—Ä–∞–≤–∫–∞',
      -1
    );
    
    const result = sendCategoryUpdateToInSalesAPI(categoryId, changes);
    
    if (result.success) {
      const productStats = getProductChangeStats(sheet);
      
      SpreadsheetApp.getActiveSpreadsheet().toast(
        '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!',
        '‚úÖ –ì–æ—Ç–æ–≤–æ',
        5
      );
      
      let message = `‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ InSales!\n\n`;
      message += `üìÅ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categoryId}\n`;
      message += `üìù –û–±–Ω–æ–≤–ª–µ–Ω–æ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π: ${Object.keys(changes.collection).filter(k => changes.collection[k] !== null).length}\n`;
      message += `‚öôÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π: ${fieldValues.length}\n`;
      message += `üè∑Ô∏è –í–µ—Ä—Ö–Ω–∏—Ö —Ç–µ–≥–æ–≤: ${topTags.length}\n`;
      message += `üè∑Ô∏è –ù–∏–∂–Ω–∏—Ö —Ç–µ–≥–æ–≤: ${bottomTags.length}\n\n`;
      
      message += `üìä –°–¢–ê–¢–£–° –¢–û–í–ê–†–û–í –í –ö–ê–¢–ï–ì–û–†–ò–ò:\n`;
      message += `‚Ä¢ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${productStats.total}\n`;
      message += `‚Ä¢ –í –Ω–∞–ª–∏—á–∏–∏: ${productStats.inStock}\n`;
      message += `‚Ä¢ –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏: ${productStats.outOfStock}`;
      
      SpreadsheetApp.getUi().alert(
        '–ì–æ—Ç–æ–≤–æ',
        message,
        SpreadsheetApp.getUi().ButtonSet.OK
      );
      
      console.log('[INFO] ‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
      
    } else {
      throw new Error(result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
    }
    
  } catch (error) {
    console.error('[ERROR] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error.message);
    
    SpreadsheetApp.getActiveSpreadsheet().toast(
      '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏',
      '‚ùå –û—à–∏–±–∫–∞',
      5
    );
    
    SpreadsheetApp.getUi().alert(
      '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏',
      `–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ InSales:\n\n${error.message}\n\n` +
      `–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n` +
      `‚Ä¢ –°–µ—Ä–≤–µ—Ä InSales –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (503)\n` +
      `‚Ä¢ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤\n` +
      `‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º\n\n` +
      `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.`,
      SpreadsheetApp.getUi().ButtonSet.OK
    );
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤
 */
function getProductChangeStats(sheet) {
  try {
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    const sections = calculateSheetSections(sheet);
    const startRow = sections.productsStart;
    const lastRow = sheet.getLastRow();
    
    if (lastRow < startRow) {
      return { total: 0, inStock: 0, outOfStock: 0 };
    }
    
    const data = sheet.getRange(startRow, 1, lastRow - startRow + 1, 8).getValues();
    
    let total = 0;
    let inStock = 0;
    let outOfStock = 0;
    
    for (let i = 0; i < data.length; i++) {
      const id = data[i][1]; // ID —Ç–æ–≤–∞—Ä–∞
      if (!id || id.toString().trim() === '') break;
      
      total++;
      
      const inStockStatus = data[i][4]; // –ö–æ–ª–æ–Ω–∫–∞ "–í –Ω–∞–ª–∏—á–∏–∏"
      if (inStockStatus === '–î–∞') {
        inStock++;
      } else {
        outOfStock++;
      }
    }
    
    return { total, inStock, outOfStock };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á—ë—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:', error);
    return { total: 0, inStock: 0, outOfStock: 0 };
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ InSales
 * –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: C17 (–Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è) ‚Üí B17 (—Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è)
 */
function getDescriptionForInSales(sheet) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é –≤ C17
  const newDescription = sheet.getRange('C17').getValue();
  if (newDescription && newDescription.toString().trim().length > 0) {
    console.log('[INFO] –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ C17');
    return newDescription.toString().trim();
  }
  
  // –ï—Å–ª–∏ C17 –ø—É—Å—Ç–∞—è, –±–µ—Ä–µ–º –∏–∑ B17
  const oldDescription = sheet.getRange('B17').getValue();
  if (oldDescription && oldDescription.toString().trim().length > 0) {
    console.log('[INFO] –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ B17');
    return oldDescription.toString().trim();
  }
  
  console.log('[INFO] –û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
  return '';
}

/**
 * –ß–∏—Ç–∞–µ—Ç –í–ï–†–•–ù–ò–ï —Ç–µ–≥–∏ –∏–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—è (HTML)
 * FALLBACK –∫–æ–≥–¥–∞ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è
 */
function getTopTagsFromSheet(sheet, productsCount) {
  try {
    const extraFieldsCount = countExtraFields(sheet, productsCount);
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    const productsStartRow = calculateSheetSections(sheet).productsStart;
    const topTagsStartRow = productsStartRow + productsCount + 5 + 2 + extraFieldsCount + 3 + 1 + 2 + 1;
    
    const data = sheet.getRange(topTagsStartRow, 1, 10, 2).getValues(); // –ö–æ–ª–æ–Ω–∫–∏ A –∏ B
    
    const tags = [];
    
    for (let i = 0; i < data.length; i++) {
      const text = data[i][0];
      const url = data[i][1];
      
      if (text && text.toString().trim() !== '' && 
          url && url.toString().trim() !== '') {
        tags.push({
          text: text.toString().trim(),
          url: url.toString().trim()
        });
      }
    }
    
    console.log(`üè∑Ô∏è –ù–∞–π–¥–µ–Ω–æ –≤–µ—Ä—Ö–Ω–∏—Ö —Ç–µ–≥–æ–≤: ${tags.length}`);
    return tags;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤–µ—Ä—Ö–Ω–∏—Ö —Ç–µ–≥–æ–≤:', error);
    return [];
  }
}

/**
 * –ß–∏—Ç–∞–µ—Ç –ù–ò–ñ–ù–ò–ï —Ç–µ–≥–∏ –∏–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—è (HTML)
 * FALLBACK –∫–æ–≥–¥–∞ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è
 */
function getBottomTagsFromSheet(sheet, productsCount) {
  try {
    const extraFieldsCount = countExtraFields(sheet, productsCount);
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    const productsStartRow = calculateSheetSections(sheet).productsStart;
    const topTagsStartRow = productsStartRow + productsCount + 5 + 2 + extraFieldsCount + 3 + 1 + 2 + 1;
    const bottomTagsStartRow = topTagsStartRow + 10 + 3 + 1 + 2 + 1;
    
    const data = sheet.getRange(bottomTagsStartRow, 1, 10, 2).getValues(); // –ö–æ–ª–æ–Ω–∫–∏ A –∏ B
    
    const tags = [];
    
    for (let i = 0; i < data.length; i++) {
      const text = data[i][0];
      const url = data[i][1];
      
      if (text && text.toString().trim() !== '' && 
          url && url.toString().trim() !== '') {
        tags.push({
          text: text.toString().trim(),
          url: url.toString().trim()
        });
      }
    }
    
    console.log(`üè∑Ô∏è –ù–∞–π–¥–µ–Ω–æ –Ω–∏–∂–Ω–∏—Ö —Ç–µ–≥–æ–≤: ${tags.length}`);
    return tags;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –Ω–∏–∂–Ω–∏—Ö —Ç–µ–≥–æ–≤:', error);
    return [];
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML –±–ª–æ–∫–∞ —Å—Å—ã–ª–æ–∫ –∏–∑ –º–∞—Å—Å–∏–≤–∞ —Ç–µ–≥–æ–≤
 */
function generateTagsBlockHTML(tags) {
  if (!tags || tags.length === 0) {
    return '';
  }
  
  let html = '<ul>\n';
  
  for (const tag of tags) {
    html += `  <li><a href="${tag.url}">${tag.text}</a></li>\n`;
  }
  
  html += '</ul>';
  
  return html;
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ InSales API
 * –ò–°–ü–†–ê–í–õ–ï–ù–û: –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ–ª—è –±–µ–∑ field_values
 */
function sendCategoryUpdateToInSalesAPI(categoryId, changes) {
  const maxRetries = 3;
  const retryDelay = 2000;
  
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      console.log(`[INFO] üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries} –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ InSales...`);
      
      const credentials = getInsalesCredentialsSync();
      if (!credentials) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ InSales');
      }
      
      const url = `${credentials.baseUrl}/admin/collections/${categoryId}.json`;
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º field_values_attributes –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
      const cleanChanges = {
        collection: {
          html_title: changes.collection.html_title,
          meta_description: changes.collection.meta_description,
          meta_keywords: changes.collection.meta_keywords,
          description: changes.collection.description
        }
      };
      
      console.log('[INFO] üì° URL –∑–∞–ø—Ä–æ—Å–∞:', url);
      console.log('[INFO] üì¶ –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:', JSON.stringify(cleanChanges, null, 2).substring(0, 500));
      
      const options = {
        method: 'PUT',
        headers: {
          'Authorization': 'Basic ' + Utilities.base64Encode(`${credentials.apiKey}:${credentials.password}`),
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'User-Agent': 'GoogleAppsScript-InSalesManager/2.0'
        },
        payload: JSON.stringify(cleanChanges),
        muteHttpExceptions: true
      };
      
      const response = UrlFetchApp.fetch(url, options);
      const statusCode = response.getResponseCode();
      const responseText = response.getContentText();
      
      console.log('[INFO] üì• HTTP —Å—Ç–∞—Ç—É—Å:', statusCode);
      console.log('[INFO] üì• –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', responseText.substring(0, 500));
      
      // –£—Å–ø–µ—à–Ω—ã–µ –∫–æ–¥—ã
      if (statusCode === 200 || statusCode === 204) {
        console.log('[INFO] ‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!');
        
        // –ù–û–í–û–ï: –¢–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–ª—è–µ–º H1 –æ—Ç–¥–µ–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
        if (changes.collection.field_values_attributes && 
            changes.collection.field_values_attributes.length > 0) {
          updateCategoryFieldValues(categoryId, changes.collection.field_values_attributes);
        }
        
        return { success: true };
      }
      
      // –û—à–∏–±–∫–∞ 503 - –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É
      if (statusCode === 503) {
        console.warn(`[WARN] ‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ ${attempt}: –°–µ—Ä–≤–µ—Ä InSales –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (503)`);
        
        if (attempt < maxRetries) {
          console.log(`[INFO] ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${retryDelay / 1000} —Å–µ–∫ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...`);
          Utilities.sleep(retryDelay);
          continue;
        } else {
          throw new Error(`–°–µ—Ä–≤–µ—Ä InSales –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ ${maxRetries} –ø–æ–ø—ã—Ç–æ–∫ (503 Service Unavailable)`);
        }
      }
      
      // –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
      if (statusCode >= 400) {
        let errorMessage = `HTTP ${statusCode}`;
        
        try {
          const errorData = JSON.parse(responseText);
          if (errorData.errors) {
            errorMessage += ': ' + JSON.stringify(errorData.errors);
          }
        } catch (e) {
          errorMessage += ': ' + responseText.substring(0, 200);
        }
        
        throw new Error(errorMessage);
      }
      
      throw new Error(`–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞: ${statusCode}`);
      
    } catch (error) {
      console.error(`[ERROR] ‚ùå –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ—É–¥–∞—á–Ω–∞:`, error.message);
      
      if (attempt === maxRetries) {
        return { success: false, error: error.message };
      }
      
      if (!error.message.includes('503')) {
        return { success: false, error: error.message };
      }
      
      Utilities.sleep(retryDelay);
    }
  }
  
  return { success: false, error: '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫' };
}

/**
 * –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ—Ç field_values —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint
 */
function updateCategoryFieldValues(categoryId, fieldValuesArray) {
  try {
    console.log(`[INFO] üîß –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryId}`);
    
    const credentials = getInsalesCredentialsSync();
    if (!credentials) {
      console.error('[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
      return false;
    }
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º field_values —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π endpoint –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    // –Ω–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—è
    
    let successCount = 0;
    
    for (const fieldValue of fieldValuesArray) {
      try {
        const url = `${credentials.baseUrl}/admin/collections/${categoryId}.json`;
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º payload —Ç–æ–ª—å–∫–æ —Å –æ–¥–Ω–∏–º field_value
        const payload = {
          collection: {
            field_values_attributes: [fieldValue]
          }
        };
        
        console.log(`[INFO] üîß –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ:`, JSON.stringify(fieldValue));
        
        const options = {
          method: 'PUT',
          headers: {
            'Authorization': 'Basic ' + Utilities.base64Encode(`${credentials.apiKey}:${credentials.password}`),
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          payload: JSON.stringify(payload),
          muteHttpExceptions: true
        };
        
        const response = UrlFetchApp.fetch(url, options);
        const statusCode = response.getResponseCode();
        
        if (statusCode === 200 || statusCode === 204) {
          console.log(`[INFO] ‚úÖ –ü–æ–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ`);
          successCount++;
        } else {
          const responseText = response.getContentText();
          console.error(`[ERROR] ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—è: ${statusCode}`);
          console.error(`[ERROR] –û—Ç–≤–µ—Ç:`, responseText.substring(0, 200));
        }
        
        Utilities.sleep(500); // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        
      } catch (error) {
        console.error('[ERROR] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è field_value:', error.message);
      }
    }
    
    console.log(`[INFO] üéØ –û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π: ${successCount}/${fieldValuesArray.length}`);
    return successCount > 0;
    
  } catch (error) {
    console.error('[ERROR] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è field_values:', error.message);
    return false;
  }
}

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
function getInsalesCredentialsSync() {
  try {
    const config = getInsalesConfig();
    
    if (!config || !config.apiKey || !config.password || !config.shop) {
      throw new Error('–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ InSales –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ 01_config.gs');
    }
    
    return {
      apiKey: config.apiKey,
      password: config.password,
      shop: config.shop,
      baseUrl: config.baseUrl
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á—ë—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö InSales:', error);
    return null;
  }
}

/**
 * –ù–∞—Ö–æ–¥–∏—Ç ID —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ field_value –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø–æ–ª—è
 */
function findFieldValueId(categoryId, fieldName) {
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ InSales
    const categoryData = loadFullCategoryData(categoryId);
    
    if (!categoryData.field_values || !Array.isArray(categoryData.field_values)) {
      return null;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º collection_field_id –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—è
    const fieldId = getFieldIdByName(fieldName);
    if (!fieldId) {
      return null;
    }
    
    // –ò—â–µ–º field_value —Å —Ç–∞–∫–∏–º collection_field_id
    const fieldValue = categoryData.field_values.find(fv => 
      fv.collection_field_id === fieldId
    );
    
    return fieldValue ? fieldValue.id : null;
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ field_value ID –¥–ª—è "${fieldName}":`, error);
    return null;
  }
}
/**
 * ========================================
 * –†–ê–ë–û–¢–ê –° –ü–õ–ò–¢–ö–ê–ú–ò –¢–ï–ì–û–í –ò–ó –¢–ê–ë–õ–ò–¶
 * ========================================
 */

/**
 * –ß–∏—Ç–∞–µ—Ç –≤–µ—Ä—Ö–Ω—é—é –ø–ª–∏—Ç–∫—É —Ç–µ–≥–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã (—Å—Ç—Ä–æ–∫–∏ 76+)
 * –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —Ç–∞–±–ª–∏—Ü–∞ ‚Üí —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ
 */
function getTopTagsFromTable(sheet, productsCount) {
  try {
    const extraFieldsCount = countExtraFields(sheet, productsCount);

    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    const productsStartRow = calculateSheetSections(sheet).productsStart;
    const topTagsStartRow = productsStartRow + productsCount + 5 + 2 + extraFieldsCount + 3 + 1 + 2 + 1;
    
    console.log(`üìã –ß–∏—Ç–∞–µ–º –≤–µ—Ä—Ö–Ω—é—é –ø–ª–∏—Ç–∫—É —Ç–µ–≥–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã (—Å—Ç—Ä–æ–∫–∞ ${topTagsStartRow})...`);
    
    const data = sheet.getRange(topTagsStartRow, 1, 10, 2).getValues(); // –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–æ–ª—å–∫–æ A-B
    
    const tags = [];
    
    for (let i = 0; i < data.length; i++) {
      const text = data[i][0];  // –ö–æ–ª–æ–Ω–∫–∞ A - –¢–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏
      const url = data[i][1];   // –ö–æ–ª–æ–Ω–∫–∞ B - URL
      
      if (text && text.toString().trim() !== '' && 
          url && url.toString().trim() !== '') {
        tags.push({
          text: text.toString().trim(),
          url: url.toString().trim()
        });
      }
    }
    
    console.log(`‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ –≤–µ—Ä—Ö–Ω–∏—Ö —Ç–µ–≥–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã: ${tags.length}`);
    return tags;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤–µ—Ä—Ö–Ω–µ–π –ø–ª–∏—Ç–∫–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã:', error);
    return [];
  }
}

/**
 * –ß–∏—Ç–∞–µ—Ç –Ω–∏–∂–Ω—é—é –ø–ª–∏—Ç–∫—É —Ç–µ–≥–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
 * –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —Ç–∞–±–ª–∏—Ü–∞ ‚Üí —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ
 */
function getBottomTagsFromTable(sheet, productsCount) {
  try {
    const extraFieldsCount = countExtraFields(sheet, productsCount);

    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    const productsStartRow = calculateSheetSections(sheet).productsStart;
    const topTagsStartRow = productsStartRow + productsCount + 5 + 2 + extraFieldsCount + 3 + 1 + 2 + 1;
    const bottomTagsStartRow = topTagsStartRow + 10 + 3 + 1 + 2 + 1;
    
    console.log(`üìã –ß–∏—Ç–∞–µ–º –Ω–∏–∂–Ω—é—é –ø–ª–∏—Ç–∫—É —Ç–µ–≥–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã (—Å—Ç—Ä–æ–∫–∞ ${bottomTagsStartRow})...`);
    
    const data = sheet.getRange(bottomTagsStartRow, 1, 10, 2).getValues(); // –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–æ–ª—å–∫–æ A-B
    
    const tags = [];
    
    for (let i = 0; i < data.length; i++) {
      const text = data[i][0];
      const url = data[i][1];
      
      if (text && text.toString().trim() !== '' && 
          url && url.toString().trim() !== '') {
        tags.push({
          text: text.toString().trim(),
          url: url.toString().trim()
        });
      }
    }
    
    console.log(`‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ –Ω–∏–∂–Ω–∏—Ö —Ç–µ–≥–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã: ${tags.length}`);
    return tags;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –Ω–∏–∂–Ω–µ–π –ø–ª–∏—Ç–∫–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã:', error);
    return [];
  }
}

/**
 * –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –≤ –ª–∏—Å—Ç–µ
 */
function countExtraFields(sheet, productsCount) {
  try {
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    const productsStartRow = calculateSheetSections(sheet).productsStart;
    const extraFieldsStartRow = productsStartRow + productsCount + 5 + 2; // –°—Ç—Ä–æ–∫–∞ –Ω–∞—á–∞–ª–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ–ø.–ø–æ–ª–µ–π
    
    let count = 0;
    for (let i = 0; i < 50; i++) {
      const fieldName = sheet.getRange(extraFieldsStartRow + i, 1).getValue();
      if (!fieldName || fieldName.toString().trim() === '') {
        break;
      }
      count++;
    }
    
    return count;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π:', error);
    return 20; // –ó–∞–ø–∞—Å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
  }
}