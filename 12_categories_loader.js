// ========================================
// –ó–ê–ì–†–£–ó–ö–ê –ö–ê–¢–ï–ì–û–†–ò–ô –° –ò–ï–†–ê–†–•–ò–ï–ô
// ========================================

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –∏–µ—Ä–∞—Ä—Ö–∏–µ–π
 * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ –º–µ–Ω—é
 */
function loadCategoriesWithHierarchy() {
  const context = "–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π";
  
  try {
    SpreadsheetApp.getActiveSpreadsheet().toast(
      '–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ InSales...',
      '‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞',
      -1
    );
    
    logInfo('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –∏–µ—Ä–∞—Ä—Ö–∏–µ–π', null, context);
    
    // 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–∑ InSales
    const allCollections = loadAllCollectionsFromInSales();
    
    if (!allCollections || allCollections.length === 0) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ InSales');
    }
    
    logInfo(`üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–æ–ª–ª–µ–∫—Ü–∏–π: ${allCollections.length}`);
    
    // 2. –°—Ç—Ä–æ–∏–º –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    const hierarchy = buildCategoryHierarchy(allCollections);
    
    logInfo(`üå≥ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∞ –∏–µ—Ä–∞—Ä—Ö–∏—è: ${hierarchy.length} –∫–æ—Ä–Ω–µ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
    
    // 3. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏–µ—Ä–∞—Ä—Ö–∏–∏
    const flatList = flattenHierarchyWithLevels(hierarchy);
    
    logInfo(`üìã –°–æ–∑–¥–∞–Ω –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫: ${flatList.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
    
    // 4. –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    SpreadsheetApp.getActiveSpreadsheet().toast(
      '–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö...',
      '‚è≥ –ê–Ω–∞–ª–∏–∑',
      -1
    );
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–ª await
    const categoriesWithCounts = addProductCountsToCategories(flatList);
    
    // 5. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –≥–ª–∞–≤–Ω—ã–π –ª–∏—Å—Ç
    writeCategoriesToMainList(categoriesWithCounts);
    
    SpreadsheetApp.getActiveSpreadsheet().toast(
      `–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${categoriesWithCounts.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –∏–µ—Ä–∞—Ä—Ö–∏–µ–π!`,
      '‚úÖ –ì–æ—Ç–æ–≤–æ',
      10
    );
    
    logInfo('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –∑–∞–ø–∏—Å–∞–Ω—ã', null, context);
    
    return {
      success: true,
      totalCategories: categoriesWithCounts.length,
      rootCategories: hierarchy.length
    };
    
  } catch (error) {
    logError('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π', error, context);
    SpreadsheetApp.getActiveSpreadsheet().toast(
      '–û—à–∏–±–∫–∞: ' + error.message,
      '‚ùå –û—à–∏–±–∫–∞',
      10
    );
    throw error;
  }
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–∑ InSales
 */
function loadAllCollectionsFromInSales() {
  const context = "–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π InSales";
  
  try {
    const credentials = getInsalesCredentialsSync();
    if (!credentials) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ InSales');
    }
    
    const allCollections = [];
    let page = 1;
    const perPage = 250;
    
    while (true) {
      const url = `${credentials.baseUrl}${CATEGORY_API_ENDPOINTS.COLLECTIONS}?per_page=${perPage}&page=${page}`;
      
      const options = {
        method: 'GET',
        headers: {
          'Authorization': 'Basic ' + Utilities.base64Encode(`${credentials.apiKey}:${credentials.password}`),
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        muteHttpExceptions: true
      };
      
      const response = UrlFetchApp.fetch(url, options);
      const responseCode = response.getResponseCode();
      
      if (responseCode === 429) {
        Utilities.sleep(2000);
        continue;
      }
      
      if (responseCode !== 200) {
        throw new Error(`–û—à–∏–±–∫–∞ API: ${responseCode}`);
      }
      
      const collections = JSON.parse(response.getContentText());
      
      if (!collections || collections.length === 0) {
        break;
      }
      
      allCollections.push(...collections);
      
      logInfo(`üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page}: –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${collections.length} –∫–æ–ª–ª–µ–∫—Ü–∏–π`);
      
      if (collections.length < perPage || page >= 10) {
        break;
      }
      
      page++;
      Utilities.sleep(300);
    }
    
    logInfo(`‚úÖ –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∫–æ–ª–ª–µ–∫—Ü–∏–π: ${allCollections.length}`, null, context);
    
    return allCollections;
    
  } catch (error) {
    logError('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π', error, context);
    throw error;
  }
}

/**
 * –°—Ç—Ä–æ–∏—Ç –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
 */
function buildCategoryHierarchy(collections) {
  const context = "–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–µ—Ä–∞—Ä—Ö–∏–∏";
  
  try {
    logInfo('üå≥ –°—Ç—Ä–æ–∏–º –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π', null, context);
    
    // –°–æ–∑–¥–∞–µ–º map –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    const categoryMap = {};
    collections.forEach(cat => {
      categoryMap[cat.id] = {
        ...cat,
        children: [],
        level: 0,
        path: []
      };
    });
    
    // –°—Ç—Ä–æ–∏–º –¥–µ—Ä–µ–≤–æ
    const rootCategories = [];
    
    collections.forEach(category => {
      const cat = categoryMap[category.id];
      
      if (!category.parent_id) {
        // –ö–æ—Ä–Ω–µ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        rootCategories.push(cat);
      } else {
        // –î–æ—á–µ—Ä–Ω—è—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        const parent = categoryMap[category.parent_id];
        if (parent) {
          parent.children.push(cat);
          cat.level = parent.level + 1;
          cat.path = [...parent.path, parent.title];
        } else {
          // –ï—Å–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –∫–æ—Ä–Ω–µ–≤—É—é
          rootCategories.push(cat);
        }
      }
    });
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ position
    const sortByPosition = (a, b) => (a.position || 0) - (b.position || 0);
    
    rootCategories.sort(sortByPosition);
    
    function sortChildren(categories) {
      categories.forEach(cat => {
        if (cat.children.length > 0) {
          cat.children.sort(sortByPosition);
          sortChildren(cat.children);
        }
      });
    }
    
    sortChildren(rootCategories);
    
    logInfo(`‚úÖ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∞ –∏–µ—Ä–∞—Ä—Ö–∏—è: ${rootCategories.length} –∫–æ—Ä–Ω–µ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π`, null, context);
    
    return rootCategories;
    
  } catch (error) {
    logError('‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∏–µ—Ä–∞—Ä—Ö–∏–∏', error, context);
    throw error;
  }
}

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏–µ—Ä–∞—Ä—Ö–∏—é –≤ –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É—Ä–æ–≤–Ω—è—Ö
 */
function flattenHierarchyWithLevels(hierarchy, parentPath = []) {
  const flatList = [];
  
  hierarchy.forEach(category => {
    const currentPath = [...parentPath, category.title];
    const pathString = currentPath.join(' > ');
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    flatList.push({
      id: category.id,
      parent_id: category.parent_id || null,
      level: category.level,
      path: pathString,
      title: category.title,
      url: category.url || category.permalink || '',
      position: category.position || 0,
      is_hidden: category.is_hidden || false,
      seo_title: category.seo_title || '',
      seo_description: category.seo_description || '',
      description: category.description || '',
      productsCount: 0,  // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–∑–∂–µ
      inStockCount: 0    // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–∑–∂–µ
    });
    
    // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (category.children && category.children.length > 0) {
      const childrenFlat = flattenHierarchyWithLevels(category.children, currentPath);
      flatList.push(...childrenFlat);
    }
  });
  
  return flatList;
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –æ–¥–∏–Ω —Ä–∞–∑
 * –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–ª async
 */
function addProductCountsToCategories(categories) {
  const context = "–ü–æ–¥—Å—á–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤";
  
  try {
    logInfo('üìä –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö', null, context);
    
    const credentials = getInsalesCredentialsSync();
    if (!credentials) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –æ–¥–∏–Ω —Ä–∞–∑
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–ª await
    const allProducts = loadAllProductsQuick(credentials);
    
    logInfo(`üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: ${allProducts.length}`);
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const productCountsByCategory = {};
    const inStockCountsByCategory = {};
    
    allProducts.forEach(product => {
      // –¢–æ–≤–∞—Ä –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö
      const collectionIds = product.collections_ids || [];
      
      collectionIds.forEach(collectionId => {
        // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        productCountsByCategory[collectionId] = (productCountsByCategory[collectionId] || 0) + 1;
        
        // –í –Ω–∞–ª–∏—á–∏–∏ (–ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ –≤–∞—Ä–∏–∞–Ω—Ç—ã)
        const hasStock = product.variants && product.variants.some(v => v.quantity > 0);
        if (hasStock) {
          inStockCountsByCategory[collectionId] = (inStockCountsByCategory[collectionId] || 0) + 1;
        }
      });
    });
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    categories.forEach(category => {
      category.productsCount = productCountsByCategory[category.id] || 0;
      category.inStockCount = inStockCountsByCategory[category.id] || 0;
    });
    
    logInfo('‚úÖ –°—á–µ—Ç—á–∏–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º', null, context);
    
    return categories;
    
  } catch (error) {
    logError('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤', error, context);
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –Ω—É–ª–µ–≤—ã–º–∏ —Å—á–µ—Ç—á–∏–∫–∞–º–∏
    return categories;
  }
}

/**
 * –ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ (—Ç–æ–ª—å–∫–æ ID –∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏)
 * –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–ª async
 */
function loadAllProductsQuick(credentials) {
  const allProducts = [];
  let page = 1;
  const perPage = 250;
  
  while (page <= 20) { // –û–≥—Ä–∞–Ω–∏—á–∏–º –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const url = `${credentials.baseUrl}/admin/products.json?per_page=${perPage}&page=${page}&fields=id,collections_ids,variants&variant_fields=quantity`;
    
    const options = {
      method: 'GET',
      headers: {
        'Authorization': 'Basic ' + Utilities.base64Encode(`${credentials.apiKey}:${credentials.password}`),
        'Content-Type': 'application/json'
      },
      muteHttpExceptions: true
    };
    
    try {
      const response = UrlFetchApp.fetch(url, options);
      
      if (response.getResponseCode() !== 200) {
        break;
      }
      
      const products = JSON.parse(response.getContentText());
      
      if (!products || products.length === 0) {
        break;
      }
      
      allProducts.push(...products);
      
      if (products.length < perPage) {
        break;
      }
      
      page++;
      Utilities.sleep(300);
      
    } catch (error) {
      logWarning(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${page}: ${error.message}`);
      break;
    }
  }
  
  return allProducts;
}

/**
 * –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –≥–ª–∞–≤–Ω—ã–π –ª–∏—Å—Ç
 */
function writeCategoriesToMainList(categories) {
  const context = '–ó–∞–ø–∏—Å—å –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –≥–ª–∞–≤–Ω—ã–π –ª–∏—Å—Ç';
  
  try {
    console.log('üìù –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –≥–ª–∞–≤–Ω—ã–π –ª–∏—Å—Ç');
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(CATEGORY_SHEETS.MAIN_LIST);
    
    if (!sheet) {
      throw new Error('–õ–∏—Å—Ç "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Äî –°–ø–∏—Å–æ–∫" –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ (–∫—Ä–æ–º–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏)
    const lastRow = sheet.getLastRow();
    if (lastRow > 2) {
      sheet.deleteRows(3, lastRow - 2);
    }
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
    const dataRows = categories.map(cat => {
      // –í—ã—á–∏—Å–ª—è–µ–º –æ—Ç—Å—Ç—É–ø —á–µ—Ä–µ–∑ —Å—Ç—É–ø–µ–Ω—á–∞—Ç—É—é –∏–µ—Ä–∞—Ä—Ö–∏—é
      const indent = '  '.repeat(cat.level);
      const visualTitle = cat.level > 0 ? `${indent}‚îî‚îÄ ${cat.title}` : cat.title;
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∫—É InSales
      const adminLink = `https://${INSALES_CONFIG.adminDomain}${INSALES_CONFIG.adminPath}/collections/${cat.id}`;
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã
      const seoStatus = (cat.seo_title && cat.seo_description) ? '‚úÖ –ì–æ—Ç–æ–≤–æ' : '‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è';
      
      return [
        false,                    // A - Checkbox (–ø—É—Å—Ç–æ–π)
        cat.id,                   // B - ID
        cat.parent_id || '',      // C - Parent ID
        cat.level,                // D - –£—Ä–æ–≤–µ–Ω—å
        cat.path,                 // E - –ò–µ—Ä–∞—Ä—Ö–∏—è —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏
        visualTitle,              // F - –ù–∞–∑–≤–∞–Ω–∏–µ
        cat.url,                  // G - URL
        cat.productsCount,        // H - –¢–æ–≤–∞—Ä–æ–≤
        cat.inStockCount,         // I - –í –Ω–∞–ª–∏—á–∏–∏
        seoStatus,                // J - SEO —Å—Ç–∞—Ç—É—Å
        '–ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ',          // K - AI —Å—Ç–∞—Ç—É—Å
        new Date(),               // L - –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        adminLink                 // M - –ê–¥–º–∏–Ω–∫–∞
      ];
    });
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞—á–∏–Ω–∞—è —Å–æ —Å—Ç—Ä–æ–∫–∏ 3
    if (dataRows.length > 0) {
      sheet.getRange(3, 1, dataRows.length, dataRows[0].length).setValues(dataRows);
      
      // –î–æ–±–∞–≤–ª—è–µ–º —á–µ–∫–±–æ–∫—Å—ã –≤ –∫–æ–ª–æ–Ω–∫—É A
      const checkboxRange = sheet.getRange(3, 1, dataRows.length, 1);
      checkboxRange.insertCheckboxes();
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏
      sheet.getRange(3, 8, dataRows.length, 2).setNumberFormat('0'); // –¢–æ–≤–∞—Ä–æ–≤, –í –Ω–∞–ª–∏—á–∏–∏
      sheet.getRange(3, 12, dataRows.length, 1).setNumberFormat('dd.mm.yyyy hh:mm'); // –î–∞—Ç–∞
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —É—Ä–æ–≤–Ω–∏ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
      for (let i = 0; i < dataRows.length; i++) {
        const level = dataRows[i][3]; // –£—Ä–æ–≤–µ–Ω—å
        const rowIndex = i + 3;
        
        let bgColor = '#ffffff';
        if (level === 0) bgColor = '#ede7f6'; // –°–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–π –¥–ª—è –∫–æ—Ä–Ω–µ–≤—ã—Ö
        else if (level === 1) bgColor = '#f3e5f5'; // –û—á–µ–Ω—å —Å–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π –¥–ª—è —É—Ä–æ–≤–Ω—è 1
        else if (level === 2) bgColor = '#fce4ec'; // –û—á–µ–Ω—å —Å–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π –¥–ª—è —É—Ä–æ–≤–Ω—è 2
        
        sheet.getRange(rowIndex, 1, 1, 13).setBackground(bgColor);
      }
    }
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    sheet.deleteRow(2);
    
    console.log(`‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ ${dataRows.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –ª–∏—Å—Ç`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
    throw error;
  }
}
function testCategoryFields() {
  const categoryId = 9171538;
  
  const credentials = getInsalesCredentialsSync();
  const url = `${credentials.baseUrl}/admin/collections/${categoryId}.json`;
  
  const response = UrlFetchApp.fetch(url, {
    method: 'GET',
    headers: {
      'Authorization': 'Basic ' + Utilities.base64Encode(`${credentials.apiKey}:${credentials.password}`),
      'Content-Type': 'application/json'
    }
  });
  
  const categoryData = JSON.parse(response.getContentText());
  
  console.log('=== SEO –ü–û–õ–Ø ===');
  console.log('html_title:', categoryData.html_title);
  console.log('meta_description:', categoryData.meta_description);
  
  console.log('\n=== FIELD_VALUES ===');
  if (categoryData.field_values && categoryData.field_values.length > 0) {
    for (let i = 0; i < Math.min(5, categoryData.field_values.length); i++) {
      const field = categoryData.field_values[i];
      console.log(`[${i}] name: "${field.name}", value: "${field.value ? field.value.substring(0, 80) : 'null'}"`);
    }
  }
}

function testFullFieldStructure() {
  const categoryId = 9171538;
  
  const credentials = getInsalesCredentialsSync();
  const url = `${credentials.baseUrl}/admin/collections/${categoryId}.json`;
  
  const response = UrlFetchApp.fetch(url, {
    method: 'GET',
    headers: {
      'Authorization': 'Basic ' + Utilities.base64Encode(`${credentials.apiKey}:${credentials.password}`),
      'Content-Type': 'application/json'
    }
  });
  
  const categoryData = JSON.parse(response.getContentText());
  
  console.log('=== FIELD_VALUES –ü–û–õ–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê ===');
  console.log('–í—Å–µ–≥–æ field_values:', categoryData.field_values ? categoryData.field_values.length : 0);
  
  if (categoryData.field_values && categoryData.field_values.length > 0) {
    for (let i = 0; i < categoryData.field_values.length; i++) {
      const field = categoryData.field_values[i];
      
      console.log(`\n[${i}] ------------------`);
      console.log('–í—Å–µ –∫–ª—é—á–∏:', Object.keys(field));
      console.log('–ü–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç:', JSON.stringify(field, null, 2));
    }
  }
  
  console.log('\n=== –ü–†–û–í–ï–†–Ø–ï–ú HTML_TITLE ===');
  console.log('html_title:', categoryData.html_title);
  console.log('title:', categoryData.title);
}