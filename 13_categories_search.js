// ========================================
// –ü–û–ò–°–ö –ö–ê–¢–ï–ì–û–†–ò–ô
// ========================================

/**
 * –ú–ê–ü–ü–ò–ù–ì –ø–æ–ª–µ–π: Google Sheets ‚Üí InSales API
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è –¥–ª—è InSales
 */
function getInSalesFieldName(sheetFieldName) {
  const mapping = {
    '–†–∞–∑–¥–µ–ª –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é': '–†–∞–∑–¥–µ–ª –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é',
    '–ù–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø—É–Ω–∫—Ç–æ–≤ –î-–º–µ–Ω—é': '–ù–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø—É–Ω–∫—Ç–æ–≤ –î-–º–µ–Ω—é',
    '–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–π?': '–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–π?',
    '–¢–æ–≤–∞—Ä—ã –∏ noindex': '–¢–æ–≤–∞—Ä—ã –∏ noindex',
    '–ù–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ë–∞–Ω–Ω–µ—Ä 2': '–ù–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ë–∞–Ω–Ω–µ—Ä 2',
    'ID —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é': 'ID —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é',
    '–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏–∫–æ–Ω–∫—É –¥–ª—è –º–µ–Ω—é': '–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏–∫–æ–Ω–∫—É –¥–ª—è –º–µ–Ω—é',
    '–ë–∞–Ω–Ω–µ—Ä 1': '–ë–∞–Ω–Ω–µ—Ä 1 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
    '–ë–∞–Ω–Ω–µ—Ä 2': '–ë–∞–Ω–Ω–µ—Ä 2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
    '–ë–∞–Ω–Ω–µ—Ä 2 - —Å—Å—ã–ª–∫–∞': '–ë–∞–Ω–Ω–µ—Ä 2 - —Å—Å—ã–ª–∫–∞',
    '–ë–∞–Ω–Ω–µ—Ä 2 - –º–æ–±–∏–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ': '–ë–∞–Ω–Ω–µ—Ä 2 - –º–æ–±–∏–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
    '–ë–∞–Ω–Ω–µ—Ä 1 - —Å—Å—ã–ª–∫–∞': '–ë–∞–Ω–Ω–µ—Ä 1 - —Å—Å—ã–ª–∫–∞',
    '–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ': '–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
    '–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ë–∞–Ω–Ω–µ—Ä ‚Äì –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ': '–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ë–∞–Ω–Ω–µ—Ä ‚Äì –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
    '–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ': '–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
    '–ë–∞–Ω–Ω–µ—Ä ‚Äì –ú–æ–±–∏–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ': '–ë–∞–Ω–Ω–µ—Ä ‚Äì –ú–æ–±–∏–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
    '–¢–æ–≤–∞—Ä—ã –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Å—Å—ã–ª–∫–µ': '–¢–æ–≤–∞—Ä—ã –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Å—Å—ã–ª–∫–µ',
    '–°—Å—ã–ª–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Å–ª–∞–π–¥–µ—Ä–µ': '–°—Å—ã–ª–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Å–ª–∞–π–¥–µ—Ä–µ',
    '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –º–µ–Ω—é': '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –º–µ–Ω—é',
    '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Å–ø–∏—Å–∫–µ': '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Å–ø–∏—Å–∫–µ'
  };
  
  return mapping[sheetFieldName] || sheetFieldName;
}

/**
 * –î–∏–∞–ª–æ–≥ –ø–æ–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
 * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ –º–µ–Ω—é
 */
function showCategorySearchDialog() {
  const htmlContent = `
    <!DOCTYPE html>
    <html>
      <head>
        <base target="_top">
        <style>
          body { 
            font-family: Arial, sans-serif; 
            padding: 20px;
            margin: 0;
          }
          h3 { 
            margin-top: 0;
            color: #1976d2;
          }
          .search-container {
            margin: 20px 0;
          }
          .search-field { 
            width: 100%; 
            padding: 12px; 
            margin: 10px 0; 
            border: 2px solid #ddd; 
            border-radius: 4px;
            font-size: 14px;
            box-sizing: border-box;
          }
          .search-field:focus {
            outline: none;
            border-color: #1976d2;
          }
          .hint {
            color: #666;
            font-size: 12px;
            margin: 5px 0;
          }
          .results {
            margin: 20px 0;
            max-height: 400px;
            overflow-y: auto;
            border: 1px solid #ddd;
            border-radius: 4px;
            display: none;
          }
          .results.visible {
            display: block;
          }
          .result-item {
            padding: 12px;
            border-bottom: 1px solid #eee;
            cursor: pointer;
            transition: background 0.2s;
          }
          .result-item:hover {
            background: #f5f5f5;
          }
          .result-item:last-child {
            border-bottom: none;
          }
          .result-title {
            font-weight: bold;
            color: #333;
            margin-bottom: 4px;
          }
          .result-path {
            font-size: 12px;
            color: #666;
          }
          .result-stats {
            font-size: 11px;
            color: #999;
            margin-top: 4px;
          }
          .buttons { 
            margin-top: 20px; 
            text-align: right;
            border-top: 1px solid #eee;
            padding-top: 15px;
          }
          button { 
            padding: 10px 20px; 
            margin-left: 10px;
            cursor: pointer;
            border: none;
            border-radius: 4px;
            font-size: 14px;
          }
          .btn-cancel {
            background: #f1f3f4;
            color: #333;
          }
          .btn-cancel:hover {
            background: #e0e0e0;
          }
          .primary { 
            background: #1976d2; 
            color: white;
          }
          .primary:hover {
            background: #1565c0;
          }
          .primary:disabled {
            background: #ccc;
            cursor: not-allowed;
          }
          .loading {
            text-align: center;
            padding: 20px;
            color: #666;
          }
          .no-results {
            text-align: center;
            padding: 40px;
            color: #999;
          }
          .selected {
            background: #e3f2fd !important;
            border-left: 3px solid #1976d2;
          }
        </style>
      </head>
      <body>
        <h3>üîç –ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π</h3>
        
        <div class="search-container">
          <input 
            type="text" 
            id="searchInput" 
            class="search-field" 
            placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏..."
            autocomplete="off"
          >
          <div class="hint">
            üí° –ú–æ–∂–Ω–æ –∏—Å–∫–∞—Ç—å –ø–æ —á–∞—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è: "–±–∏–Ω–æ–∫–ª–∏", "10x25", "–ø–æ–ª–µ–≤—ã–µ"
          </div>
        </div>
        
        <div id="results" class="results">
          <div class="loading">–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞...</div>
        </div>
        
        <div class="buttons">
          <button class="btn-cancel" onclick="google.script.host.close()">
            –û—Ç–º–µ–Ω–∞
          </button>
          <button 
            id="openBtn" 
            class="primary" 
            onclick="openSelectedCategory()" 
            disabled
          >
            –û—Ç–∫—Ä—ã—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –ª–∏—Å—Ç
          </button>
        </div>
        
        <script>
          let allCategories = [];
          let selectedCategory = null;
          
          // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
          window.onload = function() {
            loadCategories();
            
            // –ü–æ–∏—Å–∫ –ø—Ä–∏ –≤–≤–æ–¥–µ
            document.getElementById('searchInput').addEventListener('input', function(e) {
              performSearch(e.target.value);
            });
            
            // Enter –¥–ª—è –ø–æ–∏—Å–∫–∞
            document.getElementById('searchInput').addEventListener('keypress', function(e) {
              if (e.key === 'Enter') {
                performSearch(e.target.value);
              }
            });
          };
          
          function loadCategories() {
            google.script.run
              .withSuccessHandler(function(categories) {
                allCategories = categories;
                console.log('–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', categories.length);
              })
              .withFailureHandler(function(error) {
                showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ' + error.message);
              })
              .getCategoriesForSearch();
          }
          
          function performSearch(query) {
            const resultsDiv = document.getElementById('results');
            const openBtn = document.getElementById('openBtn');
            
            if (!query || query.length < 2) {
              resultsDiv.innerHTML = '<div class="loading">–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞...</div>';
              resultsDiv.classList.remove('visible');
              openBtn.disabled = true;
              return;
            }
            
            const searchQuery = query.toLowerCase();
            const filtered = allCategories.filter(cat => 
              cat.title.toLowerCase().includes(searchQuery) ||
              cat.path.toLowerCase().includes(searchQuery)
            );
            
            if (filtered.length === 0) {
              resultsDiv.innerHTML = '<div class="no-results">üòî –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
              resultsDiv.classList.add('visible');
              openBtn.disabled = true;
              return;
            }
            
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            let html = '';
            filtered.forEach((cat, index) => {
              const indent = '&nbsp;&nbsp;'.repeat(cat.level);
              const prefix = cat.level > 0 ? '‚îî‚îÄ ' : '';
              
              html += \`
                <div class="result-item" onclick="selectCategory(\${index})" id="result_\${index}">
                  <div class="result-title">
                    \${indent}\${prefix}\${cat.title}
                  </div>
                  <div class="result-path">üìÇ \${cat.path}</div>
                  <div class="result-stats">
                    üì¶ –¢–æ–≤–∞—Ä–æ–≤: \${cat.productsCount} | ‚úÖ –í –Ω–∞–ª–∏—á–∏–∏: \${cat.inStockCount}
                  </div>
                </div>
              \`;
            });
            
            resultsDiv.innerHTML = html;
            resultsDiv.classList.add('visible');
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            window.searchResults = filtered;
          }
          
          function selectCategory(index) {
            selectedCategory = window.searchResults[index];
            
            // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö
            document.querySelectorAll('.result-item').forEach(item => {
              item.classList.remove('selected');
            });
            
            // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π
            document.getElementById('result_' + index).classList.add('selected');
            
            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
            document.getElementById('openBtn').disabled = false;
          }
          
          function openSelectedCategory() {
            if (!selectedCategory) {
              alert('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é');
              return;
            }
            
            console.log('–û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', selectedCategory);
            
            google.script.run
              .withSuccessHandler(function() {
                google.script.host.close();
              })
              .withFailureHandler(function(error) {
                alert('–û—à–∏–±–∫–∞: ' + error.message);
              })
              .createDetailedCategorySheet(selectedCategory);
          }
          
          function showError(message) {
            document.getElementById('results').innerHTML = 
              '<div class="no-results">‚ùå ' + message + '</div>';
          }
        </script>
      </body>
    </html>
  `;
  
  const htmlOutput = HtmlService.createHtmlOutput(htmlContent)
    .setWidth(600)
    .setHeight(600);
  
  SpreadsheetApp.getUi().showModalDialog(htmlOutput, '–ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π InSales');
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ –¥–∏–∞–ª–æ–≥–∞)
 */
function getCategoriesForSearch() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(CATEGORY_SHEETS.MAIN_LIST);
    
    if (!sheet) {
      throw new Error('–õ–∏—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.');
    }
    
    const data = sheet.getDataRange().getValues();
    
    if (data.length <= 1) {
      throw new Error('–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏".');
    }
    
    const categories = [];
    
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ (—Å—Ç—Ä–æ–∫–∞ 1)
    for (let i = 1; i < data.length; i++) {
      const row = data[i];
      
      categories.push({
        id: row[MAIN_LIST_COLUMNS.CATEGORY_ID - 1],
        parent_id: row[MAIN_LIST_COLUMNS.PARENT_ID - 1],
        level: row[MAIN_LIST_COLUMNS.LEVEL - 1],
        path: row[MAIN_LIST_COLUMNS.HIERARCHY_PATH - 1],
        title: row[MAIN_LIST_COLUMNS.TITLE - 1]
        .replace(/[\s‚îî‚îÄ]/g, '')  // –£–±–∏—Ä–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        .replace(/([–∞-—è—ë])([–ê-–Ø–Å])/g, '$1 $2')  // –†–∞–∑–¥–µ–ª—è–µ–º —Å–ª–∏—Ç–Ω—ã–µ —Å–ª–æ–≤–∞
        .trim(),
        url: row[MAIN_LIST_COLUMNS.URL - 1],
        productsCount: row[MAIN_LIST_COLUMNS.PRODUCTS_COUNT - 1] || 0,
        inStockCount: row[MAIN_LIST_COLUMNS.IN_STOCK_COUNT - 1] || 0
      });
    }
    
    logInfo(`üìã –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ ${categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞`);
    
    return categories;
    
  } catch (error) {
    logError('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞', error);
    throw error;
  }
}

// ========================================
// –°–û–ó–î–ê–ù–ò–ï –î–ï–¢–ê–õ–¨–ù–û–ì–û –õ–ò–°–¢–ê –ö–ê–¢–ï–ì–û–†–ò–ò
// ========================================

/**
 * –°–æ–∑–¥–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –ª–∏—Å—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
function createDetailedCategorySheet(categoryData) {
  const context = "–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–∏—Å—Ç–∞";
  
  try {
    logInfo(`üé® –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –ª–∏—Å—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categoryData.title}`, null, context);
    
    SpreadsheetApp.getActiveSpreadsheet().toast(
      `–°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç –¥–ª—è "${categoryData.title}"...`,
      '‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ',
      -1
    );
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheetName = `${CATEGORY_SHEETS.DETAIL_PREFIX}${categoryData.title}`;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ª–∏—Å—Ç
    let sheet = ss.getSheetByName(sheetName);
    
    if (sheet) {
      // –õ–∏—Å—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –ø—Ä–æ—Å—Ç–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –µ–≥–æ
      ss.setActiveSheet(sheet);
      
      SpreadsheetApp.getActiveSpreadsheet().toast(
        '–õ–∏—Å—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –Ω–µ–≥–æ',
        '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
        3
      );
      
      return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ª–∏—Å—Ç
    sheet = ss.insertSheet(sheetName);
    
    // 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ InSales
    const fullCategoryData = loadFullCategoryData(categoryData.id);
    
    // 2. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categoryProducts = loadCategoryProducts(categoryData.id);
    
    // 3. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ª–∏—Å—Ç–∞
    setupDetailedCategorySheet(sheet, fullCategoryData, categoryProducts);
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ª–∏—Å—Ç
    ss.setActiveSheet(sheet);
    
    SpreadsheetApp.getActiveSpreadsheet().toast(
      `–î–µ—Ç–∞–ª—å–Ω—ã–π –ª–∏—Å—Ç —Å–æ–∑–¥–∞–Ω! –¢–æ–≤–∞—Ä–æ–≤: ${categoryProducts.length}`,
      '‚úÖ –ì–æ—Ç–æ–≤–æ',
      5
    );
    
    logInfo('‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–π –ª–∏—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω', null, context);
    
  } catch (error) {
    logError('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–∏—Å—Ç–∞', error, context);
    SpreadsheetApp.getActiveSpreadsheet().toast(
      '–û—à–∏–±–∫–∞: ' + error.message,
      '‚ùå –û—à–∏–±–∫–∞',
      10
    );
    throw error;
  }
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ InSales
 */
function loadFullCategoryData(categoryId) {
  const context = `–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryId}`;
  
  try {
    logInfo('üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', null, context);
    
    const credentials = getInsalesCredentialsSync();
    if (!credentials) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ InSales');
    }
    
    const url = `${credentials.baseUrl}${CATEGORY_API_ENDPOINTS.COLLECTION_BY_ID.replace('{id}', categoryId)}`;
    
    const options = {
      method: 'GET',
      headers: {
        'Authorization': 'Basic ' + Utilities.base64Encode(`${credentials.apiKey}:${credentials.password}`),
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      },
      muteHttpExceptions: true
    };
    
    const response = UrlFetchApp.fetch(url, options);
    
    if (response.getResponseCode() !== 200) {
      throw new Error(`–û—à–∏–±–∫–∞ API: ${response.getResponseCode()}`);
    }
    
    const categoryData = JSON.parse(response.getContentText());
    
    logInfo('‚úÖ –î–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã', null, context);
    
    return categoryData;
    
  } catch (error) {
    logError('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', error, context);
    throw error;
  }
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
function loadCategoryProducts(categoryId) {
  const context = `–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryId}`;
  
  try {
    logInfo('üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', null, context);
    
    const credentials = getInsalesCredentialsSync();
    if (!credentials) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ InSales');
    }
    
    const allProducts = [];
    let page = 1;
    const perPage = 100;
    
    while (true) {
      const url = `${credentials.baseUrl}${CATEGORY_API_ENDPOINTS.COLLECTION_PRODUCTS.replace('{id}', categoryId)}&per_page=${perPage}&page=${page}`;
      
      const options = {
        method: 'GET',
        headers: {
          'Authorization': 'Basic ' + Utilities.base64Encode(`${credentials.apiKey}:${credentials.password}`),
          'Content-Type': 'application/json'
        },
        muteHttpExceptions: true
      };
      
      const response = UrlFetchApp.fetch(url, options);
      
      if (response.getResponseCode() !== 200) {
        break;
      }
      
      const products = JSON.parse(response.getContentText());
      
      if (!products || products.length === 0) {
        break;
      }
      
      allProducts.push(...products);
      
      if (products.length < perPage || page >= 10) {
        break;
      }
      
      page++;
      Utilities.sleep(300);
    }
    
    logInfo(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${allProducts.length}`, null, context);
    
    return allProducts;
    
  } catch (error) {
    logError('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', error, context);
    return [];
  }
}

/**
 * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –ª–∏—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ò–°–ü–†–ê–í–õ–ï–ù–û - –ü–†–ê–í–ò–õ–¨–ù–´–ï –ü–û–õ–Ø!)
 */
function setupDetailedCategorySheet(sheet, categoryData, products) {
  const context = "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–∏—Å—Ç–∞";
  
  try {
    console.log('üé® –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –ª–∏—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
    
    // –û—á–∏—â–∞–µ–º –ª–∏—Å—Ç
    sheet.clear();
    
    // ========================================
    // –°–ï–ö–¶–ò–Ø 1: –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–ê–¢–ï–ì–û–†–ò–ò
    // ========================================
    
    sheet.getRange('A1').setValue('üìÅ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–ê–¢–ï–ì–û–†–ò–ò')
         .setFontWeight('bold')
         .setFontSize(14)
         .setBackground('#1976d2')
         .setFontColor('#ffffff');
    sheet.getRange('A1:F1').merge();
    
    const infoData = [
      ['ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', categoryData.id],
      ['–ù–∞–∑–≤–∞–Ω–∏–µ:', categoryData.title],
      ['URL:', categoryData.url || categoryData.permalink],
      ['–ü—É—Ç—å –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏:', categoryData.path || '–ö–æ—Ä–Ω–µ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è'],
      ['', ''],
      ['–ú–∞—Ä–∫–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å:', '']
    ];
    
    sheet.getRange(2, 1, infoData.length, 2).setValues(infoData);
    sheet.getRange('A2:A7').setFontWeight('bold').setBackground('#f1f3f4');
    sheet.getRange('B2:B7').setWrap(true);
    
    // –°—Å—ã–ª–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∫—É InSales
    const adminLink = `https://myshop-on665.myinsales.ru/admin2/collections/${categoryData.id}`;
    sheet.getRange('A8').setValue('–ê–¥–º–∏–Ω–∫–∞ InSales:').setFontWeight('bold').setBackground('#f1f3f4');
    const adminCell = sheet.getRange('B8');
    adminCell.setValue(adminLink);
    adminCell.setFontColor('#1155cc');
    adminCell.setFontLine('underline');
    
    // –®–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
    sheet.setColumnWidth(1, 250);
    sheet.setColumnWidth(2, 500);
    
    // ========================================
    // –°–ï–ö–¶–ò–Ø 2: SEO –î–ê–ù–ù–´–ï (–ò–°–ü–†–ê–í–õ–ï–ù–û!)
    // ========================================
    
    sheet.getRange('A12').setValue('üéØ SEO –î–ê–ù–ù–´–ï')
         .setFontWeight('bold')
         .setFontSize(14)
         .setBackground('#4caf50')
         .setFontColor('#ffffff');
    sheet.getRange('A12:F12').merge();
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–∑–≤–ª–µ–∫–∞–µ–º H1 —á–µ—Ä–µ–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø–æ–ª–µ–π
    let h1Value = getFieldValueByName(categoryData, 'H1');

    // –ï—Å–ª–∏ H1 –Ω–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º html_title –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
    if (!h1Value || h1Value.trim() === '') {
      h1Value = categoryData.html_title || categoryData.title || '';
    }

    const seoData = [
      ['SEO Title:', categoryData.html_title || categoryData.title || ''],
      ['Meta Description:', categoryData.meta_description || ''],
      ['H1 –∑–∞–≥–æ–ª–æ–≤–æ–∫:', h1Value],
      ['–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:', categoryData.meta_keywords || '']
    ];
    
    sheet.getRange(13, 1, seoData.length, 2).setValues(seoData);
    sheet.getRange('A13:A16').setFontWeight('bold').setBackground('#f1f3f4');
    sheet.getRange('B13:B16').setWrap(true);
    
    // –û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    sheet.getRange('A17').setValue('–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:').setFontWeight('bold').setBackground('#f1f3f4');
    sheet.getRange('B17').setValue(categoryData.description || '').setWrap(true);
    sheet.setRowHeight(17, 150);
    
    // ========================================
    // –°–ï–ö–¶–ò–Ø 3: –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–û–í–ê–†–û–í
    // ========================================
    
    sheet.getRange('A20').setValue('üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–û–í–ê–†–û–í')
         .setFontWeight('bold')
         .setFontSize(14)
         .setBackground('#ff9800')
         .setFontColor('#ffffff');
    sheet.getRange('A20:F20').merge();
    
    const inStockCount = products.filter(p => 
      p.variants && p.variants.some(v => v.quantity && v.quantity > 0)
    ).length;
    
    const statsData = [
      ['–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤:', products.length],
      ['–í –Ω–∞–ª–∏—á–∏–∏:', inStockCount],
      ['–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏:', products.length - inStockCount],
      ['–ü—Ä–æ—Ü–µ–Ω—Ç –Ω–∞–ª–∏—á–∏—è:', products.length > 0 ? Math.round(inStockCount / products.length * 100) + '%' : '0%']
    ];
    
    sheet.getRange(21, 1, statsData.length, 2).setValues(statsData);
    sheet.getRange('A21:A24').setFontWeight('bold').setBackground('#f1f3f4');
    
    // ========================================
    // –°–ï–ö–¶–ò–Ø 4: –¢–ï–ö–£–©–ò–ï –¢–û–í–ê–†–´ (–ò–°–ü–†–ê–í–õ–ï–ù–û!)
    // ========================================
    
    sheet.getRange('A27').setValue('üõí –¢–ï–ö–£–©–ò–ï –¢–û–í–ê–†–´ –í –ö–ê–¢–ï–ì–û–†–ò–ò')
         .setFontWeight('bold')
         .setFontSize(14)
         .setBackground('#9c27b0')
         .setFontColor('#ffffff');
    sheet.getRange('A27:F27').merge();  // –ò–°–ü–†–ê–í–õ–ï–ù–û: —Ç–æ–ª—å–∫–æ –¥–æ F
    
const productHeaders = [
      '–ù–∞–∑–≤–∞–Ω–∏–µ', '–ê—Ä—Ç–∏–∫—É–ª', '–¶–µ–Ω–∞', '–í –Ω–∞–ª–∏—á–∏–∏', 'ID', '‚òëÔ∏è'
    ];
    
    sheet.getRange(28, 1, 1, productHeaders.length).setValues([productHeaders]);
    sheet.getRange(28, 1, 1, productHeaders.length)
         .setFontWeight('bold')
         .setBackground('#e1bee7')
         .setHorizontalAlignment('center');
    
    if (products.length > 0) {
      const productRows = products.map(product => {
        const variant = product.variants && product.variants[0];
        const inStock = variant && variant.quantity > 0 ? '–î–∞' : '–ù–µ—Ç';
        const price = variant ? variant.price : (product.price || '');
        
        return [
          product.title,                // A - –ù–∞–∑–≤–∞–Ω–∏–µ
          variant ? variant.sku : '',   // B - –ê—Ä—Ç–∏–∫—É–ª
          price || '',                   // C - –¶–µ–Ω–∞
          inStock,                      // D - –í –Ω–∞–ª–∏—á–∏–∏
          product.id,                   // E - ID
          false                         // F - –ß–µ–∫–±–æ–∫—Å
        ];
      });
      
      sheet.getRange(29, 1, productRows.length, productRows[0].length).setValues(productRows);
      sheet.getRange(29, 6, productRows.length, 1).insertCheckboxes();  // –ß–µ–∫–±–æ–∫—Å—ã –≤ –∫–æ–ª–æ–Ω–∫–µ F
      sheet.getRange(29, 3, productRows.length, 1).setNumberFormat('#,##0.00 ‚ÇΩ');  // –¶–µ–Ω–∞ –≤ –∫–æ–ª–æ–Ω–∫–µ C
      
      // –®–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
      sheet.setColumnWidth(1, 450);  // –ù–∞–∑–≤–∞–Ω–∏–µ
      sheet.setColumnWidth(2, 120);  // –ê—Ä—Ç–∏–∫—É–ª
      sheet.setColumnWidth(3, 100);  // –¶–µ–Ω–∞
      sheet.setColumnWidth(4, 100);  // –í –Ω–∞–ª–∏—á–∏–∏
      sheet.setColumnWidth(5, 100);  // ID
      sheet.setColumnWidth(6, 40);   // –ß–µ–∫–±–æ–∫—Å
    }
    
    // ========================================
    // –°–ï–ö–¶–ò–Ø 5: –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–û–õ–Ø –ö–ê–¢–ï–ì–û–†–ò–ò
    // ========================================

    const extraFieldsStartRow = 29 + products.length + 3;

    sheet.getRange(extraFieldsStartRow, 1).setValue('‚öôÔ∏è –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–û–õ–Ø –ö–ê–¢–ï–ì–û–†–ò–ò')
        .setFontWeight('bold')
        .setFontSize(14)
        .setBackground('#673ab7')
        .setFontColor('#ffffff');
    sheet.getRange(extraFieldsStartRow, 1, 1, 2).merge();

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø–æ–ª–µ–π
    const collectionFields = loadCollectionFieldsDictionary();
    const extraFieldsData = [];

    if (categoryData.field_values && Array.isArray(categoryData.field_values)) {
      for (let i = 0; i < categoryData.field_values.length; i++) {
        const fieldValue = categoryData.field_values[i];
        
        if (!fieldValue || !fieldValue.collection_field_id) continue;
        
        // –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
        const fieldInfo = collectionFields.find(f => f.id === fieldValue.collection_field_id);
        const fieldName = fieldInfo ? fieldInfo.title : `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ (ID: ${fieldValue.collection_field_id})`;
        
        // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
        let value = fieldValue.value || '';
        
        // –î–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –æ–±—Ä–µ–∑–∞–µ–º
        let displayValue = value.toString();
        if (displayValue.length > 100) {
          displayValue = displayValue.substring(0, 100) + '...';
        }
        
        extraFieldsData.push([
          fieldName + ':',
          displayValue || '(–ø—É—Å—Ç–æ)'
        ]);
      }
    }

    if (extraFieldsData.length > 0) {
      sheet.getRange(extraFieldsStartRow + 2, 1, extraFieldsData.length, 2).setValues(extraFieldsData);
      sheet.getRange(extraFieldsStartRow + 2, 1, extraFieldsData.length, 1)
          .setFontWeight('bold')
          .setBackground('#f1f3f4');
      sheet.getRange(extraFieldsStartRow + 2, 2, extraFieldsData.length, 1).setWrap(true);
    }

    console.log('‚úÖ –ü–æ–∫–∞–∑–∞–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π:', extraFieldsData.length);
    
    // ========================================
    // –°–ï–ö–¶–ò–Ø 6: –ü–õ–ò–¢–ö–ê –¢–ï–ì–û–í - –í–ï–†–•–ù–Ø–Ø
    // ========================================

    const topTagsStartRow = extraFieldsStartRow + 2 + extraFieldsData.length + 3;

    sheet.getRange(topTagsStartRow, 1).setValue('üè∑Ô∏è –ü–õ–ò–¢–ö–ê –¢–ï–ì–û–í - –í–ï–†–•–ù–Ø–Ø (–Ω–∞–¥ –æ–ø–∏—Å–∞–Ω–∏–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)')
        .setFontWeight('bold')
        .setFontSize(14)
        .setBackground('#00bcd4')
        .setFontColor('#ffffff');
    sheet.getRange(topTagsStartRow, 1, 1, 4).merge();

    sheet.getRange(topTagsStartRow + 1, 1).setValue('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:')
        .setFontWeight('bold')
        .setBackground('#e0f7fa');
    sheet.getRange(topTagsStartRow + 1, 2, 1, 3).merge()
        .setValue('–≠—Ç–∞ –ø–ª–∏—Ç–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ü–ï–†–ï–î –æ–ø–∏—Å–∞–Ω–∏–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É, —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤ HTML.')
        .setWrap(true)
        .setBackground('#e0f7fa');

    const topTagsHeaders = ['–¢–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏', 'URL', '–¶–µ–ª–µ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è', '–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ'];
    sheet.getRange(topTagsStartRow + 3, 1, 1, topTagsHeaders.length).setValues([topTagsHeaders]);
    sheet.getRange(topTagsStartRow + 3, 1, 1, topTagsHeaders.length)
        .setFontWeight('bold')
        .setBackground('#b2ebf2')
        .setHorizontalAlignment('center');

    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ß–∏—Ç–∞–µ–º HTML –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–ª—è —á–µ—Ä–µ–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫
    const topTagsHTML = getFieldValueByName(categoryData, '–ë–ª–æ–∫ —Å—Å—ã–ª–æ–∫ —Å–≤–µ—Ä—Ö—É');
    const topTags = parseTagsFromHTML(topTagsHTML);

    console.log(`üìã –ü–∞—Ä—Å–∏–Ω–≥ –≤–µ—Ä—Ö–Ω–∏—Ö —Ç–µ–≥–æ–≤: –Ω–∞–π–¥–µ–Ω–æ ${topTags.length} —Å—Å—ã–ª–æ–∫`);

    const topTagsData = [];
    for (let i = 0; i < 10; i++) {
      if (i < topTags.length) {
        topTagsData.push([topTags[i].text, topTags[i].url, '', '']);
      } else {
        topTagsData.push(['', '', '', '']);
      }
    }

    sheet.getRange(topTagsStartRow + 4, 1, topTagsData.length, topTagsData[0].length).setValues(topTagsData);

    // –®–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
    sheet.setColumnWidth(1, 300);  // –¢–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏
    sheet.setColumnWidth(2, 450);  // URL
    sheet.setColumnWidth(3, 200);  // –¶–µ–ª–µ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    sheet.setColumnWidth(4, 200);  // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ

    // ========================================
    // –°–ï–ö–¶–ò–Ø 7: –ü–õ–ò–¢–ö–ê –¢–ï–ì–û–í - –ù–ò–ñ–ù–Ø–Ø
    // ========================================

    const bottomTagsStartRow = topTagsStartRow + 4 + 10 + 3;

    sheet.getRange(bottomTagsStartRow, 1).setValue('üè∑Ô∏è –ü–õ–ò–¢–ö–ê –¢–ï–ì–û–í - –ù–ò–ñ–ù–Ø–Ø (–ø–æ–¥ –æ–ø–∏—Å–∞–Ω–∏–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)')
        .setFontWeight('bold')
        .setFontSize(14)
        .setBackground('#ff5722')
        .setFontColor('#ffffff');
    sheet.getRange(bottomTagsStartRow, 1, 1, 4).merge();

    sheet.getRange(bottomTagsStartRow + 1, 1).setValue('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:')
        .setFontWeight('bold')
        .setBackground('#ffe0db');
    sheet.getRange(bottomTagsStartRow + 1, 2, 1, 3).merge()
        .setValue('–≠—Ç–∞ –ø–ª–∏—Ç–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ü–û–°–õ–ï –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é.')
        .setWrap(true)
        .setBackground('#ffe0db');

    const bottomTagsHeaders = ['–¢–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏', 'URL', '–¶–µ–ª–µ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è', '–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ'];
    sheet.getRange(bottomTagsStartRow + 3, 1, 1, bottomTagsHeaders.length).setValues([bottomTagsHeaders]);
    sheet.getRange(bottomTagsStartRow + 3, 1, 1, bottomTagsHeaders.length)
        .setFontWeight('bold')
        .setBackground('#ffccbc')
        .setHorizontalAlignment('center');

    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ß–∏—Ç–∞–µ–º HTML –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–ª—è —á–µ—Ä–µ–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫
    const bottomTagsHTML = getFieldValueByName(categoryData, '–ë–ª–æ–∫ —Å—Å—ã–ª–æ–∫');
    const bottomTags = parseTagsFromHTML(bottomTagsHTML);

    console.log(`üìã –ü–∞—Ä—Å–∏–Ω–≥ –Ω–∏–∂–Ω–∏—Ö —Ç–µ–≥–æ–≤: –Ω–∞–π–¥–µ–Ω–æ ${bottomTags.length} —Å—Å—ã–ª–æ–∫`);

    const bottomTagsData = [];
    for (let i = 0; i < 10; i++) {
      if (i < bottomTags.length) {
        bottomTagsData.push([bottomTags[i].text, bottomTags[i].url, '', '']);
      } else {
        bottomTagsData.push(['', '', '', '']);
      }
    }

    sheet.getRange(bottomTagsStartRow + 4, 1, bottomTagsData.length, bottomTagsData[0].length).setValues(bottomTagsData);

    // –®–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫ (–ø–æ–≤—Ç–æ—Ä—è–µ–º –¥–ª—è –Ω–∏–∂–Ω–µ–π —Ç–∞–±–ª–∏—Ü—ã)
    sheet.setColumnWidth(1, 300);  // –¢–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏
    sheet.setColumnWidth(2, 450);  // URL
    sheet.setColumnWidth(3, 200);  // –¶–µ–ª–µ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    sheet.setColumnWidth(4, 200);  // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ

    console.log('‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–π –ª–∏—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–∏—Å—Ç–∞:', error);
    throw error;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ InSales —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
 */
function getInsalesCredentialsSync() {
  try {
    const config = getInsalesConfig();
    
    if (!config || !config.apiKey || !config.password || !config.shop) {
      throw new Error('–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ InSales –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ 01_config.gs');
    }
    
    return {
      apiKey: config.apiKey,
      password: config.password,
      shop: config.shop,
      baseUrl: config.baseUrl
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö InSales:', error);
    return null;
  }
}

/**
 * –¢–ï–°–¢: –ü–û–õ–ù–ê–Ø –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ field_values –∏–∑ InSales API
 */
function testCategoryDataFromAPI() {
  const categoryId = 9071624; // ID –≤–∞—à–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–¢–µ–∞—Ç—Ä–∞–ª—å–Ω—ã–µ"
  
  Logger.clear();
  Logger.log('=== –¢–ï–°–¢ –ó–ê–ì–†–£–ó–ö–ò –î–ê–ù–ù–´–• –ö–ê–¢–ï–ì–û–†–ò–ò ===');
  Logger.log(`ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categoryId}`);
  
  try {
    const credentials = getInsalesCredentialsSync();
    const url = `${credentials.baseUrl}/admin/collections/${categoryId}.json`;
    
    Logger.log(`URL: ${url}`);
    
    const response = UrlFetchApp.fetch(url, {
      method: 'GET',
      headers: {
        'Authorization': 'Basic ' + Utilities.base64Encode(`${credentials.apiKey}:${credentials.password}`),
        'Content-Type': 'application/json'
      },
      muteHttpExceptions: true
    });
    
    Logger.log(`HTTP —Å—Ç–∞—Ç—É—Å: ${response.getResponseCode()}`);
    
    if (response.getResponseCode() === 200) {
      const categoryData = JSON.parse(response.getContentText());
      
      Logger.log('\n=== –û–°–ù–û–í–ù–´–ï –ü–û–õ–Ø ===');
      Logger.log(`ID: ${categoryData.id}`);
      Logger.log(`title: ${categoryData.title}`);
      Logger.log(`html_title: ${categoryData.html_title}`);
      Logger.log(`meta_description: ${categoryData.meta_description}`);
      
      Logger.log('\n=== FIELD_VALUES (–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–û–õ–Ø) ===');
      
      if (!categoryData.field_values) {
        Logger.log('‚ùå field_values –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ API!');
      } else if (!Array.isArray(categoryData.field_values)) {
        Logger.log('‚ùå field_values –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º!');
        Logger.log(`–¢–∏–ø: ${typeof categoryData.field_values}`);
        Logger.log(`–ó–Ω–∞—á–µ–Ω–∏–µ: ${JSON.stringify(categoryData.field_values)}`);
      } else if (categoryData.field_values.length === 0) {
        Logger.log('‚ö†Ô∏è field_values –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ (–Ω–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π)');
      } else {
        Logger.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ field_values: ${categoryData.field_values.length} –ø–æ–ª–µ–π`);
        Logger.log('\n–ü–û–õ–ù–´–ô –°–ü–ò–°–û–ö FIELD_VALUES:');
        
        for (let i = 0; i < categoryData.field_values.length; i++) {
          const field = categoryData.field_values[i];
          Logger.log(`\n${i + 1}. ---------------------`);
          Logger.log(`   name: ${field.name || 'null'}`);
          Logger.log(`   title: ${field.title || 'null'}`);
          Logger.log(`   handle: ${field.handle || 'null'}`);
          Logger.log(`   value: ${field.value ? field.value.substring(0, 100) : 'null'}`);
          Logger.log(`   type: ${field.type || 'null'}`);
        }
      }
      
      Logger.log('\n=== –í–°–ï –ö–õ–Æ–ß–ò –í–ï–†–•–ù–ï–ì–û –£–†–û–í–ù–Ø ===');
      const allKeys = Object.keys(categoryData).sort();
      for (const key of allKeys) {
        const value = categoryData[key];
        if (typeof value === 'object' && value !== null) {
          Logger.log(`${key}: [${Array.isArray(value) ? 'array' : 'object'}]`);
        } else {
          Logger.log(`${key}: ${value}`);
        }
      }
      
      Logger.log('\n‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–Å–ù');
      
    } else {
      Logger.log('‚ùå –û–®–ò–ë–ö–ê –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
    }
    
  } catch (error) {
    Logger.log(`‚ùå –û–®–ò–ë–ö–ê: ${error.message}`);
  }
  
  const logOutput = Logger.getLog();
  SpreadsheetApp.getUi().showModalDialog(
    HtmlService.createHtmlOutput(`<pre style="font-family: monospace; font-size: 11px; white-space: pre-wrap;">${logOutput}</pre>`)
      .setWidth(900)
      .setHeight(700),
    '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ field_values'
  );
}

/**
 * –ü–∞—Ä—Å–∏—Ç –±–ª–æ–∫ —Å—Å—ã–ª–æ–∫ –∏–∑ HTML –≤ –º–∞—Å—Å–∏–≤ —Ç–µ–≥–æ–≤
 */
function parseTagsFromHTML(html) {
  if (!html || html.trim() === '') {
    return [];
  }
  
  const tags = [];
  
  try {
    // –ò—â–µ–º –≤—Å–µ <a> —Ç–µ–≥–∏
    const linkRegex = /<a[^>]*href=["']([^"']*)["'][^>]*>([^<]*)<\/a>/gi;
    let match;
    
    while ((match = linkRegex.exec(html)) !== null) {
      const url = match[1];
      const text = match[2];
      
      if (text && url) {
        tags.push({
          text: text.trim(),
          url: url.trim()
        });
      }
    }
    
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ —Ç–µ–≥–æ–≤: ${tags.length}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–≥–æ–≤:', error);
  }
  
  return tags;
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è –∏–∑ field_values
 */
function getFieldValueFromCategory(categoryData, fieldName) {
  if (!categoryData.field_values || !Array.isArray(categoryData.field_values)) {
    return null;
  }
  
  const field = categoryData.field_values.find(f => 
    f.name === fieldName || 
    f.handle === fieldName.toLowerCase().replace(/ /g, '_') ||
    f.title === fieldName
  );
  
  return field ? field.value : null;
}
/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø–æ–ª–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ InSales
 * –ö—ç—à–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Script Properties –Ω–∞ 24 —á–∞—Å–∞
 */
function loadCollectionFieldsDictionary() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    const cache = PropertiesService.getScriptProperties();
    const cachedData = cache.getProperty('collection_fields_cache');
    const cacheTime = cache.getProperty('collection_fields_cache_time');
    
    // –ï—Å–ª–∏ –∫—ç—à —Å–≤–µ–∂–∏–π (< 24 —á–∞—Å–æ–≤) - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if (cachedData && cacheTime) {
      const age = Date.now() - parseInt(cacheTime);
      if (age < 24 * 60 * 60 * 1000) {
        console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø–æ–ª–µ–π');
        return JSON.parse(cachedData);
      }
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –∏–∑ API
    console.log('üì• –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø–æ–ª–µ–π –∏–∑ InSales...');
    
    const credentials = getInsalesCredentialsSync();
    if (!credentials) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ InSales');
    }
    
    const url = `${credentials.baseUrl}/admin/collection_fields.json`;
    
    const response = UrlFetchApp.fetch(url, {
      method: 'GET',
      headers: {
        'Authorization': 'Basic ' + Utilities.base64Encode(`${credentials.apiKey}:${credentials.password}`),
        'Content-Type': 'application/json'
      },
      muteHttpExceptions: true
    });
    
    if (response.getResponseCode() !== 200) {
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞: ${response.getResponseCode()}`);
    }
    
    const fields = JSON.parse(response.getContentText());
    
    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª–µ–π: ${fields.length}`);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
    cache.setProperty('collection_fields_cache', JSON.stringify(fields));
    cache.setProperty('collection_fields_cache_time', Date.now().toString());
    
    return fields;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –ø–æ–ª–µ–π:', error);
    return [];
  }
}

/**
 * –ù–∞—Ö–æ–¥–∏—Ç ID –ø–æ–ª—è –ø–æ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—é
 */
function getFieldIdByName(fieldName) {
  try {
    const fields = loadCollectionFieldsDictionary();
    
    const field = fields.find(f => 
      f.title === fieldName || 
      f.name === fieldName ||
      f.handle === fieldName
    );
    
    return field ? field.id : null;
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ ID –ø–æ–ª—è "${fieldName}":`, error);
    return null;
  }
}

/**
 * –ù–∞—Ö–æ–¥–∏—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è –≤ categoryData –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø–æ–ª—è
 */
function getFieldValueByName(categoryData, fieldName) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    const fieldId = getFieldIdByName(fieldName);
    
    if (!fieldId) {
      console.warn(`‚ö†Ô∏è –ü–æ–ª–µ "${fieldName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ`);
      return '';
    }
    
    // –ò—â–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ field_values –ø–æ collection_field_id
    if (!categoryData.field_values || !Array.isArray(categoryData.field_values)) {
      return '';
    }
    
    const fieldValue = categoryData.field_values.find(fv => 
      fv.collection_field_id === fieldId
    );
    
    return fieldValue && fieldValue.value ? fieldValue.value : '';
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è "${fieldName}":`, error);
    return '';
  }
}

function testH1Reading() {
  const categoryId = 9171538;
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
  const categoryData = loadFullCategoryData(categoryId);
  
  // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å H1 –Ω–æ–≤—ã–º —Å–ø–æ—Å–æ–±–æ–º
  const h1Value = getFieldValueByName(categoryData, 'H1');
  
  console.log('=== –¢–ï–°–¢ –ß–¢–ï–ù–ò–Ø H1 ===');
  console.log('H1 –∏–∑ field_values:', h1Value);
  console.log('html_title:', categoryData.html_title);
  console.log('title:', categoryData.title);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ
  const finalH1 = h1Value && h1Value.trim() !== '' ? h1Value : (categoryData.html_title || categoryData.title);
  console.log('\n‚úÖ –ò—Ç–æ–≥–æ–≤—ã–π H1:', finalH1);
}