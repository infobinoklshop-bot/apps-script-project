/**
 * ============================================
 * –ú–û–î–£–õ–¨: –†–£–ß–ù–û–ï –°–û–ó–î–ê–ù–ò–ï –ü–õ–ò–¢–û–ö –¢–ï–ì–û–í
 * ============================================
 *
 * –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
 * 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
 * 2. –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
 * 3. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ç–µ–≥–æ–≤
 * 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –ø–ª–∏—Ç–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä—É—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 * 5. –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–π —Å–µ–∫—Ü–∏–π
 */

// ============================================
// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –¢–ê–ë–õ–ò–¶–´ –ö–õ–Æ–ß–ï–í–´–• –°–õ–û–í
// ============================================

/**
 * –°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ –¥–µ—Ç–∞–ª—å–Ω–æ–º –ª–∏—Å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–∏—Å—Ç–∞ –∏–ª–∏ –≤—Ä—É—á–Ω—É—é –∏–∑ –º–µ–Ω—é
 */
function initializeTagKeywordsTable() {
  const sheet = SpreadsheetApp.getActiveSheet();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ—Ç–∞–ª—å–Ω—ã–π –ª–∏—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const categoryId = sheet.getRange(DETAIL_SHEET_SECTIONS.CATEGORY_ID_CELL).getValue();
  if (!categoryId) {
    SpreadsheetApp.getUi().alert('–û—à–∏–±–∫–∞', '–≠—Ç–æ –Ω–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –ª–∏—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', SpreadsheetApp.getUi().ButtonSet.OK);
    return;
  }

  console.log('[INFO] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', categoryId);

  const startRow = DETAIL_SHEET_SECTIONS.TAG_KEYWORDS_START;
  const headerRow = DETAIL_SHEET_SECTIONS.TAG_KEYWORDS_HEADER_ROW;

  // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
  sheet.getRange(startRow, 1, 1, 7)
    .merge()
    .setValue('üìù –ö–õ–Æ–ß–ï–í–´–ï –°–õ–û–í–ê –î–õ–Ø –ü–õ–ò–¢–û–ö –¢–ï–ì–û–í (—Ä—É—á–Ω–æ–π –≤–≤–æ–¥)')
    .setBackground('#E8F0FE')
    .setFontWeight('bold')
    .setFontSize(12);

  // –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
  const headers = [
    '‚òëÔ∏è',                    // A: –ß–µ–∫–±–æ–∫—Å
    '–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ',        // B
    '–¢–∏–ø –ø–ª–∏—Ç–∫–∏',            // C
    '–¢–µ–∫—Å—Ç –∞–Ω–∫–æ—Ä–∞',          // D
    'URL/ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',      // E
    '–°—Ç–∞—Ç—É—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',      // F
    'ID —Ä–æ–¥–∏—Ç–µ–ª—è (–Ω–æ–≤–∞—è)'    // G
  ];

  const headerRange = sheet.getRange(headerRow, 1, 1, headers.length);
  headerRange.setValues([headers]);
  headerRange.setBackground('#D0E1F9');
  headerRange.setFontWeight('bold');
  headerRange.setHorizontalAlignment('center');

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤
  sheet.setColumnWidth(1, 40);   // –ß–µ–∫–±–æ–∫—Å
  sheet.setColumnWidth(2, 200);  // –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
  sheet.setColumnWidth(3, 120);  // –¢–∏–ø –ø–ª–∏—Ç–∫–∏
  sheet.setColumnWidth(4, 250);  // –¢–µ–∫—Å—Ç –∞–Ω–∫–æ—Ä–∞
  sheet.setColumnWidth(5, 150);  // URL/ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  sheet.setColumnWidth(6, 150);  // –°—Ç–∞—Ç—É—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  sheet.setColumnWidth(7, 120);  // ID —Ä–æ–¥–∏—Ç–µ–ª—è

  // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞ "–¢–∏–ø –ø–ª–∏—Ç–∫–∏"
  const dataStartRow = DETAIL_SHEET_SECTIONS.TAG_KEYWORDS_DATA_START;
  const tileTypeColumn = DETAIL_SHEET_SECTIONS.TAG_KEYWORDS_COLUMNS.TILE_TYPE;

  const tileTypeRange = sheet.getRange(dataStartRow, tileTypeColumn, 50, 1); // 50 —Å—Ç—Ä–æ–∫ –¥–ª—è –≤–≤–æ–¥–∞
  const tileTypeRule = SpreadsheetApp.newDataValidation()
    .requireValueInList(['–í–µ—Ä—Ö–Ω—è—è', '–ù–∏–∂–Ω—è—è'], true)
    .setAllowInvalid(false)
    .build();
  tileTypeRange.setDataValidation(tileTypeRule);

  // –î–æ–±–∞–≤–ª—è–µ–º —á–µ–∫–±–æ–∫—Å—ã –≤ –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü
  const checkboxColumn = DETAIL_SHEET_SECTIONS.TAG_KEYWORDS_COLUMNS.CHECKBOX;
  const checkboxRange = sheet.getRange(dataStartRow, checkboxColumn, 50, 1);
  checkboxRange.insertCheckboxes();

  // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É–ª—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Å—Ç–æ–ª–±–µ—Ü F)
  const statusColumn = DETAIL_SHEET_SECTIONS.TAG_KEYWORDS_COLUMNS.CATEGORY_STATUS;
  const categoryLinkColumn = DETAIL_SHEET_SECTIONS.TAG_KEYWORDS_COLUMNS.CATEGORY_LINK;

  for (let i = 0; i < 50; i++) {
    const row = dataStartRow + i;
    const linkCell = columnToLetter(categoryLinkColumn) + row;

    // –§–æ—Ä–º—É–ª–∞: –µ—Å–ª–∏ —è—á–µ–π–∫–∞ –ø—É—Å—Ç–∞—è - "–ù–µ —É–∫–∞–∑–∞–Ω–∞", –∏–Ω–∞—á–µ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å–∫—Ä–∏–ø—Ç–æ–º
    const formula = `=IF(ISBLANK(${linkCell}), "–ù–µ —É–∫–∞–∑–∞–Ω–∞", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å")`;
    sheet.getRange(row, statusColumn).setFormula(formula);
  }

  console.log('[SUCCESS] ‚úÖ –¢–∞–±–ª–∏—Ü–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
  SpreadsheetApp.getActiveSpreadsheet().toast('–¢–∞–±–ª–∏—Ü–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é', '‚úÖ –£—Å–ø–µ—Ö', 3);
}

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–±—Ü–∞ –≤ –±—É–∫–≤—É (1 ‚Üí A, 2 ‚Üí B, –∏ —Ç.–¥.)
 */
function columnToLetter(column) {
  let temp;
  let letter = '';
  while (column > 0) {
    temp = (column - 1) % 26;
    letter = String.fromCharCode(temp + 65) + letter;
    column = (column - temp - 1) / 26;
  }
  return letter;
}

// ============================================
// –†–ê–°–ß–ï–¢ –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–• –ü–û–ó–ò–¶–ò–ô
// ============================================

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –≤—Å–µ—Ö —Å–µ–∫—Ü–∏–π –≤ –¥–µ—Ç–∞–ª—å–Ω–æ–º –ª–∏—Å—Ç–µ
 * @param {Sheet} sheet - –õ–∏—Å—Ç Google Sheets
 * @returns {Object} –û–±—ä–µ–∫—Ç —Å –ø–æ–∑–∏—Ü–∏—è–º–∏ —Å–µ–∫—Ü–∏–π
 */
function calculateSheetSections(sheet) {
  // –ù–û–í–ê–Ø –ù–ê–î–Å–ñ–ù–ê–Ø –°–ò–°–¢–ï–ú–ê: –ò—â–µ–º —Å–µ–∫—Ü–∏–∏ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º –≤–º–µ—Å—Ç–æ —Ä–∞—Å—á—ë—Ç–∞ –æ—Ç—Å—Ç—É–ø–æ–≤
  const maxRow = Math.min(sheet.getLastRow(), 1000);

  let keywordsStart = DETAIL_SHEET_SECTIONS.TAG_KEYWORDS_DATA_START;
  let keywordsEnd = keywordsStart - 1;
  let upperTileStart = null;
  let lowerTileStart = null;
  let statsStart = null;
  let productsStart = null;

  // –°–∫–∞–Ω–∏—Ä—É–µ–º –ª–∏—Å—Ç –∏ –∏—â–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å–µ–∫—Ü–∏–π
  console.log(`[DEBUG calculateSections] –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ${maxRow} —Å—Ç—Ä–æ–∫...`);

  for (let row = 1; row <= maxRow; row++) {
    const cellValue = sheet.getRange(row, 1).getValue();
    if (!cellValue) continue;

    const text = cellValue.toString();

    // –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ "–ö–õ–Æ–ß–ï–í–´–ï –°–õ–û–í–ê –î–õ–Ø –ü–õ–ò–¢–û–ö"
    if (text.includes('–ö–õ–Æ–ß–ï–í–´–ï –°–õ–û–í–ê') && text.includes('–ü–õ–ò–¢–ö')) {
      keywordsStart = row + 2; // +2 = –∑–∞–≥–æ–ª–æ–≤–æ–∫ + –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ + –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ = –¥–∞–Ω–Ω—ã–µ
      console.log(`[DEBUG calculateSections] –°—Ç—Ä–æ–∫–∞ ${row}: –ù–∞–π–¥–µ–Ω—ã –ö–õ–Æ–ß–ï–í–´–ï –°–õ–û–í–ê`);
    }

    // –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ "–í–ï–†–•–ù–Ø–Ø –ü–õ–ò–¢–ö–ê"
    if (text.includes('–í–ï–†–•–ù') && text.includes('–ü–õ–ò–¢–ö')) {
      upperTileStart = row;
      console.log(`[DEBUG calculateSections] –°—Ç—Ä–æ–∫–∞ ${row}: –ù–∞–π–¥–µ–Ω–∞ –í–ï–†–•–ù–Ø–Ø –ü–õ–ò–¢–ö–ê`);
    }

    // –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ "–ù–ò–ñ–ù–Ø–Ø –ü–õ–ò–¢–ö–ê"
    if (text.includes('–ù–ò–ñ–ù') && text.includes('–ü–õ–ò–¢–ö')) {
      lowerTileStart = row;
      console.log(`[DEBUG calculateSections] –°—Ç—Ä–æ–∫–∞ ${row}: –ù–∞–π–¥–µ–Ω–∞ –ù–ò–ñ–ù–Ø–Ø –ü–õ–ò–¢–ö–ê`);
    }

    // –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ "–°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–û–í–ê–†–û–í"
    if (text.includes('–°–¢–ê–¢–ò–°–¢–ò–ö–ê') && text.includes('–¢–û–í–ê–†')) {
      statsStart = row;
      console.log(`[DEBUG calculateSections] –°—Ç—Ä–æ–∫–∞ ${row}: –ù–∞–π–¥–µ–Ω–∞ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–û–í–ê–†–û–í`);
    }

    // –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ "–¢–û–í–ê–†–´" –∏–ª–∏ "–¢–ï–ö–£–©–ò–ï –¢–û–í–ê–†–´"
    if ((text.includes('–¢–û–í–ê–†') || text.includes('PRODUCT')) && !text.includes('–ü–õ–ò–¢–ö') && !text.includes('–°–¢–ê–¢–ò–°–¢–ò–ö–ê')) {
      productsStart = row + 2; // +2 = –∑–∞–≥–æ–ª–æ–≤–æ–∫ + –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ = –¥–∞–Ω–Ω—ã–µ
      console.log(`[DEBUG calculateSections] –°—Ç—Ä–æ–∫–∞ ${row}: –ù–∞–π–¥–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¢–û–í–ê–†–´ (—Ç–µ–∫—Å—Ç: "${text}"), –¥–∞–Ω–Ω—ã–µ —Å ${productsStart}`);
      break; // –¢–æ–≤–∞—Ä—ã - –ø–æ—Å–ª–µ–¥–Ω—è—è —Å–µ–∫—Ü–∏—è
    }
  }

  // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
  const keywordColumn = DETAIL_SHEET_SECTIONS.TAG_KEYWORDS_COLUMNS.KEYWORD;
  for (let row = keywordsStart; row < keywordsStart + 100; row++) {
    const value = sheet.getRange(row, keywordColumn).getValue();
    if (value && value.toString().trim() !== '') {
      keywordsEnd = row;
    } else if (row > keywordsEnd + 5) {
      break;
    }
  }

  const keywordsCount = keywordsEnd - keywordsStart + 1;

  // Fallback –∑–Ω–∞—á–µ–Ω–∏—è, –µ—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
  if (upperTileStart === null) {
    upperTileStart = keywordsEnd + 3;
  }
  if (lowerTileStart === null) {
    lowerTileStart = upperTileStart + 12;
  }
  if (productsStart === null) {
    productsStart = lowerTileStart + 37;
  }

  console.log(`[DEBUG] –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —Å–µ–∫—Ü–∏–π:`, {
    keywordsStart,
    keywordsEnd,
    keywordsCount,
    upperTileStart,
    lowerTileStart,
    statsStart,
    productsStart
  });

  return {
    keywordsStart: keywordsStart,
    keywordsEnd: keywordsEnd,
    keywordsCount: Math.max(0, keywordsCount),
    upperTileStart: upperTileStart,
    lowerTileStart: lowerTileStart,
    statsStart: statsStart,
    productsStart: productsStart
  };
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏)
 */
function getProductsStartRow(sheet) {
  if (!sheet) {
    sheet = SpreadsheetApp.getActiveSheet();
  }
  const sections = calculateSheetSections(sheet);
  return sections.productsStart;
}

// ============================================
// –í–ê–õ–ò–î–ê–¶–ò–Ø –ò –ü–†–û–í–ï–†–ö–ê –ö–ê–¢–ï–ì–û–†–ò–ô
// ============================================

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π
 */
function validateTagKeywords() {
  const sheet = SpreadsheetApp.getActiveSheet();
  const categoryId = sheet.getRange(DETAIL_SHEET_SECTIONS.CATEGORY_ID_CELL).getValue();

  if (!categoryId) {
    SpreadsheetApp.getUi().alert('–û—à–∏–±–∫–∞', '–≠—Ç–æ –Ω–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –ª–∏—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', SpreadsheetApp.getUi().ButtonSet.OK);
    return;
  }

  SpreadsheetApp.getActiveSpreadsheet().toast('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...', '‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞', -1);
  console.log('[INFO] –ù–∞—á–∞–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤');

  const sections = calculateSheetSections(sheet);
  const dataStartRow = DETAIL_SHEET_SECTIONS.TAG_KEYWORDS_DATA_START;
  const dataEndRow = sections.keywordsEnd;

  if (dataEndRow < dataStartRow) {
    SpreadsheetApp.getActiveSpreadsheet().toast('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏', '‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ', 3);
    return;
  }

  const cols = DETAIL_SHEET_SECTIONS.TAG_KEYWORDS_COLUMNS;
  const rowCount = dataEndRow - dataStartRow + 1;

  // –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
  const dataRange = sheet.getRange(dataStartRow, 1, rowCount, 7);
  const data = dataRange.getValues();

  let checkedCount = 0;
  let existingCount = 0;
  let toCreateCount = 0;
  let emptyCount = 0;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
  for (let i = 0; i < data.length; i++) {
    const row = data[i];
    const keyword = row[cols.KEYWORD - 1];
    const categoryLink = row[cols.CATEGORY_LINK - 1];

    if (!keyword || keyword.toString().trim() === '') {
      continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    }

    checkedCount++;
    let status = '–ù–µ —É–∫–∞–∑–∞–Ω–∞';

    if (categoryLink && categoryLink.toString().trim() !== '') {
      const linkStr = categoryLink.toString().trim();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ ID –∏–ª–∏ URL
      if (/^\d+$/.test(linkStr)) {
        // –≠—Ç–æ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
        const categoryExists = checkCategoryExists(parseInt(linkStr));
        status = categoryExists ? '‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞';
        if (categoryExists) existingCount++;
      } else if (linkStr.includes('http')) {
        // –≠—Ç–æ URL - –∏–∑–≤–ª–µ–∫–∞–µ–º handle –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º
        status = 'üîó URL —É–∫–∞–∑–∞–Ω';
        existingCount++;
      } else {
        status = '‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç';
      }
    } else {
      status = '‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é';
      toCreateCount++;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ —Ç–∞–±–ª–∏—Ü–µ
    sheet.getRange(dataStartRow + i, cols.CATEGORY_STATUS).setValue(status);
  }

  console.log(`[SUCCESS] –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å—Ç—Ä–æ–∫: ${checkedCount}, –°—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö: ${existingCount}, –°–æ–∑–¥–∞—Ç—å: ${toCreateCount}`);

  SpreadsheetApp.getActiveSpreadsheet().toast(
    `–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: ${checkedCount} | –°—É—â–µ—Å—Ç–≤—É—é—Ç: ${existingCount} | –°–æ–∑–¥–∞—Ç—å: ${toCreateCount}`,
    '‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
    5
  );
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å –¥–∞–Ω–Ω—ã–º ID
 */
function checkCategoryExists(categoryId) {
  try {
    const config = getInsalesConfig();
    const url = `${config.baseUrl}/admin/collections/${categoryId}.json`;

    const response = UrlFetchApp.fetch(url, {
      method: 'get',
      headers: {
        'Authorization': 'Basic ' + Utilities.base64Encode(config.apiKey + ':' + config.password),
        'Content-Type': 'application/json'
      },
      muteHttpExceptions: true
    });

    return response.getResponseCode() === 200;
  } catch (error) {
    console.log(`[WARNING] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryId}:`, error.message);
    return false;
  }
}

// ============================================
// –°–û–ó–î–ê–ù–ò–ï –ù–û–í–´–• –ö–ê–¢–ï–ì–û–†–ò–ô –î–õ–Ø –¢–ï–ì–û–í
// ============================================

/**
 * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–µ–≥–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é"
 */
function createCategoriesForTags() {
  const sheet = SpreadsheetApp.getActiveSheet();
  const parentCategoryId = sheet.getRange(DETAIL_SHEET_SECTIONS.CATEGORY_ID_CELL).getValue();

  if (!parentCategoryId) {
    SpreadsheetApp.getUi().alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', SpreadsheetApp.getUi().ButtonSet.OK);
    return;
  }

  SpreadsheetApp.getActiveSpreadsheet().toast('–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...', '‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞', -1);
  console.log('[INFO] –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ç–µ–≥–æ–≤');

  const sections = calculateSheetSections(sheet);
  const dataStartRow = DETAIL_SHEET_SECTIONS.TAG_KEYWORDS_DATA_START;
  const dataEndRow = sections.keywordsEnd;

  if (dataEndRow < dataStartRow) {
    SpreadsheetApp.getActiveSpreadsheet().toast('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è', '‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ', 3);
    return;
  }

  const cols = DETAIL_SHEET_SECTIONS.TAG_KEYWORDS_COLUMNS;
  const rowCount = dataEndRow - dataStartRow + 1;
  const dataRange = sheet.getRange(dataStartRow, 1, rowCount, 7);
  const data = dataRange.getValues();

  let createdCount = 0;
  let errorCount = 0;

  // –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é"
  for (let i = 0; i < data.length; i++) {
    const row = data[i];
    const keyword = row[cols.KEYWORD - 1];
    const anchorText = row[cols.ANCHOR_TEXT - 1];
    const categoryLink = row[cols.CATEGORY_LINK - 1];
    const status = row[cols.CATEGORY_STATUS - 1];
    const customParentId = row[cols.PARENT_CATEGORY - 1];

    if (!keyword || keyword.toString().trim() === '') {
      continue;
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç—Ä–æ–∫ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é" –∏–ª–∏ –ø—É—Å—Ç—ã–º URL
    if (status && status.toString().includes('–°–æ–∑–¥–∞—Ç—å') || !categoryLink) {
      const categoryTitle = anchorText || keyword;
      const parentId = customParentId || parentCategoryId;

      console.log(`[INFO] –°–æ–∑–¥–∞—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é: "${categoryTitle}" —Å parent_id: ${parentId}`);

      try {
        const newCategory = createCategoryForTag(categoryTitle, parentId);

        if (newCategory && newCategory.id) {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
          sheet.getRange(dataStartRow + i, cols.CATEGORY_LINK).setValue(newCategory.id);
          sheet.getRange(dataStartRow + i, cols.CATEGORY_STATUS).setValue('‚úÖ –°–æ–∑–¥–∞–Ω–∞');
          createdCount++;

          console.log(`[SUCCESS] ‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞: ID ${newCategory.id}`);
        } else {
          sheet.getRange(dataStartRow + i, cols.CATEGORY_STATUS).setValue('‚ùå –û—à–∏–±–∫–∞');
          errorCount++;
        }
      } catch (error) {
        console.log(`[ERROR] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:`, error.message);
        sheet.getRange(dataStartRow + i, cols.CATEGORY_STATUS).setValue('‚ùå ' + error.message);
        errorCount++;
      }

      // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      Utilities.sleep(500);
    }
  }

  console.log(`[SUCCESS] –°–æ–∑–¥–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${createdCount}, –û—à–∏–±–æ–∫: ${errorCount}`);

  SpreadsheetApp.getActiveSpreadsheet().toast(
    `–°–æ–∑–¥–∞–Ω–æ: ${createdCount} | –û—à–∏–±–æ–∫: ${errorCount}`,
    '‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ',
    5
  );
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —á–µ—Ä–µ–∑ InSales API
 * @param {string} title - –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @param {number} parentId - ID —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @returns {Object} –î–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
function createCategoryForTag(title, parentId) {
  const config = getInsalesConfig();
  const url = `${config.baseUrl}/admin/collections.json`;

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º handle –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
  const handle = transliterate(title)
    .toLowerCase()
    .replace(/[^a-z0-9]+/g, '-')
    .replace(/^-|-$/g, '');

  const payload = {
    collection: {
      title: title,
      parent_id: parseInt(parentId) || 9069711, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–æ—Ä–Ω–µ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
      handle: handle,
      is_hidden: false,
      position: 999
    }
  };

  console.log('[DEBUG] Payload –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', JSON.stringify(payload, null, 2));

  const response = UrlFetchApp.fetch(url, {
    method: 'post',
    headers: {
      'Authorization': 'Basic ' + Utilities.base64Encode(config.apiKey + ':' + config.password),
      'Content-Type': 'application/json'
    },
    payload: JSON.stringify(payload),
    muteHttpExceptions: true
  });

  const responseCode = response.getResponseCode();
  const responseText = response.getContentText();

  if (responseCode === 201 || responseCode === 200) {
    return JSON.parse(responseText);
  } else {
    throw new Error(`HTTP ${responseCode}: ${responseText}`);
  }
}

// ============================================
// –ì–ï–ù–ï–†–ê–¶–ò–Ø –ü–õ–ò–¢–û–ö –ù–ê –û–°–ù–û–í–ï –†–£–ß–ù–´–• –î–ê–ù–ù–´–•
// ============================================

/**
 * –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–ª–∏—Ç–∫–∏ —Ç–µ–≥–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä—É—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
function generateTilesFromManualData() {
  const sheet = SpreadsheetApp.getActiveSheet();
  const categoryId = sheet.getRange(DETAIL_SHEET_SECTIONS.CATEGORY_ID_CELL).getValue();
  const categoryTitle = sheet.getRange(DETAIL_SHEET_SECTIONS.TITLE_CELL).getValue();

  if (!categoryId) {
    SpreadsheetApp.getUi().alert('–û—à–∏–±–∫–∞', '–≠—Ç–æ –Ω–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –ª–∏—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', SpreadsheetApp.getUi().ButtonSet.OK);
    return;
  }

  SpreadsheetApp.getActiveSpreadsheet().toast('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∏—Ç–æ–∫...', '‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞', -1);
  console.log('[INFO] –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∏—Ç–æ–∫ –∏–∑ —Ä—É—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö');

  // 1. –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
  const tilesData = readManualTilesData(sheet);

  if (tilesData.upper.length === 0 && tilesData.lower.length === 0) {
    SpreadsheetApp.getActiveSpreadsheet().toast(
      '–û—Ç–º–µ—Ç—å—Ç–µ —á–µ–∫–±–æ–∫—Å–∞–º–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏',
      '‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
      5
    );
    return;
  }

  console.log(`[INFO] –ù–∞–π–¥–µ–Ω–æ: ${tilesData.upper.length} –¥–ª—è –≤–µ—Ä—Ö–Ω–µ–π –ø–ª–∏—Ç–∫–∏, ${tilesData.lower.length} –¥–ª—è –Ω–∏–∂–Ω–µ–π`);

  // 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML
  const htmlResult = generateManualTilesHTML(tilesData, categoryTitle);

  // 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–∏—Å—Ç
  saveGeneratedTilesToSheet(sheet, htmlResult, tilesData);

  console.log('[SUCCESS] ‚úÖ –ü–ª–∏—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');

  SpreadsheetApp.getActiveSpreadsheet().toast(
    `–í–µ—Ä—Ö–Ω—è—è: ${tilesData.upper.length} –∞–Ω–∫–æ—Ä–æ–≤ | –ù–∏–∂–Ω—è—è: ${tilesData.lower.length} –∞–Ω–∫–æ—Ä–æ–≤`,
    '‚úÖ –ü–ª–∏—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω—ã',
    5
  );
}

/**
 * –ß–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
 */
function readManualTilesData(sheet) {
  const sections = calculateSheetSections(sheet);
  const dataStartRow = DETAIL_SHEET_SECTIONS.TAG_KEYWORDS_DATA_START;
  const dataEndRow = sections.keywordsEnd;

  const cols = DETAIL_SHEET_SECTIONS.TAG_KEYWORDS_COLUMNS;
  const rowCount = dataEndRow - dataStartRow + 1;

  if (rowCount <= 0) {
    return { upper: [], lower: [] };
  }

  const dataRange = sheet.getRange(dataStartRow, 1, rowCount, 7);
  const data = dataRange.getValues();

  const upperTile = [];
  const lowerTile = [];

  for (let i = 0; i < data.length; i++) {
    const row = data[i];
    const checked = row[cols.CHECKBOX - 1];
    const keyword = row[cols.KEYWORD - 1];
    const tileType = row[cols.TILE_TYPE - 1];
    const anchorText = row[cols.ANCHOR_TEXT - 1];
    const categoryLink = row[cols.CATEGORY_LINK - 1];
    const status = row[cols.CATEGORY_STATUS - 1];

    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ –∏–ª–∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    if (!checked || !keyword || keyword.toString().trim() === '') {
      continue;
    }

    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (!categoryLink || status.includes('–ù–µ —É–∫–∞–∑–∞–Ω–∞') || status.includes('–û—à–∏–±–∫–∞')) {
      console.log(`[WARNING] –ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ ${i + 1}: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞`);
      continue;
    }

    const anchor = {
      keyword: keyword.toString().trim(),
      anchor: anchorText ? anchorText.toString().trim() : keyword.toString().trim(),
      link: buildCategoryLink(categoryLink),
      category_id: extractCategoryId(categoryLink)
    };

    // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –ø–ª–∏—Ç–∫–∞–º
    if (tileType && tileType.toString().includes('–í–µ—Ä—Ö–Ω—è—è')) {
      upperTile.push(anchor);
    } else if (tileType && tileType.toString().includes('–ù–∏–∂–Ω—è—è')) {
      lowerTile.push(anchor);
    }
  }

  return { upper: upperTile, lower: lowerTile };
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ URL –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –Ω–∞–ø—Ä—è–º—É—é
 */
function extractCategoryId(categoryLink) {
  const linkStr = categoryLink.toString().trim();

  if (/^\d+$/.test(linkStr)) {
    return parseInt(linkStr);
  }

  // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å ID –∏–∑ URL
  const match = linkStr.match(/\/collection\/([^\/]+)/);
  if (match) {
    return match[1]; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º handle
  }

  return linkStr;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç URL –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ ID –∏–ª–∏ handle
 */
function buildCategoryLink(categoryLink) {
  const linkStr = categoryLink.toString().trim();

  // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ –ø–æ–ª–Ω—ã–π URL
  if (linkStr.includes('http')) {
    return linkStr;
  }

  // –ï—Å–ª–∏ —ç—Ç–æ ID - –ø–æ–ª—É—á–∞–µ–º handle –∏–∑ API
  if (/^\d+$/.test(linkStr)) {
    const handle = getCategoryHandle(parseInt(linkStr));
    return handle ? `/collection/${handle}` : '#';
  }

  // –ï—Å–ª–∏ —ç—Ç–æ handle
  if (linkStr.startsWith('/')) {
    return linkStr;
  }

  return `/collection/${linkStr}`;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç handle –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ ID
 */
function getCategoryHandle(categoryId) {
  try {
    const config = getInsalesConfig();
    const url = `${config.baseUrl}/admin/collections/${categoryId}.json`;

    const response = UrlFetchApp.fetch(url, {
      method: 'get',
      headers: {
        'Authorization': 'Basic ' + Utilities.base64Encode(config.apiKey + ':' + config.password),
        'Content-Type': 'application/json'
      },
      muteHttpExceptions: true
    });

    if (response.getResponseCode() === 200) {
      const data = JSON.parse(response.getContentText());
      return data.handle || data.url || data.id;
    }
  } catch (error) {
    console.log(`[WARNING] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å handle –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryId}`);
  }

  return null;
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML –¥–ª—è –ø–ª–∏—Ç–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä—É—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
function generateManualTilesHTML(tilesData, categoryTitle) {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HTML
  const result = {
    categoryName: categoryTitle,
    topTile: tilesData.upper,
    bottomTile: tilesData.lower
  };

  return generateTilesHTML(result);
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–ª–∏—Ç–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä—É—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
function showTilesPreviewManual() {
  const sheet = SpreadsheetApp.getActiveSheet();
  const categoryId = sheet.getRange(DETAIL_SHEET_SECTIONS.CATEGORY_ID_CELL).getValue();
  const categoryTitle = sheet.getRange(DETAIL_SHEET_SECTIONS.TITLE_CELL).getValue();

  if (!categoryId) {
    SpreadsheetApp.getUi().alert('–û—à–∏–±–∫–∞', '–≠—Ç–æ –Ω–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –ª–∏—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', SpreadsheetApp.getUi().ButtonSet.OK);
    return;
  }

  console.log('[INFO] –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–ª–∏—Ç–æ–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', categoryTitle);

  // –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
  const tilesData = readManualTilesData(sheet);

  if (tilesData.upper.length === 0 && tilesData.lower.length === 0) {
    SpreadsheetApp.getUi().alert(
      '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
      '–û—Ç–º–µ—Ç—å—Ç–µ —á–µ–∫–±–æ–∫—Å–∞–º–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞',
      SpreadsheetApp.getUi().ButtonSet.OK
    );
    return;
  }

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML
  const htmlResult = generateManualTilesHTML(tilesData, categoryTitle);

  // –°–æ–∑–¥–∞–µ–º HTML –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
  const cssStyles = generateTilesCSS();

  const previewHTML = `
    <!DOCTYPE html>
    <html>
      <head>
        <base target="_top">
        <style>
          body {
            font-family: Arial, sans-serif;
            margin: 20px;
            background: #f5f5f5;
          }
          .preview-container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
          }
          .preview-section {
            margin-bottom: 40px;
          }
          .preview-title {
            font-size: 18px;
            font-weight: bold;
            margin-bottom: 15px;
            color: #333;
          }
          .stats {
            background: #e3f2fd;
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 20px;
          }
          ${cssStyles}
        </style>
      </head>
      <body>
        <div class="preview-container">
          <h1>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–ª–∏—Ç–æ–∫ —Ç–µ–≥–æ–≤</h1>
          <p><strong>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</strong> ${categoryTitle}</p>

          <div class="stats">
            <strong>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</strong><br>
            –í–µ—Ä—Ö–Ω—è—è –ø–ª–∏—Ç–∫–∞: ${tilesData.upper.length} –∞–Ω–∫–æ—Ä–æ–≤<br>
            –ù–∏–∂–Ω—è—è –ø–ª–∏—Ç–∫–∞: ${tilesData.lower.length} –∞–Ω–∫–æ—Ä–æ–≤
          </div>

          <div class="preview-section">
            <div class="preview-title">üè∑Ô∏è –í–ï–†–•–ù–Ø–Ø –ü–õ–ò–¢–ö–ê (–ù–∞–≤–∏–≥–∞—Ü–∏—è)</div>
            ${htmlResult.topHTML || '<p style="color: #999;">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–µ—Ä—Ö–Ω–µ–π –ø–ª–∏—Ç–∫–∏</p>'}
          </div>

          <div class="preview-section">
            <div class="preview-title">üè∑Ô∏è –ù–ò–ñ–ù–Ø–Ø –ü–õ–ò–¢–ö–ê (SEO)</div>
            ${htmlResult.bottomHTML || '<p style="color: #999;">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∏–∂–Ω–µ–π –ø–ª–∏—Ç–∫–∏</p>'}
          </div>

          <button onclick="google.script.host.close()" style="
            padding: 10px 20px;
            background: #4285f4;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
          ">–ó–∞–∫—Ä—ã—Ç—å</button>
        </div>
      </body>
    </html>
  `;

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
  const htmlOutput = HtmlService.createHtmlOutput(previewHTML)
    .setWidth(1000)
    .setHeight(700);

  SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–ª–∏—Ç–∫–∏ —Ç–µ–≥–æ–≤');
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–ª–∏—Ç–∫–∏ –≤ –ª–∏—Å—Ç (–≤ –∫–æ–ª–æ–Ω–∫–∏ –°–¢–ê–õ–û: E-H)
 * –ù–∞—Ö–æ–¥–∏—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –±–ª–æ–∫–∏ –ø–ª–∏—Ç–æ–∫ –∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–∞–≤—É—é —á–∞—Å—Ç—å —Ç–∞–±–ª–∏—Ü—ã
 * –ß–∏—Ç–∞–µ—Ç —á–µ–∫–±–æ–∫—Å—ã –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å—Ç–∞—Ä—ã–µ + –Ω–æ–≤—ã–µ —Ç–µ–≥–∏ –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π HTML
 */
function saveGeneratedTilesToSheet(sheet, htmlResult, tilesData) {
  console.log('[INFO] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–ª–∏—Ç–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ë–´–õ–û/–°–¢–ê–õ–û');

  // –ò—â–µ–º –±–ª–æ–∫–∏ –ø–ª–∏—Ç–æ–∫ –≤ –ª–∏—Å—Ç–µ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
  const upperTileRow = findRowByText(sheet, 'üè∑Ô∏è –ü–õ–ò–¢–ö–ê –¢–ï–ì–û–í - –í–ï–†–•–ù–Ø–Ø');
  const lowerTileRow = findRowByText(sheet, 'üè∑Ô∏è –ü–õ–ò–¢–ö–ê –¢–ï–ì–û–í - –ù–ò–ñ–ù–Ø–Ø');

  if (!upperTileRow || !lowerTileRow) {
    throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω—ã –±–ª–æ–∫–∏ –ø–ª–∏—Ç–æ–∫ –≤ –¥–µ—Ç–∞–ª—å–Ω–æ–º –ª–∏—Å—Ç–µ. –ü–µ—Ä–µ—Å–æ–∑–¥–∞–π—Ç–µ –ª–∏—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.');
  }

  console.log(`[INFO] –ù–∞–π–¥–µ–Ω—ã –±–ª–æ–∫–∏: –í–µ—Ä—Ö–Ω—è—è –ø–ª–∏—Ç–∫–∞ - —Å—Ç—Ä–æ–∫–∞ ${upperTileRow}, –ù–∏–∂–Ω—è—è –ø–ª–∏—Ç–∫–∞ - —Å—Ç—Ä–æ–∫–∞ ${lowerTileRow}`);

  // === –í–ï–†–•–ù–Ø–Ø –ü–õ–ò–¢–ö–ê: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–ª–æ–Ω–∫–∏ E-H (–°–¢–ê–õ–û) ===
  const upperDataStartRow = upperTileRow + 4; // +4 = –∑–∞–≥–æ–ª–æ–≤–æ–∫ + –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è + –ø—É—Å—Ç–∞—è + –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤

  // –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ô –†–ê–°–ß–ï–¢: –Ω–∞—Ö–æ–¥–∏–º —Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ —É–∂–µ –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ
  const upperExistingRows = sheet.getRange(upperDataStartRow, 1, 50, 1).getValues().filter(row => row[0] !== '').length;
  const upperTotalRows = Math.max(upperExistingRows, tilesData.upper.length, 3); // –ú–∏–Ω–∏–º—É–º 3 —Å—Ç—Ä–æ–∫–∏

  // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö E-H (–°–¢–ê–õ–û)
  sheet.getRange(upperDataStartRow, 5, upperTotalRows, 4).clearContent();

  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
  for (let i = 0; i < Math.min(tilesData.upper.length, upperTotalRows); i++) {
    const anchor = tilesData.upper[i];
    const row = upperDataStartRow + i;

    sheet.getRange(row, 5, 1, 4).setValues([[
      anchor.anchor,                // E: –°–¢–ê–õ–û - –¢–µ–∫—Å—Ç –∞–Ω–∫–æ—Ä–∞
      anchor.link,                  // F: –°–¢–ê–õ–û - URL
      anchor.category_id || '',     // G: –°–¢–ê–õ–û - ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ'               // H: –°–¢–ê–õ–û - –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ
    ]]);
  }

  // –ß–∏—Ç–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–µ–≥–∏ —Å —á–µ–∫–±–æ–∫—Å–∞–º–∏ (–∫–æ–ª–æ–Ω–∫–∏ A, B, C) - –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò
  const upperOldData = sheet.getRange(upperDataStartRow, 1, upperTotalRows, 3).getValues();
  const upperOldTagsChecked = upperOldData
    .filter(row => row[2] === true && row[0] && row[1]) // –ß–µ–∫–±–æ–∫—Å –≤–∫–ª—é—á–µ–Ω –∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
    .map(row => ({
      text: row[0],
      url: row[1],
      anchor: row[0],
      link: row[1]
    }));

  console.log(`[INFO] –í–µ—Ä—Ö–Ω—è—è –ø–ª–∏—Ç–∫–∞: ${upperOldTagsChecked.length} —Å—Ç–∞—Ä—ã—Ö —Ç–µ–≥–æ–≤ –≤–∫–ª—é—á–µ–Ω–æ, ${tilesData.upper.length} –Ω–æ–≤—ã—Ö`);

  // === –ù–ò–ñ–ù–Ø–Ø –ü–õ–ò–¢–ö–ê: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–ª–æ–Ω–∫–∏ E-H (–°–¢–ê–õ–û) ===
  const lowerDataStartRow = lowerTileRow + 4;

  // –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ô –†–ê–°–ß–ï–¢: –Ω–∞—Ö–æ–¥–∏–º —Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ —É–∂–µ –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ
  const lowerExistingRows = sheet.getRange(lowerDataStartRow, 1, 100, 1).getValues().filter(row => row[0] !== '').length;
  const lowerTotalRows = Math.max(lowerExistingRows, tilesData.lower.length, 5); // –ú–∏–Ω–∏–º—É–º 5 —Å—Ç—Ä–æ–∫

  // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö E-H (–°–¢–ê–õ–û)
  sheet.getRange(lowerDataStartRow, 5, lowerTotalRows, 4).clearContent();

  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
  for (let i = 0; i < Math.min(tilesData.lower.length, lowerTotalRows); i++) {
    const anchor = tilesData.lower[i];
    const row = lowerDataStartRow + i;

    sheet.getRange(row, 5, 1, 4).setValues([[
      anchor.anchor,                // E: –°–¢–ê–õ–û - –¢–µ–∫—Å—Ç –∞–Ω–∫–æ—Ä–∞
      anchor.link,                  // F: –°–¢–ê–õ–û - URL
      anchor.category_id || '',     // G: –°–¢–ê–õ–û - ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ'               // H: –°–¢–ê–õ–û - –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ
    ]]);
  }

  // –ß–∏—Ç–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–µ–≥–∏ —Å —á–µ–∫–±–æ–∫—Å–∞–º–∏ (–∫–æ–ª–æ–Ω–∫–∏ A, B, C) - –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò
  const lowerOldData = sheet.getRange(lowerDataStartRow, 1, lowerTotalRows, 3).getValues();
  const lowerOldTagsChecked = lowerOldData
    .filter(row => row[2] === true && row[0] && row[1]) // –ß–µ–∫–±–æ–∫—Å –≤–∫–ª—é—á–µ–Ω –∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
    .map(row => ({
      text: row[0],
      url: row[1],
      anchor: row[0],
      link: row[1]
    }));

  console.log(`[INFO] –ù–∏–∂–Ω—è—è –ø–ª–∏—Ç–∫–∞: ${lowerOldTagsChecked.length} —Å—Ç–∞—Ä—ã—Ö —Ç–µ–≥–æ–≤ –≤–∫–ª—é—á–µ–Ω–æ, ${tilesData.lower.length} –Ω–æ–≤—ã—Ö`);

  // === –ì–ï–ù–ï–†–ò–†–£–ï–ú –§–ò–ù–ê–õ–¨–ù–´–ô HTML: –°—Ç–∞—Ä—ã–µ (–æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ) + –ù–æ–≤—ã–µ ===
  const finalUpperAnchors = [...upperOldTagsChecked, ...tilesData.upper];
  const finalLowerAnchors = [...lowerOldTagsChecked, ...tilesData.lower];

  const finalUpperHTML = generateTopTileHTML(finalUpperAnchors);
  const finalLowerHTML = generateBottomTileHTML(finalLowerAnchors);

  console.log(`[INFO] –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Ö–Ω—è—è –ø–ª–∏—Ç–∫–∞: ${finalUpperAnchors.length} —Ç–µ–≥–æ–≤`);
  console.log(`[INFO] –§–∏–Ω–∞–ª—å–Ω–∞—è –Ω–∏–∂–Ω—è—è –ø–ª–∏—Ç–∫–∞: ${finalLowerAnchors.length} —Ç–µ–≥–æ–≤`);

  // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π HTML –∫–æ–¥ –≤ –∫–æ–Ω–µ—Ü –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–∫–∞ - –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò
  // –í–µ—Ä—Ö–Ω—è—è –ø–ª–∏—Ç–∫–∞ - HTML –≤ —Å—Ç—Ä–æ–∫–µ –ø–æ—Å–ª–µ –¥–∞–Ω–Ω—ã—Ö
  const upperHTMLRow = upperDataStartRow + upperTotalRows + 1;
  console.log(`[DEBUG] –ó–∞–ø–∏—Å—ã–≤–∞–µ–º HTML –≤–µ—Ä—Ö–Ω–µ–π –ø–ª–∏—Ç–∫–∏ –≤ —Å—Ç—Ä–æ–∫—É ${upperHTMLRow} (–ø–æ—Å–ª–µ ${upperTotalRows} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö)`);

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ (–æ–Ω–æ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ –≤ setupDetailedCategorySheet)
  sheet.getRange(upperHTMLRow, 2, 1, 7)
    .merge()
    .setValue(finalUpperHTML)
    .setWrap(true)
    .setBackground('#c8e6c9');

  // –ù–∏–∂–Ω—è—è –ø–ª–∏—Ç–∫–∞ - HTML –≤ —Å—Ç—Ä–æ–∫–µ –ø–æ—Å–ª–µ –¥–∞–Ω–Ω—ã—Ö
  const lowerHTMLRow = lowerDataStartRow + lowerTotalRows + 1;
  console.log(`[DEBUG] –ó–∞–ø–∏—Å—ã–≤–∞–µ–º HTML –Ω–∏–∂–Ω–µ–π –ø–ª–∏—Ç–∫–∏ –≤ —Å—Ç—Ä–æ–∫—É ${lowerHTMLRow} (–ø–æ—Å–ª–µ ${lowerTotalRows} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö)`);

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ (–æ–Ω–æ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ –≤ setupDetailedCategorySheet)
  sheet.getRange(lowerHTMLRow, 2, 1, 7)
    .merge()
    .setValue(finalLowerHTML)
    .setWrap(true)
    .setBackground('#c8e6c9');

  console.log('[SUCCESS] ‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–µ HTML –∫–æ–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã (—Å—Ç–∞—Ä—ã–µ + –Ω–æ–≤—ã–µ —Ç–µ–≥–∏)');
}

/**
 * –ù–∞—Ö–æ–¥–∏—Ç —Å—Ç—Ä–æ–∫—É –ø–æ —Ç–µ–∫—Å—Ç—É –≤ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ
 * @param {Sheet} sheet - –õ–∏—Å—Ç Google Sheets
 * @param {string} searchText - –¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
 * @returns {number|null} –ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ null
 */
function findRowByText(sheet, searchText) {
  const maxRows = sheet.getMaxRows();
  const searchRange = sheet.getRange(1, 1, maxRows, 1);
  const values = searchRange.getValues();

  for (let i = 0; i < values.length; i++) {
    const cellValue = values[i][0];
    if (cellValue && cellValue.toString().includes(searchText)) {
      return i + 1; // +1 –ø–æ—Ç–æ–º—É —á—Ç–æ –º–∞—Å—Å–∏–≤ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0, –∞ —Å—Ç—Ä–æ–∫–∏ —Å 1
    }
  }

  return null;
}
