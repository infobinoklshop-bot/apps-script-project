/**
 * ========================================
 * –ú–û–î–£–õ–¨: –ê–ù–ê–õ–ò–ó –ü–õ–û–¢–ù–û–°–¢–ò –ö–õ–Æ–ß–ï–í–´–• –°–õ–û–í
 * ========================================
 *
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç
 * –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ (TF - Term Frequency)
 */

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≤–µ—Å—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @param {number} categoryId - ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @returns {Object} –û–±—ä–µ–∫—Ç —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 */
function getCategoryPageContent(categoryId) {
  const context = `–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryId}`;

  try {
    console.log('[INFO] –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', categoryId);

    const credentials = getInsalesCredentialsSync();
    if (!credentials) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ InSales');
    }

    // 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    const categoryUrl = `${credentials.baseUrl}/admin/collections/${categoryId}.json`;
    const categoryOptions = {
      method: 'GET',
      headers: {
        'Authorization': 'Basic ' + Utilities.base64Encode(`${credentials.apiKey}:${credentials.password}`),
        'Content-Type': 'application/json'
      },
      muteHttpExceptions: true
    };

    const categoryResponse = UrlFetchApp.fetch(categoryUrl, categoryOptions);

    if (categoryResponse.getResponseCode() !== 200) {
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categoryResponse.getResponseCode()}`);
    }

    const category = JSON.parse(categoryResponse.getContentText());

    // 2. –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è
    const textContent = {
      title: category.title || '',
      html_title: category.html_title || category.title || '',
      meta_description: category.meta_description || '',
      description: stripHtmlTags(category.description || ''),

      // –î–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      rawDescription: category.description || '',

      // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
      categoryId: categoryId,
      categoryName: category.title,
      url: category.url
    };

    // 3. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ø–µ—Ä–≤—ã–µ 20 –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞)
    console.log('[INFO] –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...');

    const productsUrl = `${credentials.baseUrl}/admin/products.json?collection_id=${categoryId}&per_page=20`;
    const productsResponse = UrlFetchApp.fetch(productsUrl, categoryOptions);

    if (productsResponse.getResponseCode() === 200) {
      const products = JSON.parse(productsResponse.getContentText());
      textContent.productTitles = products.map(p => p.title || '').filter(t => t);
      console.log('[INFO] –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤:', textContent.productTitles.length);
    } else {
      textContent.productTitles = [];
      console.log('[WARNING] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã');
    }

    console.log('[INFO] ‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω');

    return textContent;

  } catch (error) {
    console.error('[ERROR] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', error.message);
    throw error;
  }
}

/**
 * –£–¥–∞–ª—è–µ—Ç HTML —Ç–µ–≥–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
 * @param {string} html - HTML —Ç–µ–∫—Å—Ç
 * @returns {string} –ß–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç
 */
function stripHtmlTags(html) {
  if (!html) return '';

  // –£–¥–∞–ª—è–µ–º script –∏ style –±–ª–æ–∫–∏
  let text = html.replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, ' ');
  text = text.replace(/<style\b[^<]*(?:(?!<\/style>)<[^<]*)*<\/style>/gi, ' ');

  // –ó–∞–º–µ–Ω—è–µ–º <br>, <p>, <div> –Ω–∞ –ø—Ä–æ–±–µ–ª—ã
  text = text.replace(/<br\s*\/?>/gi, ' ');
  text = text.replace(/<\/p>/gi, ' ');
  text = text.replace(/<\/div>/gi, ' ');

  // –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏
  text = text.replace(/<[^>]+>/g, ' ');

  // –î–µ–∫–æ–¥–∏—Ä—É–µ–º HTML entities
  text = text.replace(/&nbsp;/gi, ' ');
  text = text.replace(/&quot;/gi, '"');
  text = text.replace(/&amp;/gi, '&');
  text = text.replace(/&lt;/gi, '<');
  text = text.replace(/&gt;/gi, '>');

  // –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
  text = text.replace(/\s+/g, ' ');

  return text.trim();
}

/**
 * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –µ–¥–∏–Ω—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
 * @param {Object} contentData - –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 * @returns {string} –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
 */
function combineContentText(contentData) {
  const parts = [
    contentData.title,
    contentData.html_title,
    contentData.meta_description,
    contentData.description,
    (contentData.productTitles || []).join(' ')
  ];

  return parts.filter(p => p).join(' ').toLowerCase();
}

/**
 * –¢–æ–∫–µ–Ω–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç (—Ä–∞–∑–±–∏–≤–∞–µ—Ç –Ω–∞ —Å–ª–æ–≤–∞)
 * @param {string} text - –¢–µ–∫—Å—Ç –¥–ª—è —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏–∏
 * @returns {Array<string>} –ú–∞—Å—Å–∏–≤ —Å–ª–æ–≤
 */
function tokenizeText(text) {
  // –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Å–ª–æ–≤–∞–º
  return text
    .toLowerCase()
    .replace(/[^\u0400-\u04FFa-z0-9\s-]/g, ' ') // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã
    .split(/\s+/)
    .filter(word => word.length > 1); // –£–±–∏—Ä–∞–µ–º —Å–ª–æ–≤–∞ –∏–∑ 1 —Å–∏–º–≤–æ–ª–∞
}

/**
 * –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–∂–¥–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞/—Ñ—Ä–∞–∑—ã –≤ —Ç–µ–∫—Å—Ç–µ
 * @param {string} text - –¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
 * @param {string} keyword - –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑–∞
 * @returns {number} –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–∂–¥–µ–Ω–∏–π
 */
function countKeywordOccurrences(text, keyword) {
  const normalizedText = text.toLowerCase();
  const normalizedKeyword = keyword.toLowerCase().trim();

  // –ï—Å–ª–∏ —ç—Ç–æ —Ñ—Ä–∞–∑–∞ (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤)
  if (normalizedKeyword.includes(' ')) {
    const regex = new RegExp(normalizedKeyword.replace(/\s+/g, '\\s+'), 'gi');
    const matches = normalizedText.match(regex);
    return matches ? matches.length : 0;
  }

  // –ï—Å–ª–∏ —ç—Ç–æ –æ–¥–Ω–æ —Å–ª–æ–≤–æ - –∏—â–µ–º –∫–∞–∫ —Ü–µ–ª–æ–µ —Å–ª–æ–≤–æ (word boundary)
  const regex = new RegExp(`\\b${normalizedKeyword}\\b`, 'gi');
  const matches = normalizedText.match(regex);
  return matches ? matches.length : 0;
}

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
 * @param {number} categoryId - ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @param {Array<Object>} keywords - –ú–∞—Å—Å–∏–≤ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ [{keyword, type}]
 * @returns {Object} –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
 */
function analyzeKeywordDensity(categoryId, keywords) {
  const context = `–ê–Ω–∞–ª–∏–∑ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryId}`;

  try {
    console.log('[INFO] üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤');
    console.log('[INFO] –ö–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:', keywords.length);

    // 1. –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const contentData = getCategoryPageContent(categoryId);
    const fullText = combineContentText(contentData);

    // 2. –¢–æ–∫–µ–Ω–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    const tokens = tokenizeText(fullText);
    const totalWords = tokens.length;

    console.log('[INFO] –í—Å–µ–≥–æ —Å–ª–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:', totalWords);

    if (totalWords === 0) {
      throw new Error('–ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
    }

    // 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
    const results = [];
    const config = TAG_TILES_CONFIG.DENSITY_THRESHOLDS;

    keywords.forEach(kwData => {
      const keyword = kwData.keyword || kwData;
      const type = kwData.type || 'ADDITIONAL';

      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ö–æ–∂–¥–µ–Ω–∏—è
      const occurrences = countKeywordOccurrences(fullText, keyword);

      // –í—ã—á–∏—Å–ª—è–µ–º TF –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
      const tfPercent = (occurrences / totalWords) * 100;

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—ã–µ –ø–æ—Ä–æ–≥–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
      let targetMin, targetMax;

      if (type === 'MAIN_KEYWORD' || type === '–¶–µ–ª–µ–≤–æ–π') {
        targetMin = config.MAIN_KEYWORD.min;
        targetMax = config.MAIN_KEYWORD.max;
      } else if (type === 'LSI' || type === '–¢–µ–º–∞—Ç–∏–∫–∞') {
        targetMin = config.LSI.min;
        targetMax = config.LSI.max;
      } else {
        targetMin = config.ADDITIONAL.min;
        targetMax = config.ADDITIONAL.max;
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
      let status;
      if (tfPercent > config.SPAM_THRESHOLD) {
        status = '‚ö†Ô∏è –ü–µ—Ä–µ—Å–ø–∞–º';
      } else if (tfPercent >= targetMin && tfPercent <= targetMax) {
        status = '‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ';
      } else if (tfPercent < targetMin) {
        status = '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ';
      } else {
        status = '‚ö†Ô∏è –ú–Ω–æ–≥–æ';
      }

      results.push({
        keyword: keyword,
        type: type,
        occurrences: occurrences,
        totalWords: totalWords,
        tfPercent: parseFloat(tfPercent.toFixed(2)),
        targetMin: targetMin,
        targetMax: targetMax,
        status: status
      });
    });

    console.log('[INFO] ‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤:', results.length);

    // 4. –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const summary = {
      categoryId: categoryId,
      categoryName: contentData.categoryName,
      totalWords: totalWords,
      analyzedKeywords: results.length,

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      sufficient: results.filter(r => r.status === '‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ').length,
      insufficient: results.filter(r => r.status === '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ').length,
      overspam: results.filter(r => r.status === '‚ö†Ô∏è –ü–µ—Ä–µ—Å–ø–∞–º').length,
      tooMany: results.filter(r => r.status === '‚ö†Ô∏è –ú–Ω–æ–≥–æ').length,

      // –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      results: results,

      // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
      analyzedAt: new Date(),
      contentData: contentData
    };

    return summary;

  } catch (error) {
    console.error('[ERROR] –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏:', error.message);
    throw error;
  }
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤ –ª–∏—Å—Ç "–ê–Ω–∞–ª–∏–∑ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏"
 * @param {Object} analysisResult - –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
 */
function saveDensityAnalysisToSheet(analysisResult) {
  try {
    console.log('[INFO] üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏');

    const ss = SpreadsheetApp.getActiveSpreadsheet();
    let sheet = ss.getSheetByName(TAG_TILES_CONFIG.DENSITY_ANALYSIS_SHEET);

    // –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!sheet) {
      sheet = ss.insertSheet(TAG_TILES_CONFIG.DENSITY_ANALYSIS_SHEET);
      setupDensityAnalysisSheet(sheet);
    }

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const data = sheet.getDataRange().getValues();
    const categoryId = analysisResult.categoryId;

    for (let i = data.length - 1; i >= 1; i--) {
      if (data[i][DENSITY_ANALYSIS_COLUMNS.CATEGORY_ID - 1] == categoryId) {
        sheet.deleteRow(i + 1);
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    const rows = analysisResult.results.map(r => [
      analysisResult.categoryId,
      analysisResult.categoryName,
      r.keyword,
      r.type,
      r.occurrences,
      r.totalWords,
      r.tfPercent,
      r.targetMin,
      r.targetMax,
      r.status,
      '–ù–µ—Ç',           // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –≤ –ø–ª–∏—Ç–∫–µ
      '',              // –ê–Ω–∫–æ—Ä
      new Date()       // –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞
    ]);

    if (rows.length > 0) {
      sheet.getRange(sheet.getLastRow() + 1, 1, rows.length, rows[0].length).setValues(rows);

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      const tfColumn = DENSITY_ANALYSIS_COLUMNS.TF_PERCENT;
      sheet.getRange(sheet.getLastRow() - rows.length + 1, tfColumn, rows.length, 1)
        .setNumberFormat('0.00%');
    }

    console.log('[INFO] ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:', rows.length);

  } catch (error) {
    console.error('[ERROR] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞:', error.message);
    throw error;
  }
}

/**
 * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–∏—Å—Ç "–ê–Ω–∞–ª–∏–∑ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏"
 * @param {Sheet} sheet - –õ–∏—Å—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
 */
function setupDensityAnalysisSheet(sheet) {
  sheet.clear();

  const headers = [
    'ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
    '–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
    '–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ',
    '–¢–∏–ø',
    '–í—Ö–æ–∂–¥–µ–Ω–∏–π',
    '–í—Å–µ–≥–æ —Å–ª–æ–≤',
    'TF%',
    '–ú–∏–Ω%',
    '–ú–∞–∫—Å%',
    '–°—Ç–∞—Ç—É—Å',
    '–í –ø–ª–∏—Ç–∫–µ',
    '–ê–Ω–∫–æ—Ä',
    '–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞'
  ];

  sheet.getRange(1, 1, 1, headers.length).setValues([headers]);

  const headerRange = sheet.getRange(1, 1, 1, headers.length);
  headerRange.setBackground('#2196f3')
             .setFontColor('#ffffff')
             .setFontWeight('bold')
             .setHorizontalAlignment('center');

  sheet.setColumnWidth(1, 100);   // ID
  sheet.setColumnWidth(2, 200);   // –ö–∞—Ç–µ–≥–æ—Ä–∏—è
  sheet.setColumnWidth(3, 250);   // –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
  sheet.setColumnWidth(4, 120);   // –¢–∏–ø
  sheet.setColumnWidth(5, 80);    // –í—Ö–æ–∂–¥–µ–Ω–∏–π
  sheet.setColumnWidth(6, 100);   // –í—Å–µ–≥–æ —Å–ª–æ–≤
  sheet.setColumnWidth(7, 80);    // TF%
  sheet.setColumnWidth(8, 60);    // –ú–∏–Ω%
  sheet.setColumnWidth(9, 60);    // –ú–∞–∫—Å%
  sheet.setColumnWidth(10, 150);  // –°—Ç–∞—Ç—É—Å
  sheet.setColumnWidth(11, 80);   // –í –ø–ª–∏—Ç–∫–µ
  sheet.setColumnWidth(12, 200);  // –ê–Ω–∫–æ—Ä
  sheet.setColumnWidth(13, 150);  // –î–∞—Ç–∞

  sheet.setFrozenRows(1);

  console.log('[INFO] ‚úÖ –õ–∏—Å—Ç "–ê–Ω–∞–ª–∏–∑ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏" –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –ª–∏—Å—Ç–∞ "–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞"
 * @param {number} categoryId - ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @returns {Array<Object>} –ú–∞—Å—Å–∏–≤ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
 */
function getKeywordsForCategory(categoryId) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(CATEGORY_SHEETS.KEYWORDS);

    if (!sheet) {
      console.log('[WARNING] –õ–∏—Å—Ç "–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞" –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return [];
    }

    const data = sheet.getDataRange().getValues();
    const keywords = [];

    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    for (let i = 1; i < data.length; i++) {
      const row = data[i];

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∫–æ–ª–æ–Ω–∫–∞ A)
      if (row[0] == categoryId) {
        keywords.push({
          keyword: row[2],        // –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
          frequency: row[3],      // –ß–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å
          type: row[5] || 'ADDITIONAL'  // –¢–∏–ø
        });
      }
    }

    console.log('[INFO] –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', keywords.length);

    return keywords;

  } catch (error) {
    console.error('[ERROR] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤:', error.message);
    return [];
  }
}

/**
 * –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
 * @param {number} categoryId - ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @returns {Object} –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
 */
function runKeywordDensityAnalysis(categoryId) {
  try {
    SpreadsheetApp.getActiveSpreadsheet().toast(
      '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤...',
      'üîç –ê–Ω–∞–ª–∏–∑',
      -1
    );

    // 1. –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    const keywords = getKeywordsForCategory(categoryId);

    if (keywords.length === 0) {
      throw new Error('–î–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ –ª–∏—Å—Ç "–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞".');
    }

    // 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–æ—Ç–Ω–æ—Å—Ç—å
    const analysisResult = analyzeKeywordDensity(categoryId, keywords);

    // 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    saveDensityAnalysisToSheet(analysisResult);

    // 4. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    SpreadsheetApp.getActiveSpreadsheet().toast(
      `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${analysisResult.analyzedKeywords} —Å–ª–æ–≤
–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ: ${analysisResult.insufficient}
–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ: ${analysisResult.sufficient}
–ü–µ—Ä–µ—Å–ø–∞–º: ${analysisResult.overspam}`,
      '‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω',
      10
    );

    return analysisResult;

  } catch (error) {
    console.error('[ERROR] –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error.message);

    SpreadsheetApp.getActiveSpreadsheet().toast(
      '–û—à–∏–±–∫–∞: ' + error.message,
      '‚ùå –û—à–∏–±–∫–∞',
      10
    );

    throw error;
  }
}

/**
 * –¢–ï–°–¢–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ê–Ω–∞–ª–∏–∑ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ë–∏–Ω–æ–∫–ª–∏
 */
function testDensityAnalysis() {
  const categoryId = 9175197; // –ë–∏–Ω–æ–∫–ª–∏
  const result = runKeywordDensityAnalysis(categoryId);

  console.log('=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê ===');
  console.log('–ö–∞—Ç–µ–≥–æ—Ä–∏—è:', result.categoryName);
  console.log('–í—Å–µ–≥–æ —Å–ª–æ–≤:', result.totalWords);
  console.log('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ:', result.insufficient);
  console.log('–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ:', result.sufficient);
  console.log('–ü–µ—Ä–µ—Å–ø–∞–º:', result.overspam);

  return result;
}
