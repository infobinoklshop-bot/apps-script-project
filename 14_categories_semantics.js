/**
 * ========================================
 * –ú–û–î–£–õ–¨: –°–ï–ú–ê–ù–¢–ò–ö–ê + LSI + –¢–ï–ú–ê–¢–ò–ö–ê
 * ========================================
 */

// –°–ö–û–ü–ò–†–£–ô–¢–ï –°–Æ–î–ê –ò–ó –û–°–ù–û–í–ù–û–ì–û –ö–û–î–ê:
// - configureSemanticsAPI()
// - showManualSemanticsAPISetup()
// - saveSemanticsAPISettings()
// - collectKeywordsForCategory()
// - generateBaseQueries()
// - fetchKeywordsFromAPI()
// - fetchKeywordsFromSerpstat()
// - deduplicateKeywords()
// - saveKeywordsToSheet()

// ========================================
// –ù–û–í–´–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ: LSI –ò –¢–ï–ú–ê–¢–ò–ö–ê
// ========================================

/**
 * –°–æ–∑–¥–∞–µ—Ç –ª–∏—Å—Ç LSI –∏ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–ª–æ–≤
 */
function setupLSISheet(sheet) {
  sheet.clear();
  
  const headers = [
    '–ö–∞—Ç–µ–≥–æ—Ä–∏—è ID',
    '–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
    '–°–ª–æ–≤–æ/—Ñ—Ä–∞–∑–∞',
    '–¢–∏–ø',  // LSI, –¢–µ–º–∞—Ç–∏–∫–∞, –°–∏–Ω–æ–Ω–∏–º
    '–ò—Å—Ç–æ—á–Ω–∏–∫',  // OpenAI, API, –†—É—á–Ω–æ–π
    '–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å',
    '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ',
    '–ì–¥–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ'
  ];
  
  sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
  
  const headerRange = sheet.getRange(1, 1, 1, headers.length);
  headerRange.setBackground('#9c27b0')
             .setFontColor('#ffffff')
             .setFontWeight('bold')
             .setHorizontalAlignment('center');
  
  sheet.setColumnWidth(1, 100);
  sheet.setColumnWidth(2, 200);
  sheet.setColumnWidth(3, 250);
  sheet.setColumnWidth(4, 120);
  sheet.setColumnWidth(5, 120);
  sheet.setColumnWidth(6, 100);
  sheet.setColumnWidth(7, 120);
  sheet.setColumnWidth(8, 200);
  
  sheet.setFrozenRows(1);
  
  logInfo('‚úÖ –õ–∏—Å—Ç LSI –∏ —Ç–µ–º–∞—Ç–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
}

/**
 * –°–æ–±–∏—Ä–∞–µ—Ç LSI –∏ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ AI
 */
function collectLSIAndThematicWords(categoryData, keywords) {
  const context = `–°–±–æ—Ä LSI –¥–ª—è ${categoryData.title}`;
  
  try {
    logInfo('üîç –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä LSI –∏ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–ª–æ–≤ —á–µ—Ä–µ–∑ AI', null, context);
    
    SpreadsheetApp.getActiveSpreadsheet().toast(
      'AI —Å–æ–±–∏—Ä–∞–µ—Ç LSI –∏ —Ç–µ–º–∞—Ç–∏–∫—É...',
      '‚è≥ –ê–Ω–∞–ª–∏–∑',
      -1
    );
    
    const apiKey = getSetting('openaiApiKey');
    
    if (!apiKey) {
      throw new Error('OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–ª—é—á–µ–≤–∏–∫–æ–≤
    const mainKeywords = keywords
      .slice(0, 20)
      .map(kw => kw.keyword)
      .join(', ');
    
    const prompt = `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ SEO –∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–º—É –∞–Ω–∞–ª–∏–∑—É —Ç–µ–∫—Å—Ç–æ–≤.

–ó–ê–î–ê–ß–ê: –ü–æ–¥–æ–±—Ä–∞—Ç—å LSI-—Å–ª–æ–≤–∞ –∏ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞.

–ö–ê–¢–ï–ì–û–†–ò–Ø: ${categoryData.title}
–ü–£–¢–¨: ${categoryData.path || '–ö–æ—Ä–Ω–µ–≤–∞—è'}

–û–°–ù–û–í–ù–´–ï –ö–õ–Æ–ß–ï–í–´–ï –°–õ–û–í–ê:
${mainKeywords}

–¢–†–ï–ë–£–ï–¢–°–Ø:

1. **LSI-—Å–ª–æ–≤–∞** (Latent Semantic Indexing):
   - –°–ª–æ–≤–∞ –∏ —Ñ—Ä–∞–∑—ã, —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–ª—é—á–µ–≤–∏–∫–∞–º–∏
   - –°–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –æ–±—ã—á–Ω–æ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –≤ —Ç–µ–∫—Å—Ç–∞—Ö –Ω–∞ —ç—Ç—É —Ç–µ–º—É
   - –°–∏–Ω–æ–Ω–∏–º—ã –∏ –≤–∞—Ä–∏–∞—Ü–∏–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏—è
   - –ü—Ä–∏–º–µ—Ä—ã: –¥–ª—è "–±–∏–Ω–æ–∫–ª—å" ‚Üí "–æ–ø—Ç–∏–∫–∞", "—É–≤–µ–ª–∏—á–µ–Ω–∏–µ", "–æ–±—ä–µ–∫—Ç–∏–≤", "–ø—Ä–∏–∑–º–∞"

2. **–¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã**:
   - –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –Ω–∏—à–∏ —Ç–µ—Ä–º–∏–Ω—ã –∏ –∂–∞—Ä–≥–æ–Ω
   - –ù–∞–∑–≤–∞–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
   - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
   - –ù–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–æ–≤ –∏ –≤–∏–¥–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤
   - –ü—Ä–∏–º–µ—Ä—ã: –¥–ª—è –±–∏–Ω–æ–∫–ª–µ–π ‚Üí "Porro-–ø—Ä–∏–∑–º—ã", "Roof-–ø—Ä–∏–∑–º—ã", "–ø—Ä–æ—Å–≤–µ—Ç–ª–µ–Ω–∏–µ", "–≤—ã—Ö–æ–¥–Ω–æ–π –∑—Ä–∞—á–æ–∫"

3. **–°–∏–Ω–æ–Ω–∏–º—ã –∏ –≤–∞—Ä–∏–∞—Ü–∏–∏**:
   - –†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–µ—Ä–º–∏–Ω–æ–≤
   - –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è
   - –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
   - –ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –≤ —Ä—É—Å—Å–∫–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê - JSON:
{
  "lsi_words": [
    {"word": "—Å–ª–æ–≤–æ/—Ñ—Ä–∞–∑–∞", "relevance": 0.95, "usage_example": "–≥–¥–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å"},
    ...
  ],
  "thematic_terms": [
    {"term": "—Ç–µ—Ä–º–∏–Ω", "relevance": 0.90, "category": "—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏/—Ç–∏–ø—ã/–±—Ä–µ–Ω–¥—ã"},
    ...
  ],
  "synonyms": [
    {"synonym": "—Å–∏–Ω–æ–Ω–∏–º", "for_word": "–¥–ª—è –∫–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞", "relevance": 0.85},
    ...
  ]
}

–ü–æ–¥–±–µ—Ä–∏ –º–∏–Ω–∏–º—É–º 30-50 —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å–ª–æ–≤ –∏ —Ç–µ—Ä–º–∏–Ω–æ–≤.`;
    
    const response = UrlFetchApp.fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': 'Bearer ' + apiKey,
        'Content-Type': 'application/json'
      },
      payload: JSON.stringify({
        model: 'gpt-4',
        messages: [
          {
            role: 'system',
            content: '–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ SEO, —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–º—É –∞–Ω–∞–ª–∏–∑—É –∏ LSI. –û—Ç–ª–∏—á–Ω–æ –∑–Ω–∞–µ—à—å —Å–ø–µ—Ü–∏—Ñ–∏–∫—É –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–æ–≤.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.7,
        response_format: { type: 'json_object' }
      }),
      muteHttpExceptions: true
    });
    
    if (response.getResponseCode() !== 200) {
      throw new Error(`OpenAI API –æ—à–∏–±–∫–∞: ${response.getResponseCode()}`);
    }
    
    const data = JSON.parse(response.getContentText());
    const resultText = data.choices[0].message.content;
    const result = JSON.parse(resultText);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–∏—Å—Ç
    saveLSIAndThematicToSheet(categoryData.id, categoryData.title, result);
    
    const totalWords = 
      (result.lsi_words ? result.lsi_words.length : 0) +
      (result.thematic_terms ? result.thematic_terms.length : 0) +
      (result.synonyms ? result.synonyms.length : 0);
    
    SpreadsheetApp.getActiveSpreadsheet().toast(
      `–°–æ–±—Ä–∞–Ω–æ ${totalWords} LSI –∏ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–ª–æ–≤!`,
      '‚úÖ –ì–æ—Ç–æ–≤–æ',
      5
    );
    
    logInfo(`‚úÖ –°–æ–±—Ä–∞–Ω–æ LSI –∏ —Ç–µ–º–∞—Ç–∏–∫–∏: ${totalWords} —Å–ª–æ–≤`, null, context);
    
    return result;
    
  } catch (error) {
    logError('‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ LSI', error, context);
    SpreadsheetApp.getActiveSpreadsheet().toast(
      '–û—à–∏–±–∫–∞: ' + error.message,
      '‚ùå –û—à–∏–±–∫–∞',
      10
    );
    throw error;
  }
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç LSI –∏ —Ç–µ–º–∞—Ç–∏–∫—É –≤ –ª–∏—Å—Ç
 */
function saveLSIAndThematicToSheet(categoryId, categoryTitle, data) {
  const context = "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ LSI –∏ —Ç–µ–º–∞—Ç–∏–∫–∏";
  
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    let sheet = ss.getSheetByName(CATEGORY_SHEETS.LSI_WORDS);
    
    if (!sheet) {
      sheet = ss.insertSheet(CATEGORY_SHEETS.LSI_WORDS);
      setupLSISheet(sheet);
    }
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const existingData = sheet.getDataRange().getValues();
    const rowsToDelete = [];
    
    for (let i = existingData.length - 1; i >= 1; i--) {
      if (existingData[i][0] == categoryId) {
        rowsToDelete.push(i + 1);
      }
    }
    
    rowsToDelete.forEach(row => {
      sheet.deleteRow(row);
    });
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    const rows = [];
    
    // LSI —Å–ª–æ–≤–∞
    if (data.lsi_words && Array.isArray(data.lsi_words)) {
      data.lsi_words.forEach(item => {
        rows.push([
          categoryId,
          categoryTitle,
          item.word,
          'LSI',
          'OpenAI',
          item.relevance || 0,
          '–ù–µ—Ç',
          item.usage_example || ''
        ]);
      });
    }
    
    // –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
    if (data.thematic_terms && Array.isArray(data.thematic_terms)) {
      data.thematic_terms.forEach(item => {
        rows.push([
          categoryId,
          categoryTitle,
          item.term,
          '–¢–µ–º–∞—Ç–∏–∫–∞ (' + (item.category || '–æ–±—â–µ–µ') + ')',
          'OpenAI',
          item.relevance || 0,
          '–ù–µ—Ç',
          ''
        ]);
      });
    }
    
    // –°–∏–Ω–æ–Ω–∏–º—ã
    if (data.synonyms && Array.isArray(data.synonyms)) {
      data.synonyms.forEach(item => {
        rows.push([
          categoryId,
          categoryTitle,
          item.synonym,
          '–°–∏–Ω–æ–Ω–∏–º: ' + (item.for_word || ''),
          'OpenAI',
          item.relevance || 0,
          '–ù–µ—Ç',
          ''
        ]);
      });
    }
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    if (rows.length > 0) {
      const lastRow = sheet.getLastRow();
      sheet.getRange(lastRow + 1, 1, rows.length, 8).setValues(rows);
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
      sheet.getRange(lastRow + 1, 6, rows.length, 1).setNumberFormat('0.00');
    }
    
    logInfo(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${rows.length} LSI –∏ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–ª–æ–≤`, null, context);
    
  } catch (error) {
    logError('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è LSI', error, context);
    throw error;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç LSI –∏ —Ç–µ–º–∞—Ç–∏–∫—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
function getLSIForCategory(categoryId) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(CATEGORY_SHEETS.LSI_WORDS);
    
    if (!sheet) {
      return [];
    }
    
    const data = sheet.getDataRange().getValues();
    const lsiWords = [];
    
    for (let i = 1; i < data.length; i++) {
      if (data[i][0] == categoryId) {
        lsiWords.push({
          word: data[i][2],
          type: data[i][3],
          source: data[i][4],
          relevance: data[i][5],
          used: data[i][6],
          where_used: data[i][7]
        });
      }
    }
    
    return lsiWords;
    
  } catch (error) {
    logError('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è LSI', error);
    return [];
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–µ–Ω—é - —Å–æ–±—Ä–∞—Ç—å LSI –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
function collectLSIForActiveCategory() {
  try {
    const categoryData = getActiveCategoryData();
    
    if (!categoryData) {
      SpreadsheetApp.getUi().alert(
        '–û—à–∏–±–∫–∞',
        '–û—Ç–∫—Ä–æ–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –ª–∏—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
        SpreadsheetApp.getUi().ButtonSet.OK
      );
      return;
    }
    
    const keywords = getKeywordsForCategory(categoryData.id);
    
    if (keywords.length === 0) {
      SpreadsheetApp.getUi().alert(
        '–ù–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤',
        '–°–Ω–∞—á–∞–ª–∞ —Å–æ–±–µ—Ä–∏—Ç–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ —è–¥—Ä–æ',
        SpreadsheetApp.getUi().ButtonSet.OK
      );
      return;
    }
    
    collectLSIAndThematicWords(categoryData, keywords);
    
  } catch (error) {
    logError('‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ LSI', error);
    SpreadsheetApp.getUi().alert('–û—à–∏–±–∫–∞: ' + error.message);
  }
}