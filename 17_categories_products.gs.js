/**
 * ========================================
 * –£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–û–í–ê–†–ê–ú–ò –ö–ê–¢–ï–ì–û–†–ò–ò (–§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø - COLLECTS API)
 * ========================================
 */

/**
 * –£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
function removeSelectedProductsFromCategory() {
  try {
    const sheet = SpreadsheetApp.getActiveSheet();
    const sheetName = sheet.getName();

    if (!sheetName.startsWith('–ö–∞—Ç–µ–≥–æ—Ä–∏—è ‚Äî ')) {
      SpreadsheetApp.getUi().alert('–û—à–∏–±–∫–∞', '–¢–æ–ª—å–∫–æ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–∏—Å—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', SpreadsheetApp.getUi().ButtonSet.OK);
      return;
    }

    const categoryId = sheet.getRange('B2').getValue();
    if (!categoryId) throw new Error('ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');

    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    const sections = calculateSheetSections(sheet);
    const startRow = sections.productsStart;
    const lastRow = sheet.getLastRow();
    
    if (lastRow < startRow) {
      SpreadsheetApp.getUi().alert('–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
      return;
    }
    
    const data = sheet.getRange(startRow, 1, lastRow - startRow + 1, 6).getValues();
    const toDelete = [];

    for (let i = 0; i < data.length; i++) {
      const title = data[i][0];     // A - –ù–∞–∑–≤–∞–Ω–∏–µ
      const sku = data[i][1];       // B - –ê—Ä—Ç–∏–∫—É–ª  
      const price = data[i][2];     // C - –¶–µ–Ω–∞
      const inStock = data[i][3];   // D - –í –Ω–∞–ª–∏—á–∏–∏
      const id = data[i][4];        // E - ID
      const checked = data[i][5];   // F - –ß–µ–∫–±–æ–∫—Å ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û!
      
      if (!id || id.toString().trim() === '') break;
      
      if (checked === true) {
        toDelete.push({ id: parseInt(id), title: title, row: startRow + i });
      }
    }
    
    if (toDelete.length === 0) {
      SpreadsheetApp.getUi().alert('–ù–µ—Ç –æ—Ç–º–µ—á–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤');
      return;
    }
    
    const ui = SpreadsheetApp.getUi();
    const confirm = ui.alert(
      '–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä—ã?',
      `–ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ: ${toDelete.length} —Ç–æ–≤–∞—Ä–æ–≤\n\n${toDelete.slice(0, 3).map(t => t.title).join('\n')}\n\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?`,
      ui.ButtonSet.YES_NO
    );
    
    if (confirm !== ui.Button.YES) return;
    
    SpreadsheetApp.getActiveSpreadsheet().toast('–£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...', '‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞', -1);
    
    // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ Collects API
    const result = removeProductsFromCategoryAPI(categoryId, toDelete.map(t => t.id));
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    for (let i = toDelete.length - 1; i >= 0; i--) {
      sheet.deleteRow(toDelete[i].row);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    updateCategoryStatistics(sheet);
    
    SpreadsheetApp.getActiveSpreadsheet().toast(`–£–¥–∞–ª–µ–Ω–æ: ${result.success}`, '‚úÖ –ì–æ—Ç–æ–≤–æ', 5);
    ui.alert('–ì–æ—Ç–æ–≤–æ', `–£–¥–∞–ª–µ–Ω–æ: ${result.success}\n–û—à–∏–±–æ–∫: ${result.errors}`, ui.ButtonSet.OK);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    SpreadsheetApp.getUi().alert('–û—à–∏–±–∫–∞: ' + error.message);
  }
}

/**
 * –£–¥–∞–ª—è–µ—Ç —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ Collects API (–†–ê–ë–û–ß–ò–ô –ú–ï–¢–û–î!)
 */
function removeProductsFromCategoryAPI(categoryId, productIds) {
  try {
    console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º ${productIds.length} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryId}`);
    
    const credentials = getInsalesCredentialsSync();
    if (!credentials) throw new Error('–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    
    // –®–ê–ì 1: –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–≤—è–∑–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const collectsUrl = `${credentials.baseUrl}/admin/collects.json?collection_id=${categoryId}&per_page=250`;
    
    console.log(`üìã –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...`);
    
    const collectsResponse = UrlFetchApp.fetch(collectsUrl, {
      method: 'GET',
      headers: {
        'Authorization': 'Basic ' + Utilities.base64Encode(`${credentials.apiKey}:${credentials.password}`),
        'Content-Type': 'application/json'
      },
      muteHttpExceptions: true
    });
    
    if (collectsResponse.getResponseCode() !== 200) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤—è–∑–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
    }
    
    const collects = JSON.parse(collectsResponse.getContentText());
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ —Å–≤—è–∑–µ–π: ${collects.length}`);
    
    // –®–ê–ì 2: –ù–∞—Ö–æ–¥–∏–º ID —Å–≤—è–∑–µ–π –¥–ª—è —É–¥–∞–ª—è–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    const collectsToDelete = collects.filter(collect => 
      productIds.includes(collect.product_id)
    );
    
    console.log(`üóëÔ∏è –°–≤—è–∑–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ${collectsToDelete.length}`);
    
    if (collectsToDelete.length === 0) {
      console.log('‚ö†Ô∏è –ù–∏ –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
      return { success: 0, errors: 0 };
    }
    
    // –®–ê–ì 3: –£–¥–∞–ª—è–µ–º –∫–∞–∂–¥—É—é —Å–≤—è–∑—å
    let successCount = 0;
    let errorCount = 0;
    
    for (const collect of collectsToDelete) {
      try {
        const deleteUrl = `${credentials.baseUrl}/admin/collects/${collect.id}.json`;
        
        console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å–≤—è–∑—å ${collect.id} (—Ç–æ–≤–∞—Ä ${collect.product_id})...`);
        
        const deleteResponse = UrlFetchApp.fetch(deleteUrl, {
          method: 'DELETE',
          headers: {
            'Authorization': 'Basic ' + Utilities.base64Encode(`${credentials.apiKey}:${credentials.password}`),
            'Content-Type': 'application/json'
          },
          muteHttpExceptions: true
        });
        
        const statusCode = deleteResponse.getResponseCode();
        
        if (statusCode === 200 || statusCode === 204) {
          console.log(`‚úÖ –¢–æ–≤–∞—Ä ${collect.product_id} —É–¥–∞–ª—ë–Ω –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏`);
          successCount++;
        } else {
          console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ ${collect.product_id}: ${statusCode}`);
          errorCount++;
        }
        
        Utilities.sleep(500);
        
      } catch (e) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–≤—è–∑–∏ ${collect.id}:`, e.message);
        errorCount++;
      }
    }
    
    console.log(`‚úÖ –ò—Ç–æ–≥–æ: —É–¥–∞–ª–µ–Ω–æ ${successCount}, –æ—à–∏–±–æ–∫ ${errorCount}`);
    
    return { success: successCount, errors: errorCount };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤:', error);
    throw error;
  }
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
 */
function showAddProductsDialog() {
  try {
    const sheet = SpreadsheetApp.getActiveSheet();
    const sheetName = sheet.getName();
    
    if (!sheetName.startsWith('–ö–∞—Ç–µ–≥–æ—Ä–∏—è ‚Äî ')) {
      SpreadsheetApp.getUi().alert('–û—à–∏–±–∫–∞', '–¢–æ–ª—å–∫–æ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–∏—Å—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', SpreadsheetApp.getUi().ButtonSet.OK);
      return;
    }
    
    const categoryId = sheet.getRange('B2').getValue();
    const categoryTitle = sheet.getRange('B3').getValue();
    
    if (!categoryId) throw new Error('ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥—É–±–ª–µ–π
    const existingProductIds = getCurrentCategoryProductIds(sheet);
    
    const htmlContent = createAddProductsDialogHTML(categoryId, categoryTitle, existingProductIds);
    
    const htmlOutput = HtmlService.createHtmlOutput(htmlContent)
      .setWidth(900)
      .setHeight(650);
    
    SpreadsheetApp.getUi().showModalDialog(htmlOutput, '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    SpreadsheetApp.getUi().alert('–û—à–∏–±–∫–∞: ' + error.message);
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç ID —Ç–µ–∫—É—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
function getCurrentCategoryProductIds(sheet) {
  try {
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    const sections = calculateSheetSections(sheet);
    const startRow = sections.productsStart;
    const lastRow = sheet.getLastRow();
    
    if (lastRow < startRow) return [];
    
    const data = sheet.getRange(startRow, 2, lastRow - startRow + 1, 1).getValues();
    const ids = [];
    
    for (let i = 0; i < data.length; i++) {
      const id = data[i][0];
      if (id && id.toString().trim() !== '') {
        ids.push(parseInt(id));
      } else {
        break;
      }
    }
    
    console.log(`üìã –¢–µ–∫—É—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${ids.length}`);
    return ids;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤:', error);
    return [];
  }
}

/**
 * HTML –¥–∏–∞–ª–æ–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
 */
function createAddProductsDialogHTML(categoryId, categoryTitle, existingIds) {
  const existingIdsJson = JSON.stringify(existingIds);
  
  return `
    <!DOCTYPE html>
    <html>
      <head>
        <base target="_top">
        <style>
          body { font-family: Arial, sans-serif; padding: 20px; margin: 0; }
          h3 { color: #1976d2; margin-top: 0; }
          .search-box { margin: 20px 0; }
          .search-box input {
            width: 100%;
            padding: 12px;
            font-size: 16px;
            border: 2px solid #ddd;
            border-radius: 4px;
            box-sizing: border-box;
          }
          .search-box input:focus { outline: none; border-color: #1976d2; }
          .hint { color: #666; font-size: 13px; margin-top: 8px; }
          .results {
            margin: 20px 0;
            max-height: 380px;
            overflow-y: auto;
            border: 1px solid #ddd;
            border-radius: 4px;
          }
          table { width: 100%; border-collapse: collapse; }
          th {
            position: sticky;
            top: 0;
            background: #1976d2;
            color: white;
            padding: 12px;
            text-align: left;
            font-size: 14px;
          }
          td { padding: 10px 12px; border-bottom: 1px solid #eee; font-size: 14px; }
          tr:hover { background: #f5f5f5; }
          .checkbox-cell { width: 40px; text-align: center; }
          .stock-yes { color: #4caf50; font-weight: bold; }
          .stock-no { color: #f44336; }
          .in-category { color: #999; font-style: italic; }
          .actions {
            margin-top: 20px;
            text-align: right;
            padding-top: 15px;
            border-top: 1px solid #ddd;
          }
          button {
            padding: 10px 20px;
            margin-left: 10px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
          }
          .btn-cancel { background: #f1f3f4; color: #333; }
          .btn-primary { background: #1976d2; color: white; }
          .btn-primary:disabled { background: #ccc; cursor: not-allowed; }
          .btn-load-more {
            background: #4caf50;
            color: white;
            width: 100%;
            margin-top: 10px;
          }
          .loading { text-align: center; padding: 40px; color: #666; }
          .loading-spinner {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #1976d2;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 20px auto;
          }
          @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
          }
          .info {
            background: #e3f2fd;
            padding: 12px;
            margin-bottom: 15px;
            border-radius: 4px;
            font-size: 14px;
          }
        </style>
      </head>
      <body>
        <h3>‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</h3>
        
        <div class="info">
          üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <strong>${categoryTitle}</strong><br>
          üì¶ –£–∂–µ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: <strong>${existingIds.length}</strong> —Ç–æ–≤–∞—Ä–æ–≤<br>
          ‚úÖ –í—ã–±—Ä–∞–Ω–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: <strong id="selectedCount">0</strong>
        </div>
        
        <div class="search-box">
          <input 
            type="text" 
            id="searchInput" 
            placeholder="–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞..."
            autocomplete="off"
          >
          <div class="hint">
            üí° –ú–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –¢–æ–≤–∞—Ä—ã, —É–∂–µ –Ω–∞—Ö–æ–¥—è—â–∏–µ—Å—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –±—É–¥—É—Ç –ø–æ–º–µ—á–µ–Ω—ã —Å–µ—Ä—ã–º.
          </div>
        </div>
        
        <div class="results">
          <table>
            <thead>
              <tr>
                <th class="checkbox-cell">‚òëÔ∏è</th>
                <th>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</th>
                <th style="width: 120px;">–ù–∞–ª–∏—á–∏–µ</th>
              </tr>
            </thead>
            <tbody id="resultsBody">
              <tr>
                <td colspan="3" class="loading">
                  <div class="loading-spinner"></div>
                  <strong>–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤...</strong><br>
                  <small>–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 30 —Å–µ–∫—É–Ω–¥</small>
                </td>
              </tr>
            </tbody>
          </table>
        </div>
        
        <button id="loadMoreBtn" class="btn-load-more" style="display: none;" onclick="loadMoreProducts()">
          üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë 100 —Ç–æ–≤–∞—Ä–æ–≤
        </button>
        
        <div class="actions">
          <button class="btn-cancel" onclick="google.script.host.close()">–û—Ç–º–µ–Ω–∞</button>
          <button id="addBtn" class="btn-primary" onclick="addSelectedProducts()" disabled>
            ‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ (<span id="addBtnCount">0</span>)
          </button>
        </div>
        
        <script>
          let allProducts = [];
          let filteredProducts = [];
          let displayedCount = 0;
          const batchSize = 100;
          let selectedProducts = new Set();
          let searchTimeout;
          const existingIds = new Set(${existingIdsJson});
          
          window.onload = function() {
            loadAllProducts();
            
            document.getElementById('searchInput').addEventListener('input', function(e) {
              clearTimeout(searchTimeout);
              searchTimeout = setTimeout(() => performSearch(e.target.value), 500);
            });
          };
          
          function loadAllProducts() {
            google.script.run
              .withSuccessHandler(function(products) {
                allProducts = products;
                document.getElementById('resultsBody').innerHTML = 
                  '<tr><td colspan="3" class="loading">' +
                  '‚úÖ –ö–∞—Ç–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∂–µ–Ω (' + products.length + ' —Ç–æ–≤–∞—Ä–æ–≤)<br>' +
                  '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞' +
                  '</td></tr>';
              })
              .withFailureHandler(function(error) {
                document.getElementById('resultsBody').innerHTML = 
                  '<tr><td colspan="3" class="loading">‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ' + error.message + '</td></tr>';
              })
              .getAllProductsForSearch();
          }
          
          function performSearch(query) {
            if (!query || query.length < 2) {
              document.getElementById('resultsBody').innerHTML = 
                '<tr><td colspan="3" class="loading">–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞</td></tr>';
              document.getElementById('loadMoreBtn').style.display = 'none';
              return;
            }
            
            const lowerQuery = query.toLowerCase();
            filteredProducts = allProducts.filter(p => 
              p.title.toLowerCase().includes(lowerQuery)
            );
            
            displayedCount = 0;
            displayResults();
          }
          
          function displayResults() {
            const tbody = document.getElementById('resultsBody');
            
            if (filteredProducts.length === 0) {
              tbody.innerHTML = '<tr><td colspan="3" class="loading">üòî –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</td></tr>';
              document.getElementById('loadMoreBtn').style.display = 'none';
              return;
            }
            
            const endIndex = Math.min(displayedCount + batchSize, filteredProducts.length);
            const batch = filteredProducts.slice(displayedCount, endIndex);
            
            const html = batch.map(product => {
              const inCategory = existingIds.has(product.id);
              const rowClass = inCategory ? 'in-category' : '';
              const checkbox = inCategory ? 
                '<input type="checkbox" disabled title="–£–∂–µ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏">' :
                \`<input type="checkbox" value="\${product.id}" onchange="toggleProduct(\${product.id})" \${selectedProducts.has(product.id) ? 'checked' : ''}>\`;
              
              return \`
                <tr class="\${rowClass}">
                  <td class="checkbox-cell">\${checkbox}</td>
                  <td>\${product.title} \${inCategory ? '(—É–∂–µ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)' : ''}</td>
                  <td class="\${product.in_stock ? 'stock-yes' : 'stock-no'}">
                    \${product.in_stock ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}
                  </td>
                </tr>
              \`;
            }).join('');
            
            if (displayedCount === 0) {
              tbody.innerHTML = html;
            } else {
              tbody.innerHTML += html;
            }
            
            displayedCount = endIndex;
            
            if (displayedCount < filteredProducts.length) {
              document.getElementById('loadMoreBtn').style.display = 'block';
              document.getElementById('loadMoreBtn').textContent = 
                \`üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë 100 —Ç–æ–≤–∞—Ä–æ–≤ (–æ—Å—Ç–∞–ª–æ—Å—å \${filteredProducts.length - displayedCount})\`;
            } else {
              document.getElementById('loadMoreBtn').style.display = 'none';
            }
          }
          
          function loadMoreProducts() {
            displayResults();
          }
          
          function toggleProduct(productId) {
            if (selectedProducts.has(productId)) {
              selectedProducts.delete(productId);
            } else {
              selectedProducts.add(productId);
            }
            updateSelectedCount();
          }
          
          function updateSelectedCount() {
            const count = selectedProducts.size;
            document.getElementById('selectedCount').textContent = count;
            document.getElementById('addBtnCount').textContent = count;
            document.getElementById('addBtn').disabled = count === 0;
          }
          
          function addSelectedProducts() {
            if (selectedProducts.size === 0) {
              alert('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã');
              return;
            }
            
            const productIds = Array.from(selectedProducts);
            const addBtn = document.getElementById('addBtn');
            
            addBtn.disabled = true;
            addBtn.innerHTML = '‚è≥ –î–æ–±–∞–≤–ª—è–µ–º...';
            
            google.script.run
              .withSuccessHandler(function(result) {
                alert(\`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: \${result.success}\` + (result.errors > 0 ? \`\\n‚ùå –û—à–∏–±–æ–∫: \${result.errors}\` : ''));
                google.script.host.close();
              })
              .withFailureHandler(function(error) {
                alert('‚ùå –û—à–∏–±–∫–∞: ' + error.message);
                addBtn.disabled = false;
                addBtn.innerHTML = '‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ (<span id="addBtnCount">' + productIds.length + '</span>)';
              })
              .addProductsToCategory(${categoryId}, productIds);
          }
        </script>
      </body>
    </html>
  `;
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –í–°–ï —Ç–æ–≤–∞—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
 */
function getAllProductsForSearch() {
  try {
    console.log('üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï —Ç–æ–≤–∞—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞');
    
    const credentials = getInsalesCredentialsSync();
    if (!credentials) throw new Error('–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    
    const allProducts = [];
    let page = 1;
    const perPage = 250;
    
    while (page <= 20) {
      const url = `${credentials.baseUrl}/admin/products.json?per_page=${perPage}&page=${page}`;
      
      const response = UrlFetchApp.fetch(url, {
        method: 'GET',
        headers: {
          'Authorization': 'Basic ' + Utilities.base64Encode(`${credentials.apiKey}:${credentials.password}`),
          'Content-Type': 'application/json'
        },
        muteHttpExceptions: true
      });
      
      if (response.getResponseCode() !== 200) break;
      
      const products = JSON.parse(response.getContentText());
      
      if (!products || products.length === 0) break;
      
      allProducts.push(...products);
      
      if (products.length < perPage) break;
      
      page++;
      Utilities.sleep(300);
    }
    
    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${allProducts.length}`);
    
    const simplified = allProducts.map(product => {
      const variant = product.variants && product.variants[0];
      const inStock = variant && variant.quantity > 0;
      
      return {
        id: product.id,
        title: product.title,
        in_stock: inStock
      };
    });
    
    return simplified;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:', error);
    throw error;
  }
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ Collects API (–†–ê–ë–û–ß–ò–ô –ú–ï–¢–û–î!)
 */
function addProductsToCategory(categoryId, productIds) {
  try {
    console.log(`üì¶ –î–æ–±–∞–≤–ª—è–µ–º ${productIds.length} —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ${categoryId}`);
    
    const credentials = getInsalesCredentialsSync();
    if (!credentials) throw new Error('–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    
    let successCount = 0;
    let errorCount = 0;
    const addedProducts = [];
    
    for (const productId of productIds) {
      try {
        const collectUrl = `${credentials.baseUrl}/admin/collects.json`;
        
        const payload = {
          collect: {
            product_id: productId,
            collection_id: parseInt(categoryId)
          }
        };
        
        console.log(`üì¶ –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä ${productId} –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ${categoryId}...`);
        
        const response = UrlFetchApp.fetch(collectUrl, {
          method: 'POST',
          headers: {
            'Authorization': 'Basic ' + Utilities.base64Encode(`${credentials.apiKey}:${credentials.password}`),
            'Content-Type': 'application/json'
          },
          payload: JSON.stringify(payload),
          muteHttpExceptions: true
        });
        
        const statusCode = response.getResponseCode();
        
        if (statusCode === 200 || statusCode === 201) {
          console.log(`‚úÖ –¢–æ–≤–∞—Ä ${productId} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é`);
          successCount++;
          
          // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
          try {
            const productUrl = `${credentials.baseUrl}/admin/products/${productId}.json`;
            const productResponse = UrlFetchApp.fetch(productUrl, {
              method: 'GET',
              headers: {
                'Authorization': 'Basic ' + Utilities.base64Encode(`${credentials.apiKey}:${credentials.password}`),
                'Content-Type': 'application/json'
              },
              muteHttpExceptions: true
            });
            
            if (productResponse.getResponseCode() === 200) {
              const product = JSON.parse(productResponse.getContentText());
              addedProducts.push(product);
            }
          } catch (e) {
            console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ ${productId}`);
          }
          
        } else if (statusCode === 422) {
          console.log(`‚ö†Ô∏è –¢–æ–≤–∞—Ä ${productId} —É–∂–µ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏`);
          successCount++;
        } else {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ ${productId}: ${statusCode}`);
          errorCount++;
        }
        
        Utilities.sleep(500);
        
      } catch (e) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Ç–æ–≤–∞—Ä–∞ ${productId}:`, e.message);
        errorCount++;
      }
    }
    
    console.log(`‚úÖ –ò—Ç–æ–≥–æ: –¥–æ–±–∞–≤–ª–µ–Ω–æ ${successCount}, –æ—à–∏–±–æ–∫ ${errorCount}`);
    
    if (addedProducts.length > 0) {
      appendProductsToDetailSheet(addedProducts);
    }
    
    return { success: successCount, errors: errorCount };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤:', error);
    throw error;
  }
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä—ã –≤ –ö–û–ù–ï–¶ —Å–ø–∏—Å–∫–∞
 */
function appendProductsToDetailSheet(products) {
  try {
    const sheet = SpreadsheetApp.getActiveSheet();
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    const sections = calculateSheetSections(sheet);
    const startRow = sections.productsStart;

    console.log(`[DEBUG appendProducts] calculateSheetSections –≤–µ—Ä–Ω—É–ª productsStart = ${startRow}`);
    console.log(`[DEBUG appendProducts] –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞ –ª–∏—Å—Ç–∞ = ${sheet.getLastRow()}`);

    // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É —Å —Ç–æ–≤–∞—Ä–æ–º (–≥–¥–µ –µ—Å—Ç—å ID –≤ –∫–æ–ª–æ–Ω–∫–µ E)
    let nextRow = startRow;
    let debugRows = [];
    while (sheet.getRange(nextRow, 5).getValue() !== '') {  // –ö–æ–ª–æ–Ω–∫–∞ E - ID —Ç–æ–≤–∞—Ä–∞
      const idValue = sheet.getRange(nextRow, 5).getValue();
      debugRows.push(`–°—Ç—Ä–æ–∫–∞ ${nextRow}: ID = ${idValue}`);
      nextRow++;
      if (nextRow > 1000) break; // –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
    }

    console.log(`[DEBUG appendProducts] –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å ID:\n${debugRows.join('\n')}`);
    console.log(`üìù –î–æ–±–∞–≤–ª—è–µ–º ${products.length} —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞—á–∏–Ω–∞—è —Å–æ —Å—Ç—Ä–æ–∫–∏ ${nextRow}`);

    const productRows = products.map(product => {
      const variant = product.variants && product.variants[0];
      const inStock = variant && variant.quantity > 0 ? '–î–∞' : '–ù–µ—Ç';
      const price = variant ? variant.price : product.price;

      let characteristics = '';
      if (product.characteristics && product.characteristics.length > 0) {
        characteristics = product.characteristics.slice(0, 3).map(ch =>
          `${ch.property_title || ''}: ${ch.title || ch.name || ''}`
        ).join(', ');
      }

      return [
        product.title,                   // A - –ù–∞–∑–≤–∞–Ω–∏–µ
        variant ? variant.sku : '',      // B - –ê—Ä—Ç–∏–∫—É–ª
        price || '',                     // C - –¶–µ–Ω–∞
        inStock,                         // D - –í –Ω–∞–ª–∏—á–∏–∏
        product.id,                      // E - ID
        false                            // F - –ß–µ–∫–±–æ–∫—Å
      ];
    });

    // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é –¥–∞–Ω–Ω—ã—Ö!
    // –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –º—ã –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –±–ª–æ–∫–∏ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è, –ø–ª–∏—Ç–∫–∏ —Ç–µ–≥–æ–≤ –∏ —Ç.–¥.)
    console.log(`[DEBUG appendProducts] –í—Å—Ç–∞–≤–ª—è–µ–º ${productRows.length} –Ω–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫ –ø–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ ${nextRow - 1}`);
    sheet.insertRowsAfter(nextRow - 1, productRows.length);

    // –¢–µ–ø–µ—Ä—å –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω–æ–≤—ã–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    sheet.getRange(nextRow, 1, productRows.length, productRows[0].length).setValues(productRows);
    sheet.getRange(nextRow, 6, productRows.length, 1).insertCheckboxes();  // F - —á–µ–∫–±–æ–∫—Å
    sheet.getRange(nextRow, 3, productRows.length, 1).setNumberFormat('#,##0.00 ‚ÇΩ');  // C - —Ü–µ–Ω–∞
    
    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${productRows.length} —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É`);
    
    updateCategoryStatistics(sheet);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É:', error);
    throw error;
  }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
function updateCategoryStatistics(sheet) {
  try {
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    const sections = calculateSheetSections(sheet);
    const startRow = sections.productsStart;
    const statsStartRow = sections.statsStart;
    const lastRow = sheet.getLastRow();

    console.log(`[DEBUG updateStats] statsStartRow = ${statsStartRow}, productsStart = ${startRow}`);

    // –ï—Å–ª–∏ –±–ª–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∫–∞–∫ fallback
    if (!statsStartRow) {
      console.log('[DEBUG updateStats] –ë–ª–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
      return;
    }

    if (lastRow < startRow) {
      // –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ - –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω—É–ª–∏
      sheet.getRange(statsStartRow + 1, 2).setValue(0);      // B74: –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤
      sheet.getRange(statsStartRow + 2, 2).setValue(0);      // B75: –í –Ω–∞–ª–∏—á–∏–∏
      sheet.getRange(statsStartRow + 3, 2).setValue(0);      // B76: –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏
      sheet.getRange(statsStartRow + 4, 2).setValue('0%');   // B77: –ü—Ä–æ—Ü–µ–Ω—Ç
      return;
    }

    const data = sheet.getRange(startRow, 1, lastRow - startRow + 1, 8).getValues();

    let totalCount = 0;
    let inStockCount = 0;

    for (let i = 0; i < data.length; i++) {
      const id = data[i][4];  // E - ID —Ç–æ–≤–∞—Ä–∞
      if (!id || id.toString().trim() === '') break;

      totalCount++;

      const inStock = data[i][3];  // D - –í –Ω–∞–ª–∏—á–∏–∏
      if (inStock === '–î–∞') {
        inStockCount++;
      }
    }

    const outOfStockCount = totalCount - inStockCount;
    const percentInStock = totalCount > 0 ? Math.round(inStockCount / totalCount * 100) + '%' : '0%';

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–æ–∑–∏—Ü–∏–∏
    sheet.getRange(statsStartRow + 1, 2).setValue(totalCount);      // –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤
    sheet.getRange(statsStartRow + 2, 2).setValue(inStockCount);    // –í –Ω–∞–ª–∏—á–∏–∏
    sheet.getRange(statsStartRow + 3, 2).setValue(outOfStockCount); // –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏
    sheet.getRange(statsStartRow + 4, 2).setValue(percentInStock);  // –ü—Ä–æ—Ü–µ–Ω—Ç

    console.log(`[DEBUG updateStats] –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${totalCount} —Ç–æ–≤–∞—Ä–æ–≤, ${inStockCount} –≤ –Ω–∞–ª–∏—á–∏–∏`);
    
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: –≤—Å–µ–≥–æ ${totalCount}, –≤ –Ω–∞–ª–∏—á–∏–∏ ${inStockCount}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
  }
}

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
function getInsalesCredentialsSync() {
  try {
    const config = getInsalesConfig();
    
    if (!config || !config.apiKey || !config.password || !config.shop) {
      throw new Error('–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ InSales –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ 01_config.gs');
    }
    
    return {
      apiKey: config.apiKey,
      password: config.password,
      shop: config.shop,
      baseUrl: config.baseUrl
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á—ë—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö InSales:', error);
    return null;
  }
}