/**
 * ========================================
 * –ú–û–î–£–õ–¨: –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–ü–ò–°–ê–ù–ò–ô –ö–ê–¢–ï–ì–û–†–ò–ô –ß–ï–†–ï–ó ASSISTANTS API
 * ========================================
 */

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ OpenAI Assistants API
 * –õ–û–ì–ò–ö–ê:
 * - –ï—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ B17 –µ—Å—Ç—å ‚Üí –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –†–ï–†–ê–ô–¢ –≤ C17
 * - –ï—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—è –≤ B17 –Ω–µ—Ç ‚Üí –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ù–û–í–û–ï –≤ C17
 */
function generateDescriptionForActiveCategory() {
  try {
    const categoryData = getActiveCategoryData();
    
    if (!categoryData) {
      SpreadsheetApp.getUi().alert(
        '–û—à–∏–±–∫–∞',
        '–û—Ç–∫—Ä–æ–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –ª–∏—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
        SpreadsheetApp.getUi().ButtonSet.OK
      );
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (typeof CATEGORY_DESCRIPTION_ASSISTANT_ID === 'undefined' || 
        CATEGORY_DESCRIPTION_ASSISTANT_ID === 'asst_XXXXX') {
      SpreadsheetApp.getUi().alert(
        '–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏',
        '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω ID –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.\n\n–û—Ç–∫—Ä–æ–π—Ç–µ 01_config.gs –∏ —É–∫–∞–∂–∏—Ç–µ ID –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞',
        SpreadsheetApp.getUi().ButtonSet.OK
      );
      return;
    }
    
    // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const sheet = SpreadsheetApp.getActiveSheet();
    const h1 = sheet.getRange('B15').getValue() || categoryData.title;
    const existingDescription = sheet.getRange('B17').getValue() || ''; // –¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    const productsCount = sheet.getRange('B21').getValue() || 0;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º: –†–ï–†–ê–ô–¢ –∏–ª–∏ –ù–û–í–û–ï
    const isRewrite = existingDescription && existingDescription.toString().trim().length > 100;
    
    const mode = isRewrite ? '–†–ï–†–ê–ô–¢' : '–ì–ï–ù–ï–†–ê–¶–ò–Ø –° –ù–£–õ–Ø';
    
    SpreadsheetApp.getActiveSpreadsheet().toast(
      `${mode} –æ–ø–∏—Å–∞–Ω–∏—è —á–µ—Ä–µ–∑ AI...`,
      '‚è≥ –†–∞–±–æ—Ç–∞–µ–º',
      -1
    );
    
    console.log(`üìù –†–µ–∂–∏–º: ${mode}`);
    console.log(`üìä –°—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: ${existingDescription ? existingDescription.toString().length + ' —Å–∏–º–≤–æ–ª–æ–≤' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã
    const productsData = getProductsDataFromSheet(sheet);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    const userPrompt = isRewrite 
      ? buildRewritePrompt(categoryData.title, h1, existingDescription, productsCount, productsData)
      : buildNewDescriptionPrompt(categoryData.title, h1, productsCount, productsData);
    
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É:', userPrompt.substring(0, 200) + '...');
    
    // –í—ã–∑—ã–≤–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    const newDescription = callOpenAIAssistantForCategory(
      userPrompt, 
      CATEGORY_DESCRIPTION_ASSISTANT_ID
    );
    
    // –í–ê–ñ–ù–û: –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ C17 (–Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è), B17 –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
    writeNewDescriptionToColumn(sheet, newDescription);
    
    SpreadsheetApp.getActiveSpreadsheet().toast(
      `${mode} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!`,
      '‚úÖ –ì–æ—Ç–æ–≤–æ',
      5
    );
    
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const message = isRewrite 
      ? `‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ!\n\nüìç –°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è: –∫–æ–ª–æ–Ω–∫–∞ B\nüìç –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: –∫–æ–ª–æ–Ω–∫–∞ C\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç.`
      : `‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —Å –Ω—É–ª—è!\n\nüìç –†–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–ª–æ–Ω–∫–µ C\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ InSales.`;
    
    SpreadsheetApp.getUi().alert('–ì–æ—Ç–æ–≤–æ', message, SpreadsheetApp.getUi().ButtonSet.OK);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è:', error);
    SpreadsheetApp.getUi().alert('–û—à–∏–±–∫–∞: ' + error.message);
  }
}

/**
 * –ü—Ä–æ–º–ø—Ç –¥–ª—è –†–ï–†–ê–ô–¢–ê —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
 */
function buildRewritePrompt(title, h1, existingDescription, totalCount, productsData) {
  const priceRange = productsData.minPrice > 0 
    ? `–æ—Ç ${productsData.minPrice}‚ÇΩ –¥–æ ${productsData.maxPrice}‚ÇΩ`
    : '–Ω–µ —É–∫–∞–∑–∞–Ω–∞';
  
  return `–ó–ê–î–ê–ß–ê: –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ –æ–ø—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–±–æ—Ä–æ–≤.

–î–ê–ù–ù–´–ï –û –ö–ê–¢–ï–ì–û–†–ò–ò:
- –ù–∞–∑–≤–∞–Ω–∏–µ: ${title}
- H1: ${h1}
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: ${totalCount} (–≤ –Ω–∞–ª–∏—á–∏–∏: ${productsData.count})
- –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω: ${priceRange}

–¢–ï–ö–£–©–ï–ï –û–ü–ò–°–ê–ù–ò–ï (–¢–†–ï–ë–£–ï–¢ –£–õ–£–ß–®–ï–ù–ò–Ø):
${existingDescription}

–ß–¢–û –ù–£–ñ–ù–û –°–î–ï–õ–ê–¢–¨:
1. –°–æ—Ö—Ä–∞–Ω–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
2. –£–ª—É—á—à–∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç—å –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞
3. –£–±–µ—Ä–∏ –∫–∞–Ω—Ü–µ–ª—è—Ä–∏–∑–º—ã —Ç–∏–ø–∞ "—è–≤–ª—è–µ—Ç—Å—è", "–ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π", "–ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å"
4. –î–æ–±–∞–≤—å –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∏ –∏ –ø–æ–ª—å–∑—ã –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
5. –°–¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç –±–æ–ª–µ–µ –∂–∏–≤—ã–º –∏ –ø—Ä–æ–¥–∞—é—â–∏–º
6. –°–æ—Ö—Ä–∞–Ω–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –Ω–æ –≤–ø–ª–µ—Ç–∏ –∏—Ö –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–µ–µ
7. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é —è—Ä–∫–∏–π –∏ —É–±–µ–¥–∏—Ç–µ–ª—å–Ω—ã–π

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –û–±—ä–µ–º: 300-500 —Å–ª–æ–≤ (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ ¬±50 —Å–ª–æ–≤)
- HTML —Ä–∞–∑–º–µ—Ç–∫–∞: <h2>, <p>, <ul>, <li>
- –ñ–∏–≤–æ–π —è–∑—ã–∫ –±–µ–∑ —à—Ç–∞–º–ø–æ–≤
- –ù–ï —É–ø–æ–º–∏–Ω–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–µ–Ω—ã

–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ —É–ª—É—á—à–µ–Ω–Ω—ã–π HTML –∫–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è.`;
}

/**
 * –ü—Ä–æ–º–ø—Ç –¥–ª—è –ù–û–í–û–ô –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–∫–æ–≥–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç)
 */
function buildNewDescriptionPrompt(title, h1, totalCount, productsData) {
  const productsList = productsData.products.length > 0 
    ? productsData.products.map(p => `‚Ä¢ ${p.title} (${p.price}‚ÇΩ, ${p.brand || '–±–µ–∑ –±—Ä–µ–Ω–¥–∞'})`).join('\n')
    : '–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –Ω–∞–ª–∏—á–∏–∏';
  
  const priceRange = productsData.minPrice > 0 
    ? `–æ—Ç ${productsData.minPrice}‚ÇΩ –¥–æ ${productsData.maxPrice}‚ÇΩ`
    : '–Ω–µ —É–∫–∞–∑–∞–Ω–∞';
  
  return `–ó–ê–î–ê–ß–ê: –°–æ–∑–¥–∞–π SEO-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ –æ–ø—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–±–æ—Ä–æ–≤ —Å –Ω—É–ª—è.

–î–ê–ù–ù–´–ï –û –ö–ê–¢–ï–ì–û–†–ò–ò:
- –ù–∞–∑–≤–∞–Ω–∏–µ: ${title}
- H1: ${h1}
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: ${totalCount} (–≤ –Ω–∞–ª–∏—á–∏–∏: ${productsData.count})
- –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω: ${priceRange}

–ü–†–ò–ú–ï–†–´ –¢–û–í–ê–†–û–í –í –ö–ê–¢–ï–ì–û–†–ò–ò:
${productsList}

–°–¢–†–£–ö–¢–£–†–ê –û–ü–ò–°–ê–ù–ò–Ø:
1. –í–≤–æ–¥–Ω—ã–π –∞–±–∑–∞—Ü (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) - —á—Ç–æ —ç—Ç–æ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –¥–ª—è –∫–æ–≥–æ, –∑–∞—á–µ–º
2. –û–ø–∏—Å–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∏—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
3. –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø–æ–∫—É–ø–∫–∏ –≤ Binokl.shop:
   - –®–∏—Ä–æ–∫–∏–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–±–æ—Ä–æ–≤
   - –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
   - –ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞
   - –ì–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞
4. –°–æ–≤–µ—Ç—ã –ø–æ –≤—ã–±–æ—Ä—É —Ç–æ–≤–∞—Ä–∞
5. –ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –û–±—ä–µ–º: 300-500 —Å–ª–æ–≤
- –ñ–∏–≤–æ–π, –ø—Ä–æ–¥–∞—é—â–∏–π —è–∑—ã–∫
- HTML —Ä–∞–∑–º–µ—Ç–∫–∞: <h2>, <p>, <ul>, <li>
- –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
- –ù–ï —É–ø–æ–º–∏–Ω–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–µ–Ω—ã

–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –≥–æ—Ç–æ–≤—ã–π HTML –∫–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è.`;
}

/**
 * –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –∫–æ–ª–æ–Ω–∫—É C (C17)
 */
function writeNewDescriptionToColumn(sheet, description) {
  try {
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ C17 (–Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è)
    sheet.getRange('C17').setValue(description);
    sheet.getRange('C17').setWrap(true);
    sheet.getRange('C17').setBackground('#c8e6c9'); // –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π = –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ C, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    const headerC = sheet.getRange('C16').getValue();
    if (!headerC || headerC.toString().trim() === '') {
      sheet.getRange('C16').setValue('–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –æ–ø–∏—Å–∞–Ω–∏—è:');
      sheet.getRange('C16').setFontWeight('bold');
      sheet.getRange('C16').setBackground('#81c784');
    }
    
    // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é –≤ B17 (–µ—Å–ª–∏ –µ—Å—Ç—å)
    const oldDescription = sheet.getRange('B17').getValue();
    if (oldDescription && oldDescription.toString().trim().length > 0) {
      sheet.getRange('B17').setBackground('#fff9c4'); // –ñ–µ–ª—Ç—ã–π = —Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è
      
      // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –¥–ª—è B16
      sheet.getRange('B16').setValue('–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è):');
      sheet.getRange('B16').setFontWeight('bold');
      sheet.getRange('B16').setBackground('#ffeb3b');
    }
    
    console.log('‚úÖ –ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ C17');
    console.log('üìä –°—Ç–∞—Ä–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Å—Ç–∞–ª–æ—Å—å –≤ B17');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏:', error);
    throw error;
  }
}

/**
 * –°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ª–∏—Å—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
function getProductsDataFromSheet(sheet) {
  try {
    const startRow = 28;
    const data = sheet.getRange(startRow, 1, 20, 8).getValues();
    
    const products = [];
    let minPrice = Infinity;
    let maxPrice = 0;
    
    for (let row of data) {
      if (!row[3] || row[3].toString().trim() === '') break;
      
      const title = row[3];
      const inStock = row[4];
      const price = parseFloat(row[5]) || 0;
      const brand = row[6];
      
      if (inStock && inStock.toString().toLowerCase() !== '–Ω–µ—Ç' && price > 0) {
        products.push({ title, price, brand });
        
        if (price < minPrice) minPrice = price;
        if (price > maxPrice) maxPrice = price;
      }
    }
    
    return {
      products: products.slice(0, 10),
      count: products.length,
      minPrice: minPrice === Infinity ? 0 : minPrice,
      maxPrice: maxPrice
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ª–∏—Å—Ç–∞:', error);
    return { products: [], count: 0, minPrice: 0, maxPrice: 0 };
  }
}

/**
 * –í—ã–∑–æ–≤ OpenAI Assistant –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
 */
function callOpenAIAssistantForCategory(userContent, assistantId) {
  try {
    const apiKey = getOpenAIConfig().apiKey;
    
    if (!apiKey || apiKey.includes('–í–ê–®')) {
      throw new Error('OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ —Ñ–∞–π–ª–µ 01_config.gs');
    }
    
    console.log('ü§ñ –í—ã–∑—ã–≤–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:', assistantId);
    
    const result = executeOpenAIRequestForCategory(userContent, assistantId, apiKey);
    
    if (!result || result.trim().length === 0) {
      throw new Error('–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç');
    }
    
    const cleaned = cleanMarkdownFromResult(result);
    console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –¥–ª–∏–Ω–æ–π:', cleaned.length, '—Å–∏–º–≤–æ–ª–æ–≤');
    
    return cleaned;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:', error);
    throw new Error(`–û—à–∏–±–∫–∞ OpenAI Assistant: ${error.message}`);
  }
}

/**
 * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI Assistants API
 */
function executeOpenAIRequestForCategory(userContent, assistantId, apiKey) {
  let threadId;
  
  // 1. –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–¥–∞
  try {
    console.log('üìù –°–æ–∑–¥–∞–µ–º thread...');
    
    const threadResponse = UrlFetchApp.fetch('https://api.openai.com/v1/threads', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${apiKey}`,
        'Content-Type': 'application/json',
        'OpenAI-Beta': 'assistants=v2'
      },
      payload: JSON.stringify({
        messages: [{ role: 'user', content: userContent }]
      }),
      muteHttpExceptions: true
    });

    if (threadResponse.getResponseCode() >= 400) {
      throw new Error(`Thread error: ${threadResponse.getContentText()}`);
    }

    threadId = JSON.parse(threadResponse.getContentText()).id;
    console.log('‚úÖ Thread —Å–æ–∑–¥–∞–Ω:', threadId);
    
  } catch (error) {
    throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è thread: ${error.message}`);
  }

  // 2. –ó–∞–ø—É—Å–∫
  let runId;
  try {
    const runResponse = UrlFetchApp.fetch(`https://api.openai.com/v1/threads/${threadId}/runs`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${apiKey}`,
        'Content-Type': 'application/json',
        'OpenAI-Beta': 'assistants=v2'
      },
      payload: JSON.stringify({ assistant_id: assistantId }),
      muteHttpExceptions: true
    });

    runId = JSON.parse(runResponse.getContentText()).id;
    console.log('‚úÖ Run –∑–∞–ø—É—â–µ–Ω:', runId);
    
  } catch (error) {
    throw new Error(`–û—à–∏–±–∫–∞ run: ${error.message}`);
  }

  // 3. –û–∂–∏–¥–∞–Ω–∏–µ
  let status = 'queued';
  let attempts = 0;
  
  while (status !== 'completed' && attempts < 40) {
    Utilities.sleep(3000);
    attempts++;
    
    const statusResponse = UrlFetchApp.fetch(
      `https://api.openai.com/v1/threads/${threadId}/runs/${runId}`,
      {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${apiKey}`,
          'OpenAI-Beta': 'assistants=v2'
        }
      }
    );
    
    status = JSON.parse(statusResponse.getContentText()).status;
    console.log(`‚è≥ ${attempts}/40: ${status}`);
  }

  if (status !== 'completed') {
    throw new Error(`–ù–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è: ${status}`);
  }

  // 4. –†–µ–∑—É–ª—å—Ç–∞—Ç
  const messagesResponse = UrlFetchApp.fetch(
    `https://api.openai.com/v1/threads/${threadId}/messages`,
    {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${apiKey}`,
        'OpenAI-Beta': 'assistants=v2'
      }
    }
  );

  const messages = JSON.parse(messagesResponse.getContentText()).data;
  
  for (let msg of messages) {
    if (msg.role === 'assistant' && msg.content[0]?.text?.value) {
      return msg.content[0].text.value;
    }
  }

  throw new Error('–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞');
}

/**
 * –û—á–∏—Å—Ç–∫–∞ markdown –∏–∑ –æ—Ç–≤–µ—Ç–∞
 */
function cleanMarkdownFromResult(text) {
  if (!text || typeof text !== 'string') {
    return text;
  }

  let cleaned = text.trim();
  
  // –£–¥–∞–ª—è–µ–º markdown –±–ª–æ–∫–∏
  cleaned = cleaned.replace(/^```html\s*/i, '');
  cleaned = cleaned.replace(/^```\s*/i, '');
  cleaned = cleaned.replace(/\s*```\s*$/i, '');
  
  // –£–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤
  cleaned = cleaned.replace(/^json\s*/i, '');
  cleaned = cleaned.replace(/^html\s*/i, '');
  cleaned = cleaned.replace(/^response:\s*/i, '');
  cleaned = cleaned.replace(/^result:\s*/i, '');
  
  return cleaned.trim();
}